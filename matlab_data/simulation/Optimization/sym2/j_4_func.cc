/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 21:22:20 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t178;
  double t148;
  double t162;
  double t161;
  double t190;
  double t167;
  double t202;
  double t211;
  double t218;
  double t230;
  double t245;
  double t270;
  double t268;
  double t265;
  double t267;
  double t285;
  double t287;
  double t289;
  double t305;
  double t318;
  double t340;
  double t341;
  double t335;
  double t214;
  double t367;
  double t383;
  double t384;
  double t392;
  double t395;
  double t397;
  double t355;
  double t402;
  double t409;
  double t414;
  double t417;
  double t418;
  double t420;
  double t336;
  double t337;
  double t446;
  double t459;
  double t461;
  double t463;
  double t468;
  double t469;
  double t472;
  double t212;
  double t501;
  double t500;
  double t503;
  double t509;
  double t512;
  double t514;
  double t502;
  double t504;
  double t505;
  double t517;
  double t518;
  double t522;
  double t398;
  double t497;
  double t547;
  double t549;
  double t550;
  double t567;
  double t569;
  double t570;
  double t523;
  double t524;
  double t530;
  double t458;
  double t584;
  double t585;
  double t590;
  double t592;
  double t593;
  double t596;
  double t628;
  double t625;
  double t623;
  double t624;
  double t629;
  double t630;
  double t632;
  double t634;
  double t636;
  double t654;
  double t655;
  double t638;
  double t611;
  double t662;
  double t672;
  double t673;
  double t674;
  double t676;
  double t677;
  double t678;
  double t642;
  double t643;
  double t703;
  double t704;
  double t705;
  double t707;
  double t709;
  double t710;
  double t754;
  double t756;
  double t758;
  double t759;
  double t760;
  double t753;
  double t761;
  double t762;
  double t768;
  double t769;
  double t770;
  double t743;
  double t795;
  double t800;
  double t801;
  double t794;
  double t807;
  double t808;
  double t813;
  double t814;
  double t815;
  double t848;
  double t849;
  double t850;
  double t846;
  double t851;
  double t853;
  double t855;
  double t856;
  double t857;
  double t737;
  double t886;
  double t887;
  double t888;
  double t891;
  double t896;
  double t899;
  double t900;
  double t892;
  double t893;
  double t894;
  double t788;
  double t880;
  double t929;
  double t930;
  double t932;
  double t946;
  double t947;
  double t949;
  double t933;
  double t934;
  double t935;
  double t831;
  double t977;
  double t978;
  double t979;
  double t988;
  double t989;
  double t990;
  double t980;
  double t981;
  double t984;
  double t878;
  double t1018;
  double t1019;
  double t1020;
  double t1024;
  double t1017;
  double t1025;
  double t1027;
  double t1030;
  double t1031;
  double t1032;
  double t918;
  double t1010;
  double t1059;
  double t1063;
  double t1064;
  double t1055;
  double t1066;
  double t1067;
  double t1069;
  double t1070;
  double t1071;
  double t969;
  double t1104;
  double t1105;
  double t1106;
  double t1102;
  double t1111;
  double t1113;
  double t1119;
  double t1121;
  double t1122;
  double t1144;
  double t1145;
  double t1148;
  double t1156;
  double t1158;
  double t1159;
  double t1155;
  double t1161;
  double t1164;
  double t1167;
  double t1168;
  double t1169;
  double t1195;
  double t1197;
  double t1198;
  double t1207;
  double t1209;
  double t1213;
  double t1202;
  double t1214;
  double t1215;
  double t1217;
  double t1218;
  double t1219;
  double t1150;
  double t1254;
  double t1255;
  double t1256;
  double t1267;
  double t1269;
  double t1270;
  double t1258;
  double t1260;
  double t1265;
  double t1190;
  double t1303;
  double t1304;
  double t1305;
  double t1312;
  double t1315;
  double t1322;
  double t1306;
  double t1307;
  double t1309;
  double t1246;
  double t1348;
  double t1351;
  double t1353;
  double t1347;
  double t1354;
  double t1355;
  double t1357;
  double t1358;
  double t1359;
  double t1291;
  double t1384;
  double t1386;
  double t1387;
  double t1382;
  double t1388;
  double t1389;
  double t1391;
  double t1393;
  double t1394;
  double t1299;
  double t1416;
  double t1417;
  double t1434;
  double t1435;
  double t1436;
  double t1443;
  double t1444;
  double t1446;
  double t1468;
  double t1469;
  double t1470;
  double t1495;
  double t1493;
  double t1494;
  double t1496;
  double t1497;
  double t1502;
  double t1503;
  double t1506;
  double t1528;
  double t1520;
  double t1521;
  double t1522;
  double t1524;
  double t1529;
  double t1530;
  double t1533;
  double t1534;
  double t1535;
  double t1552;
  double t1553;
  double t1548;
  double t1549;
  double t1550;
  double t1551;
  double t1554;
  double t1555;
  double t1557;
  double t1559;
  double t1561;
  double t1576;
  double t1577;
  double t1578;
  double t1574;
  double t1592;
  double t1593;
  double t1594;
  double t1590;
  double t1609;
  double t1610;
  double t1611;
  double t1607;
  double t1625;
  double t1626;
  double t1627;
  double t1647;
  double t1648;
  double t1649;
  double t1665;
  double t1666;
  double t1667;
  double t1689;
  double t1688;
  double t1690;
  double t1691;
  double t1694;
  double t1696;
  double t1697;
  double t1644;
  double t1711;
  double t1712;
  double t1710;
  double t1713;
  double t1714;
  double t1716;
  double t1717;
  double t1718;
  double t1670;
  double t1732;
  double t1733;
  double t1731;
  double t1734;
  double t1735;
  double t1737;
  double t1738;
  double t1739;
  double t1750;
  double t1751;
  double t1752;
  double t1754;
  double t1763;
  double t1764;
  double t1765;
  double t1767;
  double t1776;
  double t1777;
  double t1778;
  double t1780;
  double t1376;
  double t1793;
  double t1794;
  double t1810;
  double t1811;
  double t1812;
  double t1824;
  double t1825;
  double t1826;
  double t1843;
  double t1842;
  double t1844;
  double t1845;
  double t1847;
  double t1848;
  double t1849;
  double t1861;
  double t1862;
  double t1863;
  double t1860;
  double t1864;
  double t1865;
  double t1867;
  double t1868;
  double t1869;
  double t1881;
  double t1882;
  double t1883;
  double t1880;
  double t1884;
  double t1885;
  double t1887;
  double t1888;
  double t1889;
  double t1900;
  double t1901;
  double t1902;
  double t1904;
  double t1913;
  double t1914;
  double t1915;
  double t1917;
  double t1926;
  double t1927;
  double t1928;
  double t1930;
  t178 = Cos(var1[3]);
  t148 = Cos(var1[5]);
  t162 = Sin(var1[4]);
  t161 = Sin(var1[3]);
  t190 = Sin(var1[5]);
  t167 = -1.*t148*t161*t162;
  t202 = t178*t190;
  t211 = t167 + t202;
  t218 = t178*t148*t162;
  t230 = t161*t190;
  t245 = t218 + t230;
  t270 = Cos(var1[10]);
  t268 = Cos(var1[9]);
  t265 = Sin(var1[10]);
  t267 = t265*t211;
  t285 = t268*t270*t245;
  t287 = t267 + t285;
  t289 = t270*t211;
  t305 = -1.*t268*t265*t245;
  t318 = t289 + t305;
  t340 = Cos(var1[11]);
  t341 = 0. + t340;
  t335 = Sin(var1[11]);
  t214 = Sin(var1[9]);
  t367 = -1.*t148*t161;
  t383 = t178*t162*t190;
  t384 = t367 + t383;
  t392 = -1.*t178*t148;
  t395 = -1.*t161*t162*t190;
  t397 = t392 + t395;
  t355 = 0. + t335;
  t402 = -1.*t268*t265*t384;
  t409 = t270*t397;
  t414 = t402 + t409;
  t417 = t268*t270*t384;
  t418 = t265*t397;
  t420 = t417 + t418;
  t336 = -1.*t335;
  t337 = 0. + t336;
  t446 = Cos(var1[4]);
  t459 = -1.*t268*t178*t446*t265;
  t461 = -1.*t270*t446*t161;
  t463 = t459 + t461;
  t468 = t268*t270*t178*t446;
  t469 = -1.*t446*t265*t161;
  t472 = t468 + t469;
  t212 = 0.2429*t211;
  t501 = Cos(var1[7]);
  t500 = Cos(var1[6]);
  t503 = Sin(var1[7]);
  t509 = t501*t211;
  t512 = -1.*t500*t245*t503;
  t514 = t509 + t512;
  t502 = t500*t501*t245;
  t504 = t211*t503;
  t505 = t502 + t504;
  t517 = Cos(var1[8]);
  t518 = 0. + t517;
  t522 = Sin(var1[8]);
  t398 = 0.2429*t397;
  t497 = Sin(var1[6]);
  t547 = t501*t397;
  t549 = -1.*t500*t384*t503;
  t550 = t547 + t549;
  t567 = t500*t501*t384;
  t569 = t397*t503;
  t570 = t567 + t569;
  t523 = -1.*t522;
  t524 = 0. + t523;
  t530 = 0. + t522;
  t458 = -0.2429*t446*t161;
  t584 = -1.*t446*t501*t161;
  t585 = -1.*t178*t446*t500*t503;
  t590 = t584 + t585;
  t592 = t178*t446*t500*t501;
  t593 = -1.*t446*t161*t503;
  t596 = t592 + t593;
  t628 = Cos(var1[13]);
  t625 = Cos(var1[12]);
  t623 = Sin(var1[13]);
  t624 = t623*t211;
  t629 = t625*t628*t245;
  t630 = t624 + t629;
  t632 = t628*t211;
  t634 = -1.*t625*t623*t245;
  t636 = t632 + t634;
  t654 = Cos(var1[14]);
  t655 = 0. + t654;
  t638 = Sin(var1[14]);
  t611 = Sin(var1[12]);
  t662 = 0. + t638;
  t672 = -1.*t625*t623*t384;
  t673 = t628*t397;
  t674 = t672 + t673;
  t676 = t625*t628*t384;
  t677 = t623*t397;
  t678 = t676 + t677;
  t642 = -1.*t638;
  t643 = 0. + t642;
  t703 = -1.*t625*t178*t446*t623;
  t704 = -1.*t628*t446*t161;
  t705 = t703 + t704;
  t707 = t625*t628*t178*t446;
  t709 = -1.*t446*t623*t161;
  t710 = t707 + t709;
  t754 = t268*t446*t148*t161;
  t756 = -1.*t214;
  t758 = 0. + t756;
  t759 = -1.*t148*t758*t162;
  t760 = t754 + t759;
  t753 = t178*t446*t148*t265;
  t761 = t270*t760;
  t762 = t753 + t761;
  t768 = t270*t178*t446*t148;
  t769 = -1.*t265*t760;
  t770 = t768 + t769;
  t743 = 0. + t268;
  t795 = t268*t446*t161*t190;
  t800 = -1.*t758*t162*t190;
  t801 = t795 + t800;
  t794 = t178*t446*t265*t190;
  t807 = t270*t801;
  t808 = t794 + t807;
  t813 = t270*t178*t446*t190;
  t814 = -1.*t265*t801;
  t815 = t813 + t814;
  t848 = -1.*t446*t758;
  t849 = -1.*t268*t161*t162;
  t850 = t848 + t849;
  t846 = -1.*t178*t265*t162;
  t851 = t270*t850;
  t853 = t846 + t851;
  t855 = -1.*t270*t178*t162;
  t856 = -1.*t265*t850;
  t857 = t855 + t856;
  t737 = 0.2429*t178*t446*t148;
  t886 = t446*t148*t500*t161;
  t887 = 0. + t497;
  t888 = -1.*t148*t162*t887;
  t891 = t886 + t888;
  t896 = t178*t446*t148*t501;
  t899 = -1.*t891*t503;
  t900 = t896 + t899;
  t892 = t501*t891;
  t893 = t178*t446*t148*t503;
  t894 = t892 + t893;
  t788 = 0.2429*t178*t446*t190;
  t880 = 0. + t500;
  t929 = t446*t500*t161*t190;
  t930 = -1.*t162*t190*t887;
  t932 = t929 + t930;
  t946 = t178*t446*t501*t190;
  t947 = -1.*t932*t503;
  t949 = t946 + t947;
  t933 = t501*t932;
  t934 = t178*t446*t190*t503;
  t935 = t933 + t934;
  t831 = -0.2429*t178*t162;
  t977 = -1.*t500*t161*t162;
  t978 = -1.*t446*t887;
  t979 = t977 + t978;
  t988 = -1.*t178*t501*t162;
  t989 = -1.*t979*t503;
  t990 = t988 + t989;
  t980 = t501*t979;
  t981 = -1.*t178*t162*t503;
  t984 = t980 + t981;
  t878 = 0.0817*t148*t162;
  t1018 = t625*t446*t148*t161;
  t1019 = 0. + t611;
  t1020 = -1.*t148*t1019*t162;
  t1024 = t1018 + t1020;
  t1017 = t178*t446*t148*t623;
  t1025 = t628*t1024;
  t1027 = t1017 + t1025;
  t1030 = t628*t178*t446*t148;
  t1031 = -1.*t623*t1024;
  t1032 = t1030 + t1031;
  t918 = 0.0817*t162*t190;
  t1010 = 0. + t625;
  t1059 = t625*t446*t161*t190;
  t1063 = -1.*t1019*t162*t190;
  t1064 = t1059 + t1063;
  t1055 = t178*t446*t623*t190;
  t1066 = t628*t1064;
  t1067 = t1055 + t1066;
  t1069 = t628*t178*t446*t190;
  t1070 = -1.*t623*t1064;
  t1071 = t1069 + t1070;
  t969 = 0.0817*t446;
  t1104 = -1.*t446*t1019;
  t1105 = -1.*t625*t161*t162;
  t1106 = t1104 + t1105;
  t1102 = -1.*t178*t623*t162;
  t1111 = t628*t1106;
  t1113 = t1102 + t1111;
  t1119 = -1.*t628*t178*t162;
  t1121 = -1.*t623*t1106;
  t1122 = t1119 + t1121;
  t1144 = t148*t161;
  t1145 = -1.*t178*t162*t190;
  t1148 = t1144 + t1145;
  t1156 = -1.*t446*t758*t190;
  t1158 = t268*t397;
  t1159 = t1156 + t1158;
  t1155 = t265*t1148;
  t1161 = t270*t1159;
  t1164 = t1155 + t1161;
  t1167 = t270*t1148;
  t1168 = -1.*t265*t1159;
  t1169 = t1167 + t1168;
  t1195 = t148*t161*t162;
  t1197 = -1.*t178*t190;
  t1198 = t1195 + t1197;
  t1207 = t446*t148*t758;
  t1209 = t268*t1198;
  t1213 = t1207 + t1209;
  t1202 = t265*t245;
  t1214 = t270*t1213;
  t1215 = t1202 + t1214;
  t1217 = t270*t245;
  t1218 = -1.*t265*t1213;
  t1219 = t1217 + t1218;
  t1150 = 0.2429*t1148;
  t1254 = t500*t397;
  t1255 = -1.*t446*t190*t887;
  t1256 = t1254 + t1255;
  t1267 = t501*t1148;
  t1269 = -1.*t1256*t503;
  t1270 = t1267 + t1269;
  t1258 = t501*t1256;
  t1260 = t1148*t503;
  t1265 = t1258 + t1260;
  t1190 = 0.2429*t245;
  t1303 = t500*t1198;
  t1304 = t446*t148*t887;
  t1305 = t1303 + t1304;
  t1312 = t501*t245;
  t1315 = -1.*t1305*t503;
  t1322 = t1312 + t1315;
  t1306 = t501*t1305;
  t1307 = t245*t503;
  t1309 = t1306 + t1307;
  t1246 = 0.0817*t446*t190;
  t1348 = -1.*t446*t1019*t190;
  t1351 = t625*t397;
  t1353 = t1348 + t1351;
  t1347 = t623*t1148;
  t1354 = t628*t1353;
  t1355 = t1347 + t1354;
  t1357 = t628*t1148;
  t1358 = -1.*t623*t1353;
  t1359 = t1357 + t1358;
  t1291 = -0.0817*t446*t148;
  t1384 = t446*t148*t1019;
  t1386 = t625*t1198;
  t1387 = t1384 + t1386;
  t1382 = t623*t245;
  t1388 = t628*t1387;
  t1389 = t1382 + t1388;
  t1391 = t628*t245;
  t1393 = -1.*t623*t1387;
  t1394 = t1391 + t1393;
  t1299 = -1.*t1198*t497;
  t1416 = t446*t148*t500;
  t1417 = t1416 + t1299;
  t1434 = t178*t148;
  t1435 = t161*t162*t190;
  t1436 = t1434 + t1435;
  t1443 = t446*t500*t190;
  t1444 = -1.*t1436*t497;
  t1446 = t1443 + t1444;
  t1468 = -1.*t500*t162;
  t1469 = -1.*t446*t161*t497;
  t1470 = t1468 + t1469;
  t1495 = 0. + t218 + t230;
  t1493 = 0. + t1303 + t1304;
  t1494 = -1.*t501*t1493;
  t1496 = -1.*t1495*t503;
  t1497 = t1494 + t1496;
  t1502 = t501*t1495;
  t1503 = -1.*t1493*t503;
  t1506 = t1502 + t1503;
  t1528 = 0. + t367 + t383;
  t1520 = t500*t1436;
  t1521 = t446*t190*t887;
  t1522 = 0. + t1520 + t1521;
  t1524 = -1.*t501*t1522;
  t1529 = -1.*t1528*t503;
  t1530 = t1524 + t1529;
  t1533 = t501*t1528;
  t1534 = -1.*t1522*t503;
  t1535 = t1533 + t1534;
  t1552 = t178*t446;
  t1553 = 0. + t1552;
  t1548 = t446*t500*t161;
  t1549 = -1.*t162*t887;
  t1550 = 0. + t1548 + t1549;
  t1551 = -1.*t501*t1550;
  t1554 = -1.*t1553*t503;
  t1555 = t1551 + t1554;
  t1557 = t1553*t501;
  t1559 = -1.*t1550*t503;
  t1561 = t1557 + t1559;
  t1576 = t501*t1493;
  t1577 = t1495*t503;
  t1578 = 0. + t1576 + t1577;
  t1574 = 0. + t1502 + t1503;
  t1592 = t501*t1522;
  t1593 = t1528*t503;
  t1594 = 0. + t1592 + t1593;
  t1590 = 0. + t1533 + t1534;
  t1609 = t501*t1550;
  t1610 = t1553*t503;
  t1611 = 0. + t1609 + t1610;
  t1607 = 0. + t1557 + t1559;
  t1625 = -1.*t268*t446*t148;
  t1626 = -1.*t214*t1198;
  t1627 = t1625 + t1626;
  t1647 = -1.*t268*t446*t190;
  t1648 = -1.*t214*t1436;
  t1649 = t1647 + t1648;
  t1665 = -1.*t446*t214*t161;
  t1666 = t268*t162;
  t1667 = t1665 + t1666;
  t1689 = 0. + t1207 + t1209;
  t1688 = -1.*t265*t1495;
  t1690 = -1.*t270*t1689;
  t1691 = t1688 + t1690;
  t1694 = t270*t1495;
  t1696 = -1.*t265*t1689;
  t1697 = t1694 + t1696;
  t1644 = t268*t1436;
  t1711 = t446*t758*t190;
  t1712 = 0. + t1711 + t1644;
  t1710 = -1.*t265*t1528;
  t1713 = -1.*t270*t1712;
  t1714 = t1710 + t1713;
  t1716 = t270*t1528;
  t1717 = -1.*t265*t1712;
  t1718 = t1716 + t1717;
  t1670 = t268*t446*t161;
  t1732 = -1.*t758*t162;
  t1733 = 0. + t1670 + t1732;
  t1731 = -1.*t1553*t265;
  t1734 = -1.*t270*t1733;
  t1735 = t1731 + t1734;
  t1737 = t270*t1553;
  t1738 = -1.*t265*t1733;
  t1739 = t1737 + t1738;
  t1750 = t265*t1495;
  t1751 = t270*t1689;
  t1752 = 0. + t1750 + t1751;
  t1754 = 0. + t1694 + t1696;
  t1763 = t265*t1528;
  t1764 = t270*t1712;
  t1765 = 0. + t1763 + t1764;
  t1767 = 0. + t1716 + t1717;
  t1776 = t1553*t265;
  t1777 = t270*t1733;
  t1778 = 0. + t1776 + t1777;
  t1780 = 0. + t1737 + t1738;
  t1376 = -1.*t611*t1198;
  t1793 = t625*t446*t148;
  t1794 = t1793 + t1376;
  t1810 = t625*t446*t190;
  t1811 = -1.*t611*t1436;
  t1812 = t1810 + t1811;
  t1824 = -1.*t446*t611*t161;
  t1825 = -1.*t625*t162;
  t1826 = t1824 + t1825;
  t1843 = 0. + t1384 + t1386;
  t1842 = -1.*t623*t1495;
  t1844 = -1.*t628*t1843;
  t1845 = t1842 + t1844;
  t1847 = t628*t1495;
  t1848 = -1.*t623*t1843;
  t1849 = t1847 + t1848;
  t1861 = t446*t1019*t190;
  t1862 = t625*t1436;
  t1863 = 0. + t1861 + t1862;
  t1860 = -1.*t623*t1528;
  t1864 = -1.*t628*t1863;
  t1865 = t1860 + t1864;
  t1867 = t628*t1528;
  t1868 = -1.*t623*t1863;
  t1869 = t1867 + t1868;
  t1881 = t625*t446*t161;
  t1882 = -1.*t1019*t162;
  t1883 = 0. + t1881 + t1882;
  t1880 = -1.*t1553*t623;
  t1884 = -1.*t628*t1883;
  t1885 = t1880 + t1884;
  t1887 = t628*t1553;
  t1888 = -1.*t623*t1883;
  t1889 = t1887 + t1888;
  t1900 = t623*t1495;
  t1901 = t628*t1843;
  t1902 = 0. + t1900 + t1901;
  t1904 = 0. + t1847 + t1848;
  t1913 = t623*t1528;
  t1914 = t628*t1863;
  t1915 = 0. + t1913 + t1914;
  t1917 = 0. + t1867 + t1868;
  t1926 = t1553*t623;
  t1927 = t628*t1883;
  t1928 = 0. + t1926 + t1927;
  t1930 = 0. + t1887 + t1888;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=1.;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=1.;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=1.;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=1.;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=1.;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=1.;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=1.;
  p_output1[27]=t212 + 0.035199999999999995*t214*t245 - 0.2083*t287 - 0.1422*t318 - 0.02*(t287*t337 + t318*t341) - 0.16*(t287*t341 + t318*t355);
  p_output1[28]=0.035199999999999995*t214*t384 + t398 - 0.1422*t414 - 0.2083*t420 - 0.02*(t341*t414 + t337*t420) - 0.16*(t355*t414 + t341*t420);
  p_output1[29]=0.035199999999999995*t178*t214*t446 + t458 - 0.1422*t463 - 0.2083*t472 - 0.02*(t341*t463 + t337*t472) - 0.16*(t355*t463 + t341*t472);
  p_output1[30]=t212 + 0.0329*t245*t497 - 0.2083*t505 - 0.1422*t514 - 0.02*(t514*t518 + t505*t524) - 0.16*(t505*t518 + t514*t530);
  p_output1[31]=t398 + 0.0329*t384*t497 - 0.1422*t550 - 0.2083*t570 - 0.16*(t530*t550 + t518*t570) - 0.02*(t518*t550 + t524*t570);
  p_output1[32]=t458 + 0.0329*t178*t446*t497 - 0.1422*t590 - 0.2083*t596 - 0.16*(t530*t590 + t518*t596) - 0.02*(t518*t590 + t524*t596);
  p_output1[33]=-0.1944*t211 + 0.0329*t245*t611 - 0.2083*t630 - 0.1422*t636 - 0.02*(t630*t643 + t636*t655) - 0.16*(t630*t655 + t636*t662);
  p_output1[34]=-0.1944*t397 + 0.0329*t384*t611 - 0.1422*t674 - 0.2083*t678 - 0.02*(t655*t674 + t643*t678) - 0.16*(t662*t674 + t655*t678);
  p_output1[35]=0.1944*t161*t446 + 0.0329*t178*t446*t611 - 0.1422*t705 - 0.2083*t710 - 0.02*(t655*t705 + t643*t710) - 0.16*(t662*t705 + t655*t710);
  p_output1[36]=-0.0817*t148*t162 + t737 + 0.035199999999999995*(t148*t161*t214*t446 - 1.*t148*t162*t743) - 0.2083*t762 - 0.1422*t770 - 0.02*(t337*t762 + t341*t770) - 0.16*(t341*t762 + t355*t770);
  p_output1[37]=-0.0817*t162*t190 + 0.035199999999999995*(t161*t190*t214*t446 - 1.*t162*t190*t743) + t788 - 0.2083*t808 - 0.1422*t815 - 0.02*(t337*t808 + t341*t815) - 0.16*(t341*t808 + t355*t815);
  p_output1[38]=-0.0817*t446 + 0.035199999999999995*(-1.*t161*t162*t214 - 1.*t446*t743) + t831 - 0.2083*t853 - 0.1422*t857 - 0.02*(t337*t853 + t341*t857) - 0.16*(t341*t853 + t355*t857);
  p_output1[39]=t737 + t878 - 0.0329*(-1.*t148*t161*t446*t497 - 1.*t148*t162*t880) - 0.2083*t894 - 0.1422*t900 - 0.02*(t524*t894 + t518*t900) - 0.16*(t518*t894 + t530*t900);
  p_output1[40]=t788 - 0.0329*(-1.*t161*t190*t446*t497 - 1.*t162*t190*t880) + t918 - 0.2083*t935 - 0.1422*t949 - 0.02*(t524*t935 + t518*t949) - 0.16*(t518*t935 + t530*t949);
  p_output1[41]=t831 - 0.0329*(t161*t162*t497 - 1.*t446*t880) + t969 - 0.2083*t984 - 0.1422*t990 - 0.02*(t524*t984 + t518*t990) - 0.16*(t518*t984 + t530*t990);
  p_output1[42]=-0.2083*t1027 - 0.1422*t1032 - 0.1944*t148*t178*t446 - 0.0329*(-1.*t1010*t148*t162 - 1.*t148*t161*t446*t611) - 0.02*(t1027*t643 + t1032*t655) - 0.16*(t1027*t655 + t1032*t662) + t878;
  p_output1[43]=-0.2083*t1067 - 0.1422*t1071 - 0.1944*t178*t190*t446 - 0.0329*(-1.*t1010*t162*t190 - 1.*t161*t190*t446*t611) - 0.02*(t1067*t643 + t1071*t655) - 0.16*(t1067*t655 + t1071*t662) + t918;
  p_output1[44]=-0.2083*t1113 - 0.1422*t1122 + 0.1944*t162*t178 - 0.0329*(-1.*t1010*t446 + t161*t162*t611) - 0.02*(t1113*t643 + t1122*t655) - 0.16*(t1113*t655 + t1122*t662) + t969;
  p_output1[45]=t1150 - 0.2083*t1164 - 0.1422*t1169 - 0.02*(t1164*t337 + t1169*t341) - 0.16*(t1164*t341 + t1169*t355) - 0.0817*t190*t446 + 0.035199999999999995*(t214*t397 - 1.*t190*t446*t743);
  p_output1[46]=t1190 - 0.2083*t1215 - 0.1422*t1219 - 0.02*(t1215*t337 + t1219*t341) - 0.16*(t1215*t341 + t1219*t355) + 0.0817*t148*t446 + 0.035199999999999995*(t1198*t214 + t148*t446*t743);
  p_output1[47]=0;
  p_output1[48]=t1150 + t1246 - 0.2083*t1265 - 0.1422*t1270 - 0.02*(t1270*t518 + t1265*t524) - 0.16*(t1265*t518 + t1270*t530) - 0.0329*(-1.*t397*t497 - 1.*t190*t446*t880);
  p_output1[49]=t1190 + t1291 - 0.2083*t1309 - 0.1422*t1322 - 0.02*(t1322*t518 + t1309*t524) - 0.16*(t1309*t518 + t1322*t530) - 0.0329*(t1299 + t148*t446*t880);
  p_output1[50]=0;
  p_output1[51]=-0.1944*t1148 + t1246 - 0.2083*t1355 - 0.1422*t1359 - 0.0329*(-1.*t1010*t190*t446 - 1.*t397*t611) - 0.02*(t1355*t643 + t1359*t655) - 0.16*(t1355*t655 + t1359*t662);
  p_output1[52]=t1291 - 0.2083*t1389 - 0.1422*t1394 - 0.1944*t245 - 0.0329*(t1376 + t1010*t148*t446) - 0.02*(t1389*t643 + t1394*t655) - 0.16*(t1389*t655 + t1394*t662);
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=-0.0329*(-1.*t148*t446*t497 - 1.*t1198*t500) - 0.2083*t1417*t501 + 0.1422*t1417*t503 - 0.02*(-1.*t1417*t503*t518 + t1417*t501*t524) - 0.16*(t1417*t501*t518 - 1.*t1417*t503*t530);
  p_output1[58]=-0.0329*(-1.*t190*t446*t497 - 1.*t1436*t500) - 0.2083*t1446*t501 + 0.1422*t1446*t503 - 0.02*(-1.*t1446*t503*t518 + t1446*t501*t524) - 0.16*(t1446*t501*t518 - 1.*t1446*t503*t530);
  p_output1[59]=-0.0329*(t162*t497 - 1.*t161*t446*t500) - 0.2083*t1470*t501 + 0.1422*t1470*t503 - 0.02*(-1.*t1470*t503*t518 + t1470*t501*t524) - 0.16*(t1470*t501*t518 - 1.*t1470*t503*t530);
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=-0.1422*t1497 - 0.2083*t1506 - 0.02*(t1497*t518 + t1506*t524) - 0.16*(t1506*t518 + t1497*t530);
  p_output1[67]=-0.1422*t1530 - 0.2083*t1535 - 0.02*(t1530*t518 + t1535*t524) - 0.16*(t1535*t518 + t1530*t530);
  p_output1[68]=-0.1422*t1555 - 0.2083*t1561 - 0.02*(t1555*t518 + t1561*t524) - 0.16*(t1561*t518 + t1555*t530);
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=-0.02*(-1.*t1578*t517 - 1.*t1574*t522) - 0.16*(t1574*t517 - 1.*t1578*t522);
  p_output1[76]=-0.02*(-1.*t1594*t517 - 1.*t1590*t522) - 0.16*(t1590*t517 - 1.*t1594*t522);
  p_output1[77]=-0.02*(-1.*t1611*t517 - 1.*t1607*t522) - 0.16*(t1607*t517 - 1.*t1611*t522);
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0.1422*t1627*t265 - 0.2083*t1627*t270 - 0.02*(t1627*t270*t337 - 1.*t1627*t265*t341) - 0.16*(t1627*t270*t341 - 1.*t1627*t265*t355) + 0.035199999999999995*(t1209 - 1.*t148*t214*t446);
  p_output1[82]=0.1422*t1649*t265 - 0.2083*t1649*t270 - 0.02*(t1649*t270*t337 - 1.*t1649*t265*t341) - 0.16*(t1649*t270*t341 - 1.*t1649*t265*t355) + 0.035199999999999995*(t1644 - 1.*t190*t214*t446);
  p_output1[83]=0.035199999999999995*(t1670 + t162*t214) + 0.1422*t1667*t265 - 0.2083*t1667*t270 - 0.02*(t1667*t270*t337 - 1.*t1667*t265*t341) - 0.16*(t1667*t270*t341 - 1.*t1667*t265*t355);
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=-0.1422*t1691 - 0.2083*t1697 - 0.02*(t1697*t337 + t1691*t341) - 0.16*(t1697*t341 + t1691*t355);
  p_output1[91]=-0.1422*t1714 - 0.2083*t1718 - 0.02*(t1718*t337 + t1714*t341) - 0.16*(t1718*t341 + t1714*t355);
  p_output1[92]=-0.1422*t1735 - 0.2083*t1739 - 0.02*(t1739*t337 + t1735*t341) - 0.16*(t1739*t341 + t1735*t355);
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=-0.02*(-1.*t1754*t335 - 1.*t1752*t340) - 0.16*(-1.*t1752*t335 + t1754*t340);
  p_output1[100]=-0.02*(-1.*t1767*t335 - 1.*t1765*t340) - 0.16*(-1.*t1765*t335 + t1767*t340);
  p_output1[101]=-0.02*(-1.*t1780*t335 - 1.*t1778*t340) - 0.16*(-1.*t1778*t335 + t1780*t340);
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0.1422*t1794*t623 - 0.0329*(-1.*t148*t446*t611 - 1.*t1198*t625) - 0.2083*t1794*t628 - 0.02*(t1794*t628*t643 - 1.*t1794*t623*t655) - 0.16*(t1794*t628*t655 - 1.*t1794*t623*t662);
  p_output1[115]=0.1422*t1812*t623 - 0.0329*(-1.*t190*t446*t611 - 1.*t1436*t625) - 0.2083*t1812*t628 - 0.02*(t1812*t628*t643 - 1.*t1812*t623*t655) - 0.16*(t1812*t628*t655 - 1.*t1812*t623*t662);
  p_output1[116]=0.1422*t1826*t623 - 0.0329*(t162*t611 - 1.*t161*t446*t625) - 0.2083*t1826*t628 - 0.02*(t1826*t628*t643 - 1.*t1826*t623*t655) - 0.16*(t1826*t628*t655 - 1.*t1826*t623*t662);
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=-0.1422*t1845 - 0.2083*t1849 - 0.02*(t1849*t643 + t1845*t655) - 0.16*(t1849*t655 + t1845*t662);
  p_output1[124]=-0.1422*t1865 - 0.2083*t1869 - 0.02*(t1869*t643 + t1865*t655) - 0.16*(t1869*t655 + t1865*t662);
  p_output1[125]=-0.1422*t1885 - 0.2083*t1889 - 0.02*(t1889*t643 + t1885*t655) - 0.16*(t1889*t655 + t1885*t662);
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=-0.02*(-1.*t1904*t638 - 1.*t1902*t654) - 0.16*(-1.*t1902*t638 + t1904*t654);
  p_output1[133]=-0.02*(-1.*t1917*t638 - 1.*t1915*t654) - 0.16*(-1.*t1915*t638 + t1917*t654);
  p_output1[134]=-0.02*(-1.*t1930*t638 - 1.*t1928*t654) - 0.16*(-1.*t1928*t638 + t1930*t654);
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "j_4_func.hh"

namespace SymFunction
{

void j_4_func_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
