/*
 * Automatically Generated from Mathematica.
 * Sat 7 Dec 2019 21:22:18 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t134;
  double t112;
  double t116;
  double t115;
  double t142;
  double t126;
  double t148;
  double t161;
  double t167;
  double t178;
  double t180;
  double t208;
  double t204;
  double t201;
  double t202;
  double t211;
  double t212;
  double t218;
  double t222;
  double t230;
  double t262;
  double t264;
  double t250;
  double t165;
  double t292;
  double t305;
  double t310;
  double t321;
  double t324;
  double t329;
  double t275;
  double t331;
  double t335;
  double t336;
  double t339;
  double t340;
  double t341;
  double t252;
  double t257;
  double t372;
  double t385;
  double t386;
  double t390;
  double t395;
  double t396;
  double t397;
  double t436;
  double t435;
  double t433;
  double t434;
  double t439;
  double t440;
  double t443;
  double t444;
  double t445;
  double t454;
  double t457;
  double t447;
  double t429;
  double t466;
  double t486;
  double t488;
  double t489;
  double t492;
  double t493;
  double t494;
  double t448;
  double t452;
  double t510;
  double t511;
  double t512;
  double t515;
  double t516;
  double t517;
  double t428;
  double t542;
  double t541;
  double t537;
  double t540;
  double t543;
  double t544;
  double t547;
  double t548;
  double t549;
  double t564;
  double t566;
  double t551;
  double t534;
  double t483;
  double t572;
  double t578;
  double t579;
  double t580;
  double t582;
  double t583;
  double t584;
  double t557;
  double t558;
  double t509;
  double t602;
  double t603;
  double t604;
  double t606;
  double t607;
  double t608;
  double t643;
  double t645;
  double t647;
  double t648;
  double t649;
  double t642;
  double t650;
  double t654;
  double t656;
  double t657;
  double t658;
  double t635;
  double t682;
  double t683;
  double t684;
  double t679;
  double t685;
  double t690;
  double t695;
  double t696;
  double t697;
  double t725;
  double t726;
  double t727;
  double t724;
  double t728;
  double t729;
  double t731;
  double t732;
  double t733;
  double t632;
  double t762;
  double t763;
  double t764;
  double t765;
  double t766;
  double t761;
  double t767;
  double t768;
  double t770;
  double t772;
  double t774;
  double t674;
  double t757;
  double t795;
  double t796;
  double t797;
  double t794;
  double t800;
  double t801;
  double t808;
  double t809;
  double t812;
  double t709;
  double t833;
  double t834;
  double t835;
  double t832;
  double t837;
  double t839;
  double t842;
  double t843;
  double t845;
  double t754;
  double t867;
  double t868;
  double t872;
  double t873;
  double t866;
  double t874;
  double t875;
  double t878;
  double t879;
  double t880;
  double t789;
  double t860;
  double t905;
  double t906;
  double t908;
  double t901;
  double t909;
  double t910;
  double t912;
  double t913;
  double t914;
  double t825;
  double t939;
  double t940;
  double t945;
  double t938;
  double t946;
  double t947;
  double t950;
  double t951;
  double t952;
  double t972;
  double t974;
  double t975;
  double t983;
  double t984;
  double t985;
  double t981;
  double t987;
  double t988;
  double t990;
  double t991;
  double t992;
  double t1013;
  double t1014;
  double t1015;
  double t1020;
  double t1022;
  double t1023;
  double t1019;
  double t1024;
  double t1025;
  double t1028;
  double t1029;
  double t1030;
  double t971;
  double t1052;
  double t1053;
  double t1054;
  double t1051;
  double t1055;
  double t1059;
  double t1064;
  double t1065;
  double t1066;
  double t1009;
  double t1093;
  double t1094;
  double t1097;
  double t1091;
  double t1098;
  double t1099;
  double t1102;
  double t1103;
  double t1104;
  double t1046;
  double t1131;
  double t1137;
  double t1140;
  double t1130;
  double t1141;
  double t1142;
  double t1145;
  double t1146;
  double t1148;
  double t1081;
  double t1170;
  double t1171;
  double t1173;
  double t1169;
  double t1177;
  double t1178;
  double t1181;
  double t1182;
  double t1183;
  double t1203;
  double t1204;
  double t1205;
  double t1223;
  double t1227;
  double t1229;
  double t1237;
  double t1238;
  double t1239;
  double t1257;
  double t1258;
  double t1259;
  double t1286;
  double t1288;
  double t1287;
  double t1289;
  double t1290;
  double t1292;
  double t1294;
  double t1299;
  double t1231;
  double t1313;
  double t1315;
  double t1320;
  double t1314;
  double t1321;
  double t1322;
  double t1325;
  double t1326;
  double t1327;
  double t1266;
  double t1340;
  double t1341;
  double t1343;
  double t1344;
  double t1342;
  double t1345;
  double t1346;
  double t1348;
  double t1349;
  double t1351;
  double t1364;
  double t1366;
  double t1367;
  double t1369;
  double t1381;
  double t1382;
  double t1383;
  double t1385;
  double t1398;
  double t1399;
  double t1400;
  double t1402;
  double t1166;
  double t1417;
  double t1418;
  double t1438;
  double t1439;
  double t1440;
  double t1456;
  double t1457;
  double t1458;
  double t1480;
  double t1479;
  double t1481;
  double t1482;
  double t1484;
  double t1486;
  double t1488;
  double t1502;
  double t1503;
  double t1504;
  double t1501;
  double t1505;
  double t1506;
  double t1508;
  double t1509;
  double t1510;
  double t1524;
  double t1525;
  double t1526;
  double t1523;
  double t1527;
  double t1528;
  double t1530;
  double t1531;
  double t1532;
  double t1543;
  double t1544;
  double t1545;
  double t1547;
  double t1556;
  double t1557;
  double t1558;
  double t1560;
  double t1569;
  double t1570;
  double t1571;
  double t1573;
  double t1585;
  double t1586;
  double t1587;
  double t1603;
  double t1604;
  double t1605;
  double t1617;
  double t1618;
  double t1619;
  double t1636;
  double t1635;
  double t1637;
  double t1638;
  double t1640;
  double t1641;
  double t1642;
  double t1600;
  double t1654;
  double t1655;
  double t1653;
  double t1656;
  double t1657;
  double t1659;
  double t1660;
  double t1661;
  double t1622;
  double t1673;
  double t1674;
  double t1672;
  double t1675;
  double t1676;
  double t1678;
  double t1679;
  double t1680;
  double t1691;
  double t1692;
  double t1693;
  double t1695;
  double t1704;
  double t1705;
  double t1706;
  double t1708;
  double t1717;
  double t1718;
  double t1719;
  double t1721;
  t134 = Cos(var1[3]);
  t112 = Cos(var1[5]);
  t116 = Sin(var1[4]);
  t115 = Sin(var1[3]);
  t142 = Sin(var1[5]);
  t126 = -1.*t112*t115*t116;
  t148 = t134*t142;
  t161 = t126 + t148;
  t167 = t134*t112*t116;
  t178 = t115*t142;
  t180 = t167 + t178;
  t208 = Cos(var1[10]);
  t204 = Cos(var1[9]);
  t201 = Sin(var1[10]);
  t202 = t201*t161;
  t211 = t204*t208*t180;
  t212 = t202 + t211;
  t218 = t208*t161;
  t222 = -1.*t204*t201*t180;
  t230 = t218 + t222;
  t262 = Cos(var1[11]);
  t264 = 0. + t262;
  t250 = Sin(var1[11]);
  t165 = Sin(var1[9]);
  t292 = -1.*t112*t115;
  t305 = t134*t116*t142;
  t310 = t292 + t305;
  t321 = -1.*t134*t112;
  t324 = -1.*t115*t116*t142;
  t329 = t321 + t324;
  t275 = 0. + t250;
  t331 = -1.*t204*t201*t310;
  t335 = t208*t329;
  t336 = t331 + t335;
  t339 = t204*t208*t310;
  t340 = t201*t329;
  t341 = t339 + t340;
  t252 = -1.*t250;
  t257 = 0. + t252;
  t372 = Cos(var1[4]);
  t385 = -1.*t204*t134*t372*t201;
  t386 = -1.*t208*t372*t115;
  t390 = t385 + t386;
  t395 = t204*t208*t134*t372;
  t396 = -1.*t372*t201*t115;
  t397 = t395 + t396;
  t436 = Cos(var1[16]);
  t435 = Cos(var1[15]);
  t433 = Sin(var1[16]);
  t434 = t433*t161;
  t439 = t435*t436*t180;
  t440 = t434 + t439;
  t443 = t436*t161;
  t444 = -1.*t435*t433*t180;
  t445 = t443 + t444;
  t454 = Cos(var1[17]);
  t457 = 0. + t454;
  t447 = Sin(var1[17]);
  t429 = Sin(var1[15]);
  t466 = 0. + t447;
  t486 = -1.*t435*t433*t310;
  t488 = t436*t329;
  t489 = t486 + t488;
  t492 = t435*t436*t310;
  t493 = t433*t329;
  t494 = t492 + t493;
  t448 = -1.*t447;
  t452 = 0. + t448;
  t510 = -1.*t435*t134*t372*t433;
  t511 = -1.*t436*t372*t115;
  t512 = t510 + t511;
  t515 = t435*t436*t134*t372;
  t516 = -1.*t372*t433*t115;
  t517 = t515 + t516;
  t428 = -0.1944*t161;
  t542 = Cos(var1[13]);
  t541 = Cos(var1[12]);
  t537 = Sin(var1[13]);
  t540 = t537*t161;
  t543 = t541*t542*t180;
  t544 = t540 + t543;
  t547 = t542*t161;
  t548 = -1.*t541*t537*t180;
  t549 = t547 + t548;
  t564 = Cos(var1[14]);
  t566 = 0. + t564;
  t551 = Sin(var1[14]);
  t534 = Sin(var1[12]);
  t483 = -0.1944*t329;
  t572 = 0. + t551;
  t578 = -1.*t541*t537*t310;
  t579 = t542*t329;
  t580 = t578 + t579;
  t582 = t541*t542*t310;
  t583 = t537*t329;
  t584 = t582 + t583;
  t557 = -1.*t551;
  t558 = 0. + t557;
  t509 = 0.1944*t372*t115;
  t602 = -1.*t541*t134*t372*t537;
  t603 = -1.*t542*t372*t115;
  t604 = t602 + t603;
  t606 = t541*t542*t134*t372;
  t607 = -1.*t372*t537*t115;
  t608 = t606 + t607;
  t643 = t204*t372*t112*t115;
  t645 = -1.*t165;
  t647 = 0. + t645;
  t648 = -1.*t112*t647*t116;
  t649 = t643 + t648;
  t642 = t134*t372*t112*t201;
  t650 = t208*t649;
  t654 = t642 + t650;
  t656 = t208*t134*t372*t112;
  t657 = -1.*t201*t649;
  t658 = t656 + t657;
  t635 = 0. + t204;
  t682 = t204*t372*t115*t142;
  t683 = -1.*t647*t116*t142;
  t684 = t682 + t683;
  t679 = t134*t372*t201*t142;
  t685 = t208*t684;
  t690 = t679 + t685;
  t695 = t208*t134*t372*t142;
  t696 = -1.*t201*t684;
  t697 = t695 + t696;
  t725 = -1.*t372*t647;
  t726 = -1.*t204*t115*t116;
  t727 = t725 + t726;
  t724 = -1.*t134*t201*t116;
  t728 = t208*t727;
  t729 = t724 + t728;
  t731 = -1.*t208*t134*t116;
  t732 = -1.*t201*t727;
  t733 = t731 + t732;
  t632 = -0.0817*t112*t116;
  t762 = t435*t372*t112*t115;
  t763 = -1.*t429;
  t764 = 0. + t763;
  t765 = -1.*t112*t764*t116;
  t766 = t762 + t765;
  t761 = t134*t372*t112*t433;
  t767 = t436*t766;
  t768 = t761 + t767;
  t770 = t436*t134*t372*t112;
  t772 = -1.*t433*t766;
  t774 = t770 + t772;
  t674 = -0.0817*t116*t142;
  t757 = 0. + t435;
  t795 = t435*t372*t115*t142;
  t796 = -1.*t764*t116*t142;
  t797 = t795 + t796;
  t794 = t134*t372*t433*t142;
  t800 = t436*t797;
  t801 = t794 + t800;
  t808 = t436*t134*t372*t142;
  t809 = -1.*t433*t797;
  t812 = t808 + t809;
  t709 = -0.0817*t372;
  t833 = -1.*t372*t764;
  t834 = -1.*t435*t115*t116;
  t835 = t833 + t834;
  t832 = -1.*t134*t433*t116;
  t837 = t436*t835;
  t839 = t832 + t837;
  t842 = -1.*t436*t134*t116;
  t843 = -1.*t433*t835;
  t845 = t842 + t843;
  t754 = -0.1944*t134*t372*t112;
  t867 = t541*t372*t112*t115;
  t868 = 0. + t534;
  t872 = -1.*t112*t868*t116;
  t873 = t867 + t872;
  t866 = t134*t372*t112*t537;
  t874 = t542*t873;
  t875 = t866 + t874;
  t878 = t542*t134*t372*t112;
  t879 = -1.*t537*t873;
  t880 = t878 + t879;
  t789 = -0.1944*t134*t372*t142;
  t860 = 0. + t541;
  t905 = t541*t372*t115*t142;
  t906 = -1.*t868*t116*t142;
  t908 = t905 + t906;
  t901 = t134*t372*t537*t142;
  t909 = t542*t908;
  t910 = t901 + t909;
  t912 = t542*t134*t372*t142;
  t913 = -1.*t537*t908;
  t914 = t912 + t913;
  t825 = 0.1944*t134*t116;
  t939 = -1.*t372*t868;
  t940 = -1.*t541*t115*t116;
  t945 = t939 + t940;
  t938 = -1.*t134*t537*t116;
  t946 = t542*t945;
  t947 = t938 + t946;
  t950 = -1.*t542*t134*t116;
  t951 = -1.*t537*t945;
  t952 = t950 + t951;
  t972 = t112*t115;
  t974 = -1.*t134*t116*t142;
  t975 = t972 + t974;
  t983 = -1.*t372*t647*t142;
  t984 = t204*t329;
  t985 = t983 + t984;
  t981 = t201*t975;
  t987 = t208*t985;
  t988 = t981 + t987;
  t990 = t208*t975;
  t991 = -1.*t201*t985;
  t992 = t990 + t991;
  t1013 = t112*t115*t116;
  t1014 = -1.*t134*t142;
  t1015 = t1013 + t1014;
  t1020 = t372*t112*t647;
  t1022 = t204*t1015;
  t1023 = t1020 + t1022;
  t1019 = t201*t180;
  t1024 = t208*t1023;
  t1025 = t1019 + t1024;
  t1028 = t208*t180;
  t1029 = -1.*t201*t1023;
  t1030 = t1028 + t1029;
  t971 = -0.0817*t372*t142;
  t1052 = -1.*t372*t764*t142;
  t1053 = t435*t329;
  t1054 = t1052 + t1053;
  t1051 = t433*t975;
  t1055 = t436*t1054;
  t1059 = t1051 + t1055;
  t1064 = t436*t975;
  t1065 = -1.*t433*t1054;
  t1066 = t1064 + t1065;
  t1009 = 0.0817*t372*t112;
  t1093 = t372*t112*t764;
  t1094 = t435*t1015;
  t1097 = t1093 + t1094;
  t1091 = t433*t180;
  t1098 = t436*t1097;
  t1099 = t1091 + t1098;
  t1102 = t436*t180;
  t1103 = -1.*t433*t1097;
  t1104 = t1102 + t1103;
  t1046 = -0.1944*t975;
  t1131 = -1.*t372*t868*t142;
  t1137 = t541*t329;
  t1140 = t1131 + t1137;
  t1130 = t537*t975;
  t1141 = t542*t1140;
  t1142 = t1130 + t1141;
  t1145 = t542*t975;
  t1146 = -1.*t537*t1140;
  t1148 = t1145 + t1146;
  t1081 = -0.1944*t180;
  t1170 = t372*t112*t868;
  t1171 = t541*t1015;
  t1173 = t1170 + t1171;
  t1169 = t537*t180;
  t1177 = t542*t1173;
  t1178 = t1169 + t1177;
  t1181 = t542*t180;
  t1182 = -1.*t537*t1173;
  t1183 = t1181 + t1182;
  t1203 = -1.*t204*t372*t112;
  t1204 = -1.*t165*t1015;
  t1205 = t1203 + t1204;
  t1223 = t134*t112;
  t1227 = t115*t116*t142;
  t1229 = t1223 + t1227;
  t1237 = -1.*t204*t372*t142;
  t1238 = -1.*t165*t1229;
  t1239 = t1237 + t1238;
  t1257 = -1.*t372*t165*t115;
  t1258 = t204*t116;
  t1259 = t1257 + t1258;
  t1286 = 0. + t167 + t178;
  t1288 = 0. + t1020 + t1022;
  t1287 = -1.*t201*t1286;
  t1289 = -1.*t208*t1288;
  t1290 = t1287 + t1289;
  t1292 = t208*t1286;
  t1294 = -1.*t201*t1288;
  t1299 = t1292 + t1294;
  t1231 = t204*t1229;
  t1313 = 0. + t292 + t305;
  t1315 = t372*t647*t142;
  t1320 = 0. + t1315 + t1231;
  t1314 = -1.*t201*t1313;
  t1321 = -1.*t208*t1320;
  t1322 = t1314 + t1321;
  t1325 = t208*t1313;
  t1326 = -1.*t201*t1320;
  t1327 = t1325 + t1326;
  t1266 = t204*t372*t115;
  t1340 = t134*t372;
  t1341 = 0. + t1340;
  t1343 = -1.*t647*t116;
  t1344 = 0. + t1266 + t1343;
  t1342 = -1.*t1341*t201;
  t1345 = -1.*t208*t1344;
  t1346 = t1342 + t1345;
  t1348 = t208*t1341;
  t1349 = -1.*t201*t1344;
  t1351 = t1348 + t1349;
  t1364 = t201*t1286;
  t1366 = t208*t1288;
  t1367 = 0. + t1364 + t1366;
  t1369 = 0. + t1292 + t1294;
  t1381 = t201*t1313;
  t1382 = t208*t1320;
  t1383 = 0. + t1381 + t1382;
  t1385 = 0. + t1325 + t1326;
  t1398 = t1341*t201;
  t1399 = t208*t1344;
  t1400 = 0. + t1398 + t1399;
  t1402 = 0. + t1348 + t1349;
  t1166 = -1.*t534*t1015;
  t1417 = t541*t372*t112;
  t1418 = t1417 + t1166;
  t1438 = t541*t372*t142;
  t1439 = -1.*t534*t1229;
  t1440 = t1438 + t1439;
  t1456 = -1.*t372*t534*t115;
  t1457 = -1.*t541*t116;
  t1458 = t1456 + t1457;
  t1480 = 0. + t1170 + t1171;
  t1479 = -1.*t537*t1286;
  t1481 = -1.*t542*t1480;
  t1482 = t1479 + t1481;
  t1484 = t542*t1286;
  t1486 = -1.*t537*t1480;
  t1488 = t1484 + t1486;
  t1502 = t372*t868*t142;
  t1503 = t541*t1229;
  t1504 = 0. + t1502 + t1503;
  t1501 = -1.*t537*t1313;
  t1505 = -1.*t542*t1504;
  t1506 = t1501 + t1505;
  t1508 = t542*t1313;
  t1509 = -1.*t537*t1504;
  t1510 = t1508 + t1509;
  t1524 = t541*t372*t115;
  t1525 = -1.*t868*t116;
  t1526 = 0. + t1524 + t1525;
  t1523 = -1.*t1341*t537;
  t1527 = -1.*t542*t1526;
  t1528 = t1523 + t1527;
  t1530 = t542*t1341;
  t1531 = -1.*t537*t1526;
  t1532 = t1530 + t1531;
  t1543 = t537*t1286;
  t1544 = t542*t1480;
  t1545 = 0. + t1543 + t1544;
  t1547 = 0. + t1484 + t1486;
  t1556 = t537*t1313;
  t1557 = t542*t1504;
  t1558 = 0. + t1556 + t1557;
  t1560 = 0. + t1508 + t1509;
  t1569 = t1341*t537;
  t1570 = t542*t1526;
  t1571 = 0. + t1569 + t1570;
  t1573 = 0. + t1530 + t1531;
  t1585 = -1.*t435*t372*t112;
  t1586 = -1.*t429*t1015;
  t1587 = t1585 + t1586;
  t1603 = -1.*t435*t372*t142;
  t1604 = -1.*t429*t1229;
  t1605 = t1603 + t1604;
  t1617 = -1.*t372*t429*t115;
  t1618 = t435*t116;
  t1619 = t1617 + t1618;
  t1636 = 0. + t1093 + t1094;
  t1635 = -1.*t433*t1286;
  t1637 = -1.*t436*t1636;
  t1638 = t1635 + t1637;
  t1640 = t436*t1286;
  t1641 = -1.*t433*t1636;
  t1642 = t1640 + t1641;
  t1600 = t435*t1229;
  t1654 = t372*t764*t142;
  t1655 = 0. + t1654 + t1600;
  t1653 = -1.*t433*t1313;
  t1656 = -1.*t436*t1655;
  t1657 = t1653 + t1656;
  t1659 = t436*t1313;
  t1660 = -1.*t433*t1655;
  t1661 = t1659 + t1660;
  t1622 = t435*t372*t115;
  t1673 = -1.*t764*t116;
  t1674 = 0. + t1622 + t1673;
  t1672 = -1.*t1341*t433;
  t1675 = -1.*t436*t1674;
  t1676 = t1672 + t1675;
  t1678 = t436*t1341;
  t1679 = -1.*t433*t1674;
  t1680 = t1678 + t1679;
  t1691 = t433*t1286;
  t1692 = t436*t1636;
  t1693 = 0. + t1691 + t1692;
  t1695 = 0. + t1640 + t1641;
  t1704 = t433*t1313;
  t1705 = t436*t1655;
  t1706 = 0. + t1704 + t1705;
  t1708 = 0. + t1659 + t1660;
  t1717 = t1341*t433;
  t1718 = t436*t1674;
  t1719 = 0. + t1717 + t1718;
  t1721 = 0. + t1678 + t1679;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=1.;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=1.;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=1.;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=1.;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=1.;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=1.;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=1.;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=1.;
  p_output1[27]=0.2429*t161 + 0.035199999999999995*t165*t180 - 0.2083*t212 - 0.1422*t230 - 0.02*(t212*t257 + t230*t264) - 0.16*(t212*t264 + t230*t275);
  p_output1[28]=0.035199999999999995*t165*t310 + 0.2429*t329 - 0.1422*t336 - 0.2083*t341 - 0.02*(t264*t336 + t257*t341) - 0.16*(t275*t336 + t264*t341);
  p_output1[29]=-0.2429*t115*t372 + 0.035199999999999995*t134*t165*t372 - 0.1422*t390 - 0.2083*t397 - 0.02*(t264*t390 + t257*t397) - 0.16*(t275*t390 + t264*t397);
  p_output1[30]=t428 + 0.035199999999999995*t180*t429 - 0.2083*t440 - 0.1422*t445 - 0.02*(t440*t452 + t445*t457) - 0.16*(t440*t457 + t445*t466);
  p_output1[31]=0.035199999999999995*t310*t429 + t483 - 0.1422*t489 - 0.2083*t494 - 0.02*(t457*t489 + t452*t494) - 0.16*(t466*t489 + t457*t494);
  p_output1[32]=0.035199999999999995*t134*t372*t429 + t509 - 0.1422*t512 - 0.2083*t517 - 0.02*(t457*t512 + t452*t517) - 0.16*(t466*t512 + t457*t517);
  p_output1[33]=t428 + 0.0329*t180*t534 - 0.2083*t544 - 0.1422*t549 - 0.02*(t544*t558 + t549*t566) - 0.16*(t544*t566 + t549*t572);
  p_output1[34]=t483 + 0.0329*t310*t534 - 0.1422*t580 - 0.2083*t584 - 0.02*(t566*t580 + t558*t584) - 0.16*(t572*t580 + t566*t584);
  p_output1[35]=t509 + 0.0329*t134*t372*t534 - 0.1422*t604 - 0.2083*t608 - 0.02*(t566*t604 + t558*t608) - 0.16*(t572*t604 + t566*t608);
  p_output1[36]=0.2429*t112*t134*t372 + t632 + 0.035199999999999995*(t112*t115*t165*t372 - 1.*t112*t116*t635) - 0.2083*t654 - 0.1422*t658 - 0.02*(t257*t654 + t264*t658) - 0.16*(t264*t654 + t275*t658);
  p_output1[37]=0.2429*t134*t142*t372 + 0.035199999999999995*(t115*t142*t165*t372 - 1.*t116*t142*t635) + t674 - 0.2083*t690 - 0.1422*t697 - 0.02*(t257*t690 + t264*t697) - 0.16*(t264*t690 + t275*t697);
  p_output1[38]=-0.2429*t116*t134 + 0.035199999999999995*(-1.*t115*t116*t165 - 1.*t372*t635) + t709 - 0.2083*t729 - 0.1422*t733 - 0.02*(t257*t729 + t264*t733) - 0.16*(t264*t729 + t275*t733);
  p_output1[39]=t632 + t754 + 0.035199999999999995*(t112*t115*t372*t429 - 1.*t112*t116*t757) - 0.2083*t768 - 0.1422*t774 - 0.02*(t452*t768 + t457*t774) - 0.16*(t457*t768 + t466*t774);
  p_output1[40]=t674 + 0.035199999999999995*(t115*t142*t372*t429 - 1.*t116*t142*t757) + t789 - 0.2083*t801 - 0.1422*t812 - 0.02*(t452*t801 + t457*t812) - 0.16*(t457*t801 + t466*t812);
  p_output1[41]=t709 + 0.035199999999999995*(-1.*t115*t116*t429 - 1.*t372*t757) + t825 - 0.2083*t839 - 0.1422*t845 - 0.02*(t452*t839 + t457*t845) - 0.16*(t457*t839 + t466*t845);
  p_output1[42]=0.0817*t112*t116 + t754 - 0.0329*(-1.*t112*t115*t372*t534 - 1.*t112*t116*t860) - 0.2083*t875 - 0.1422*t880 - 0.02*(t558*t875 + t566*t880) - 0.16*(t566*t875 + t572*t880);
  p_output1[43]=0.0817*t116*t142 + t789 - 0.0329*(-1.*t115*t142*t372*t534 - 1.*t116*t142*t860) - 0.2083*t910 - 0.1422*t914 - 0.02*(t558*t910 + t566*t914) - 0.16*(t566*t910 + t572*t914);
  p_output1[44]=0.0817*t372 + t825 - 0.0329*(t115*t116*t534 - 1.*t372*t860) - 0.2083*t947 - 0.1422*t952 - 0.02*(t558*t947 + t566*t952) - 0.16*(t566*t947 + t572*t952);
  p_output1[45]=0.035199999999999995*(t165*t329 - 1.*t142*t372*t635) + t971 + 0.2429*t975 - 0.2083*t988 - 0.1422*t992 - 0.02*(t257*t988 + t264*t992) - 0.16*(t264*t988 + t275*t992);
  p_output1[46]=t1009 - 0.2083*t1025 - 0.1422*t1030 + 0.2429*t180 - 0.02*(t1025*t257 + t1030*t264) - 0.16*(t1025*t264 + t1030*t275) + 0.035199999999999995*(t1015*t165 + t112*t372*t635);
  p_output1[47]=0;
  p_output1[48]=t1046 - 0.2083*t1059 - 0.1422*t1066 - 0.02*(t1059*t452 + t1066*t457) - 0.16*(t1059*t457 + t1066*t466) + 0.035199999999999995*(t329*t429 - 1.*t142*t372*t757) + t971;
  p_output1[49]=t1009 + t1081 - 0.2083*t1099 - 0.1422*t1104 - 0.02*(t1099*t452 + t1104*t457) - 0.16*(t1099*t457 + t1104*t466) + 0.035199999999999995*(t1015*t429 + t112*t372*t757);
  p_output1[50]=0;
  p_output1[51]=t1046 - 0.2083*t1142 - 0.1422*t1148 + 0.0817*t142*t372 - 0.02*(t1142*t558 + t1148*t566) - 0.16*(t1142*t566 + t1148*t572) - 0.0329*(-1.*t329*t534 - 1.*t142*t372*t860);
  p_output1[52]=t1081 - 0.2083*t1178 - 0.1422*t1183 - 0.0817*t112*t372 - 0.02*(t1178*t558 + t1183*t566) - 0.16*(t1178*t566 + t1183*t572) - 0.0329*(t1166 + t112*t372*t860);
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0.1422*t1205*t201 - 0.2083*t1205*t208 - 0.02*(t1205*t208*t257 - 1.*t1205*t201*t264) - 0.16*(t1205*t208*t264 - 1.*t1205*t201*t275) + 0.035199999999999995*(t1022 - 1.*t112*t165*t372);
  p_output1[82]=0.1422*t1239*t201 - 0.2083*t1239*t208 - 0.02*(t1239*t208*t257 - 1.*t1239*t201*t264) - 0.16*(t1239*t208*t264 - 1.*t1239*t201*t275) + 0.035199999999999995*(t1231 - 1.*t142*t165*t372);
  p_output1[83]=0.035199999999999995*(t1266 + t116*t165) + 0.1422*t1259*t201 - 0.2083*t1259*t208 - 0.02*(t1259*t208*t257 - 1.*t1259*t201*t264) - 0.16*(t1259*t208*t264 - 1.*t1259*t201*t275);
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=-0.1422*t1290 - 0.2083*t1299 - 0.02*(t1299*t257 + t1290*t264) - 0.16*(t1299*t264 + t1290*t275);
  p_output1[91]=-0.1422*t1322 - 0.2083*t1327 - 0.02*(t1327*t257 + t1322*t264) - 0.16*(t1327*t264 + t1322*t275);
  p_output1[92]=-0.1422*t1346 - 0.2083*t1351 - 0.02*(t1351*t257 + t1346*t264) - 0.16*(t1351*t264 + t1346*t275);
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=-0.02*(-1.*t1369*t250 - 1.*t1367*t262) - 0.16*(-1.*t1367*t250 + t1369*t262);
  p_output1[100]=-0.02*(-1.*t1385*t250 - 1.*t1383*t262) - 0.16*(-1.*t1383*t250 + t1385*t262);
  p_output1[101]=-0.02*(-1.*t1402*t250 - 1.*t1400*t262) - 0.16*(-1.*t1400*t250 + t1402*t262);
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0.1422*t1418*t537 - 0.0329*(-1.*t112*t372*t534 - 1.*t1015*t541) - 0.2083*t1418*t542 - 0.02*(t1418*t542*t558 - 1.*t1418*t537*t566) - 0.16*(t1418*t542*t566 - 1.*t1418*t537*t572);
  p_output1[115]=0.1422*t1440*t537 - 0.0329*(-1.*t142*t372*t534 - 1.*t1229*t541) - 0.2083*t1440*t542 - 0.02*(t1440*t542*t558 - 1.*t1440*t537*t566) - 0.16*(t1440*t542*t566 - 1.*t1440*t537*t572);
  p_output1[116]=0.1422*t1458*t537 - 0.0329*(t116*t534 - 1.*t115*t372*t541) - 0.2083*t1458*t542 - 0.02*(t1458*t542*t558 - 1.*t1458*t537*t566) - 0.16*(t1458*t542*t566 - 1.*t1458*t537*t572);
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=-0.1422*t1482 - 0.2083*t1488 - 0.02*(t1488*t558 + t1482*t566) - 0.16*(t1488*t566 + t1482*t572);
  p_output1[124]=-0.1422*t1506 - 0.2083*t1510 - 0.02*(t1510*t558 + t1506*t566) - 0.16*(t1510*t566 + t1506*t572);
  p_output1[125]=-0.1422*t1528 - 0.2083*t1532 - 0.02*(t1532*t558 + t1528*t566) - 0.16*(t1532*t566 + t1528*t572);
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=-0.02*(-1.*t1547*t551 - 1.*t1545*t564) - 0.16*(-1.*t1545*t551 + t1547*t564);
  p_output1[133]=-0.02*(-1.*t1560*t551 - 1.*t1558*t564) - 0.16*(-1.*t1558*t551 + t1560*t564);
  p_output1[134]=-0.02*(-1.*t1573*t551 - 1.*t1571*t564) - 0.16*(-1.*t1571*t551 + t1573*t564);
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0.035199999999999995*(t1094 - 1.*t112*t372*t429) + 0.1422*t1587*t433 - 0.2083*t1587*t436 - 0.02*(t1587*t436*t452 - 1.*t1587*t433*t457) - 0.16*(t1587*t436*t457 - 1.*t1587*t433*t466);
  p_output1[139]=0.035199999999999995*(t1600 - 1.*t142*t372*t429) + 0.1422*t1605*t433 - 0.2083*t1605*t436 - 0.02*(t1605*t436*t452 - 1.*t1605*t433*t457) - 0.16*(t1605*t436*t457 - 1.*t1605*t433*t466);
  p_output1[140]=0.035199999999999995*(t1622 + t116*t429) + 0.1422*t1619*t433 - 0.2083*t1619*t436 - 0.02*(t1619*t436*t452 - 1.*t1619*t433*t457) - 0.16*(t1619*t436*t457 - 1.*t1619*t433*t466);
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=-0.1422*t1638 - 0.2083*t1642 - 0.02*(t1642*t452 + t1638*t457) - 0.16*(t1642*t457 + t1638*t466);
  p_output1[148]=-0.1422*t1657 - 0.2083*t1661 - 0.02*(t1661*t452 + t1657*t457) - 0.16*(t1661*t457 + t1657*t466);
  p_output1[149]=-0.1422*t1676 - 0.2083*t1680 - 0.02*(t1680*t452 + t1676*t457) - 0.16*(t1680*t457 + t1676*t466);
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=-0.02*(-1.*t1695*t447 - 1.*t1693*t454) - 0.16*(-1.*t1693*t447 + t1695*t454);
  p_output1[157]=-0.02*(-1.*t1708*t447 - 1.*t1706*t454) - 0.16*(-1.*t1706*t447 + t1708*t454);
  p_output1[158]=-0.02*(-1.*t1721*t447 - 1.*t1719*t454) - 0.16*(-1.*t1719*t447 + t1721*t454);
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "j_3_func.hh"

namespace SymFunction
{

void j_3_func_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
