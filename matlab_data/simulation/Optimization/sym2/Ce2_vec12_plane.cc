/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:52:50 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t218;
  double t590;
  double t43;
  double t669;
  double t1350;
  double t1425;
  double t1573;
  double t861;
  double t892;
  double t1215;
  double t1333;
  double t1884;
  double t2608;
  double t3023;
  double t3077;
  double t1951;
  double t3828;
  double t3857;
  double t3920;
  double t3932;
  double t3933;
  double t3940;
  double t4045;
  double t4157;
  double t4197;
  double t4361;
  double t268;
  double t801;
  double t857;
  double t4759;
  double t4762;
  double t4764;
  double t4769;
  double t4756;
  double t4774;
  double t4776;
  double t5324;
  double t5345;
  double t5410;
  double t5853;
  double t5881;
  double t5882;
  double t3758;
  double t3819;
  double t3820;
  double t4015;
  double t4454;
  double t4619;
  double t4649;
  double t4680;
  double t4712;
  double t7637;
  double t7666;
  double t7787;
  double t7967;
  double t8084;
  double t8994;
  double t9228;
  double t9503;
  double t8977;
  double t9635;
  double t7667;
  double t8229;
  double t8521;
  double t865;
  double t1684;
  double t2036;
  double t2113;
  double t2124;
  double t2251;
  double t10833;
  double t10848;
  double t10913;
  double t10641;
  double t10657;
  double t10824;
  double t2422;
  double t3113;
  double t3249;
  double t3274;
  double t3409;
  double t3457;
  double t10970;
  double t10971;
  double t11000;
  double t11004;
  double t11006;
  double t11010;
  double t11189;
  double t11192;
  double t11194;
  double t4753;
  double t6442;
  double t8612;
  double t8701;
  double t9858;
  double t9872;
  double t10137;
  double t10218;
  double t10390;
  double t11515;
  double t11522;
  double t11523;
  double t11524;
  double t11529;
  double t11534;
  double t11538;
  double t11554;
  double t11563;
  double t11568;
  double t11571;
  double t11709;
  double t11710;
  double t11717;
  double t11575;
  double t11596;
  double t11598;
  double t11602;
  double t11607;
  double t11609;
  double t11647;
  double t11648;
  double t11649;
  double t11653;
  double t11655;
  double t11659;
  double t11762;
  double t11765;
  double t11768;
  double t11756;
  double t11759;
  double t11760;
  double t11769;
  double t11770;
  double t11772;
  double t11796;
  double t11797;
  double t11801;
  double t11834;
  double t11842;
  double t11843;
  double t11847;
  double t11848;
  double t11855;
  double t11761;
  double t11774;
  double t11775;
  double t11861;
  double t11862;
  double t11781;
  double t11786;
  double t11947;
  double t11951;
  double t11953;
  double t11957;
  double t11961;
  double t11962;
  double t11816;
  double t11974;
  double t11978;
  double t11979;
  double t11856;
  double t11864;
  double t11992;
  double t11998;
  double t11999;
  double t12002;
  double t12004;
  double t12007;
  double t11954;
  double t11963;
  double t11964;
  double t11876;
  double t11892;
  double t11898;
  double t12016;
  double t12020;
  double t11916;
  double t11925;
  double t11967;
  double t11968;
  double t11930;
  double t11933;
  double t11733;
  double t11736;
  double t11747;
  double t4857;
  double t5886;
  double t5971;
  double t6035;
  double t6252;
  double t6383;
  double t6981;
  double t7204;
  double t7294;
  double t7401;
  double t9505;
  double t9754;
  double t9807;
  double t9857;
  double t9862;
  double t9868;
  double t9873;
  double t9875;
  double t9890;
  double t9998;
  double t10048;
  double t11725;
  double t11728;
  double t11729;
  double t11050;
  double t11071;
  double t11073;
  double t11075;
  double t11105;
  double t11124;
  double t11146;
  double t11176;
  double t11186;
  double t11187;
  double t11190;
  double t11195;
  double t11197;
  double t11239;
  double t11264;
  double t11314;
  double t11319;
  double t11350;
  double t11351;
  double t11354;
  double t11358;
  double t11395;
  double t11397;
  double t11398;
  double t11399;
  double t11402;
  double t11404;
  double t11410;
  double t11412;
  double t12115;
  double t12116;
  double t12117;
  double t11415;
  double t11417;
  double t11420;
  double t11455;
  double t11461;
  double t11492;
  double t11719;
  double t11724;
  double t11731;
  double t11749;
  double t11751;
  double t11601;
  double t11616;
  double t11624;
  double t11651;
  double t11669;
  double t11688;
  double t11779;
  double t11787;
  double t11788;
  double t11790;
  double t11833;
  double t11844;
  double t11857;
  double t11858;
  double t11860;
  double t11863;
  double t11865;
  double t11871;
  double t11872;
  double t11802;
  double t11812;
  double t11814;
  double t11817;
  double t11823;
  double t11831;
  double t11874;
  double t11875;
  double t11878;
  double t11885;
  double t11886;
  double t11888;
  double t11891;
  double t11894;
  double t11900;
  double t11901;
  double t11903;
  double t11912;
  double t11913;
  double t11914;
  double t11918;
  double t11923;
  double t11924;
  double t11926;
  double t11927;
  double t11928;
  double t11931;
  double t11934;
  double t11937;
  double t11938;
  double t11966;
  double t11969;
  double t11970;
  double t11972;
  double t11982;
  double t11983;
  double t11984;
  double t11985;
  double t11987;
  double t11988;
  double t11991;
  double t12001;
  double t12008;
  double t12009;
  double t12013;
  double t12021;
  double t12022;
  double t12023;
  double t12025;
  double t12033;
  double t12036;
  double t12039;
  double t12040;
  double t12041;
  double t12043;
  double t12044;
  double t12047;
  double t12048;
  double t12052;
  double t12053;
  double t12055;
  double t12057;
  double t12061;
  double t12063;
  double t12064;
  double t12066;
  double t12069;
  double t12070;
  double t12072;
  double t12074;
  double t12081;
  double t12085;
  double t12088;
  double t12089;
  double t12090;
  double t12091;
  double t12093;
  double t12094;
  double t12096;
  double t12257;
  double t12259;
  double t12260;
  double t11572;
  double t11574;
  double t11643;
  double t11691;
  double t11697;
  double t12177;
  double t12178;
  double t12179;
  double t12180;
  double t12182;
  double t12409;
  double t12416;
  double t12417;
  double t11973;
  double t11990;
  double t12035;
  double t12059;
  double t12101;
  double t12102;
  double t12354;
  double t12356;
  double t12360;
  double t12364;
  double t12365;
  double t12367;
  double t12214;
  double t12215;
  double t12217;
  double t12219;
  double t12220;
  double t12223;
  double t12572;
  double t12573;
  double t12579;
  double t12458;
  double t12459;
  double t12475;
  double t12525;
  double t12531;
  double t12536;
  double t11794;
  double t11832;
  double t11873;
  double t11908;
  double t11944;
  double t11945;
  double t12336;
  double t12338;
  double t12341;
  double t12348;
  double t12349;
  double t12351;
  double t12197;
  double t12198;
  double t12201;
  double t12202;
  double t12206;
  double t12211;
  double t12561;
  double t12563;
  double t12567;
  double t12569;
  double t12570;
  double t12580;
  double t12584;
  double t10636;
  double t10826;
  double t10946;
  double t11022;
  double t11027;
  double t11029;
  double t12265;
  double t12266;
  double t12269;
  double t12276;
  double t12277;
  double t12280;
  double t12123;
  double t12126;
  double t12127;
  double t12134;
  double t12139;
  double t12141;
  double t12624;
  double t12627;
  double t12628;
  double t12630;
  double t12635;
  double t12638;
  double t12639;
  double t12407;
  double t12418;
  double t12420;
  double t12428;
  double t12431;
  double t12480;
  double t12486;
  double t12736;
  double t12737;
  double t12739;
  double t12741;
  double t12742;
  double t12743;
  double t11413;
  double t11414;
  double t11424;
  double t11435;
  double t11494;
  double t11495;
  double t12297;
  double t12298;
  double t12301;
  double t12302;
  double t12304;
  double t12309;
  double t12160;
  double t12163;
  double t12165;
  double t12167;
  double t12168;
  double t12170;
  double t12641;
  double t12643;
  double t12644;
  double t12645;
  double t12646;
  double t12648;
  double t12653;
  double t12489;
  double t12518;
  double t12519;
  double t12523;
  double t12524;
  double t12537;
  double t12541;
  double t12704;
  double t12705;
  double t12707;
  double t12708;
  double t12712;
  double t12762;
  double t12764;
  double t12765;
  double t12766;
  double t12767;
  double t11085;
  double t11188;
  double t11216;
  double t11240;
  double t11241;
  double t12283;
  double t12285;
  double t12286;
  double t12287;
  double t12292;
  double t12149;
  double t12150;
  double t12153;
  double t12154;
  double t12157;
  double t12615;
  double t12616;
  double t12618;
  double t12619;
  double t12620;
  double t12380;
  double t12381;
  double t12385;
  double t12389;
  double t12396;
  double t12689;
  double t12692;
  double t12693;
  double t12787;
  double t12790;
  double t12791;
  double t12758;
  double t12759;
  double t12760;
  double t2314;
  double t3464;
  double t3467;
  double t12237;
  double t12243;
  double t12244;
  double t12110;
  double t12111;
  double t12112;
  double t12603;
  double t12605;
  double t12608;
  double t12374;
  double t12375;
  double t12376;
  t218 = Cos(var1[11]);
  t590 = Sin(var1[10]);
  t43 = Cos(var1[10]);
  t669 = Sin(var1[11]);
  t1350 = -1.*t218*t590;
  t1425 = -1.*t43*t669;
  t1573 = t1350 + t1425;
  t861 = Sin(var1[4]);
  t892 = Cos(var1[4]);
  t1215 = Cos(var1[5]);
  t1333 = Sin(var1[9]);
  t1884 = Cos(var1[9]);
  t2608 = -1.*t43*t218;
  t3023 = t590*t669;
  t3077 = t2608 + t3023;
  t1951 = Sin(var1[5]);
  t3828 = -1.*t218;
  t3857 = 1. + t3828;
  t3920 = 0.100689*t3857;
  t3932 = 0.080689*t218;
  t3933 = -0.16*t669;
  t3940 = t3920 + t3932 + t3933;
  t4045 = -0.20833*t3857;
  t4157 = -0.36833*t218;
  t4197 = 0.02*t669;
  t4361 = t4045 + t4157 + t4197;
  t268 = t43*t218;
  t801 = -1.*t590*t669;
  t857 = t268 + t801;
  t4759 = 0.242889*t590;
  t4762 = -1.*t590*t3940;
  t4764 = t43*t4361;
  t4769 = t4759 + t4762 + t4764;
  t4756 = 0.035165*t1333;
  t4774 = t1884*t4769;
  t4776 = t4756 + t4774;
  t5324 = -1.*t1884;
  t5345 = 1. + t5324;
  t5410 = 0.081715*t5345;
  t5853 = 0.11688*t1884;
  t5881 = -1.*t1333*t4769;
  t5882 = t5410 + t5853 + t5881;
  t3758 = -1.*t43;
  t3819 = 1. + t3758;
  t3820 = 0.242889*t3819;
  t4015 = t43*t3940;
  t4454 = t590*t4361;
  t4619 = t3820 + t4015 + t4454;
  t4649 = t218*t590;
  t4680 = t43*t669;
  t4712 = t4649 + t4680;
  t7637 = -0.16*t218;
  t7666 = t7637 + t4197;
  t7787 = 0.02*t218;
  t7967 = 0.16*t669;
  t8084 = t7787 + t7967;
  t8994 = -1.*t590*t7666;
  t9228 = t43*t8084;
  t9503 = t8994 + t9228;
  t8977 = Power(t1884,2);
  t9635 = Power(t1333,2);
  t7667 = t43*t7666;
  t8229 = t590*t8084;
  t8521 = t7667 + t8229;
  t865 = t857*t861;
  t1684 = -1.*t1215*t1333*t1573;
  t2036 = -1.*t1884*t1573*t1951;
  t2113 = t1684 + t2036;
  t2124 = t892*t2113;
  t2251 = t865 + t2124;
  t10833 = t1333*t4776;
  t10848 = t1884*t5882;
  t10913 = t10833 + t10848;
  t10641 = -1.*t1333*t4776;
  t10657 = -1.*t1884*t5882;
  t10824 = t10641 + t10657;
  t2422 = t1573*t861;
  t3113 = -1.*t1215*t1333*t3077;
  t3249 = -1.*t1884*t3077*t1951;
  t3274 = t3113 + t3249;
  t3409 = t892*t3274;
  t3457 = t2422 + t3409;
  t10970 = t4712*t861;
  t10971 = -1.*t1215*t1333*t857;
  t11000 = -1.*t1884*t857*t1951;
  t11004 = t10971 + t11000;
  t11006 = t892*t11004;
  t11010 = t10970 + t11006;
  t11189 = t218*t4361;
  t11192 = -0.242889*t669;
  t11194 = t3940*t669;
  t4753 = -1.*t4619*t4712;
  t6442 = t4619*t857;
  t8612 = -1.*t8521*t4712;
  t8701 = -1.*t4619*t857;
  t9858 = t4619*t1573;
  t9872 = t8521*t857;
  t10137 = t1884*t1215;
  t10218 = -1.*t1333*t1951;
  t10390 = t10137 + t10218;
  t11515 = Sin(var1[3]);
  t11522 = t1884*t1215*t1573;
  t11523 = -1.*t1333*t1573*t1951;
  t11524 = t11522 + t11523;
  t11529 = t11515*t11524;
  t11534 = Cos(var1[3]);
  t11538 = t892*t857;
  t11554 = -1.*t861*t2113;
  t11563 = t11538 + t11554;
  t11568 = t11534*t11563;
  t11571 = t11529 + t11568;
  t11709 = t11534*t11524;
  t11710 = -1.*t11515*t11563;
  t11717 = t11709 + t11710;
  t11575 = t1884*t1215*t857;
  t11596 = -1.*t1333*t857*t1951;
  t11598 = t11575 + t11596;
  t11602 = t892*t4712;
  t11607 = -1.*t861*t11004;
  t11609 = t11602 + t11607;
  t11647 = t1884*t1215*t3077;
  t11648 = -1.*t1333*t3077*t1951;
  t11649 = t11647 + t11648;
  t11653 = t892*t1573;
  t11655 = -1.*t861*t3274;
  t11659 = t11653 + t11655;
  t11762 = t1215*t1333;
  t11765 = t1884*t1951;
  t11768 = t11762 + t11765;
  t11756 = t1215*t5882;
  t11759 = -1.*t4776*t1951;
  t11760 = t11756 + t11759;
  t11769 = t1215*t4776;
  t11770 = t5882*t1951;
  t11772 = t11769 + t11770;
  t11796 = -1.*t10390*t11760;
  t11797 = -1.*t11768*t11772;
  t11801 = t11796 + t11797;
  t11834 = -1.*t1215*t1333*t9503;
  t11842 = -1.*t1884*t9503*t1951;
  t11843 = t11834 + t11842;
  t11847 = t1884*t1215*t9503;
  t11848 = -1.*t1333*t9503*t1951;
  t11855 = t11847 + t11848;
  t11761 = t10390*t11760;
  t11774 = t11768*t11772;
  t11775 = t11761 + t11774;
  t11861 = t11760*t2113;
  t11862 = t11772*t11524;
  t11781 = -1.*t11760*t2113;
  t11786 = -1.*t11772*t11524;
  t11947 = t4619*t861;
  t11951 = t892*t11760;
  t11953 = t11947 + t11951;
  t11957 = t892*t4619;
  t11961 = -1.*t861*t11760;
  t11962 = t11957 + t11961;
  t11816 = t11772*t11598;
  t11974 = -1.*t892*t10390*t11953;
  t11978 = t861*t10390*t11962;
  t11979 = t11797 + t11974 + t11978;
  t11856 = -1.*t11768*t11855;
  t11864 = t11855*t11598;
  t11992 = t8521*t861;
  t11998 = t892*t11843;
  t11999 = t11992 + t11998;
  t12002 = t892*t8521;
  t12004 = -1.*t861*t11843;
  t12007 = t12002 + t12004;
  t11954 = t892*t10390*t11953;
  t11963 = -1.*t861*t10390*t11962;
  t11964 = t11774 + t11954 + t11963;
  t11876 = t11768*t11855;
  t11892 = -1.*t11855*t11524;
  t11898 = -1.*t11772*t11649;
  t12016 = t11953*t2251;
  t12020 = t11962*t11563;
  t11916 = -1.*t11772*t11598;
  t11925 = -1.*t11855*t11598;
  t11967 = -1.*t11953*t2251;
  t11968 = -1.*t11962*t11563;
  t11930 = t11855*t11524;
  t11933 = t11772*t11649;
  t11733 = t11534*t11649;
  t11736 = -1.*t11515*t11659;
  t11747 = t11733 + t11736;
  t4857 = -1.*t1884*t4776*t857;
  t5886 = t1333*t5882*t857;
  t5971 = t4753 + t4857 + t5886;
  t6035 = t1573*t5971;
  t6252 = t1884*t4776*t1573;
  t6383 = -1.*t1333*t5882*t1573;
  t6981 = t6252 + t6383 + t6442;
  t7204 = t857*t6981;
  t7294 = -1.*t1884*t4776*t1573;
  t7401 = t1333*t5882*t1573;
  t9505 = -1.*t8977*t9503*t857;
  t9754 = -1.*t9635*t9503*t857;
  t9807 = t7294 + t7401 + t8612 + t8701 + t9505 + t9754;
  t9857 = t857*t9807;
  t9862 = t8977*t9503*t1573;
  t9868 = t9635*t9503*t1573;
  t9873 = t1884*t4776*t3077;
  t9875 = -1.*t1333*t5882*t3077;
  t9890 = t9858 + t9862 + t9868 + t9872 + t9873 + t9875;
  t9998 = t4712*t9890;
  t10048 = t6035 + t7204 + t9857 + t9998;
  t11725 = t11534*t11598;
  t11728 = -1.*t11515*t11609;
  t11729 = t11725 + t11728;
  t11050 = 0.242889*t218;
  t11071 = -1.*t218*t3940;
  t11073 = t4361*t669;
  t11075 = t11050 + t11071 + t11073;
  t11105 = -0.242889*t218;
  t11124 = t218*t3940;
  t11146 = t218*t8084;
  t11176 = -1.*t4361*t669;
  t11186 = t7666*t669;
  t11187 = t11105 + t11124 + t11146 + t11176 + t11186;
  t11190 = -1.*t218*t7666;
  t11195 = t8084*t669;
  t11197 = t11189 + t11190 + t11192 + t11194 + t11195;
  t11239 = t11189 + t11192 + t11194;
  t11264 = -1.*t4769*t857;
  t11314 = t4753 + t11264;
  t11319 = t1573*t11314;
  t11350 = t4769*t1573;
  t11351 = t11350 + t6442;
  t11354 = t857*t11351;
  t11358 = -1.*t4769*t1573;
  t11395 = -1.*t9503*t857;
  t11397 = t11358 + t8612 + t8701 + t11395;
  t11398 = t857*t11397;
  t11399 = t9503*t1573;
  t11402 = t4769*t3077;
  t11404 = t9858 + t11399 + t9872 + t11402;
  t11410 = t4712*t11404;
  t11412 = t11319 + t11354 + t11398 + t11410;
  t12115 = t11534*t11768;
  t12116 = t11515*t861*t10390;
  t12117 = t12115 + t12116;
  t11415 = -0.11688*t857;
  t11417 = -0.081715*t3077;
  t11420 = t11415 + t11417;
  t11455 = -0.081715*t1573;
  t11461 = -0.11688*t4712;
  t11492 = t11455 + t11461;
  t11719 = 0.241*t11010*t11717;
  t11724 = 0.241*t3457*t11717;
  t11731 = 0.241*t2251*t11729;
  t11749 = 0.241*t2251*t11747;
  t11751 = t11719 + t11724 + t11731 + t11749;
  t11601 = t11515*t11598;
  t11616 = t11534*t11609;
  t11624 = t11601 + t11616;
  t11651 = t11515*t11649;
  t11669 = t11534*t11659;
  t11688 = t11651 + t11669;
  t11779 = t11524*t11775;
  t11787 = t8701 + t11781 + t11786;
  t11788 = t11768*t11787;
  t11790 = t11779 + t11788;
  t11833 = t11524*t11801;
  t11844 = -1.*t10390*t11843;
  t11857 = t11844 + t11856;
  t11858 = t11598*t11857;
  t11860 = t8521*t4712;
  t11863 = t11843*t11004;
  t11865 = t11860 + t6442 + t11861 + t11862 + t11863 + t11864;
  t11871 = t11768*t11865;
  t11872 = t11833 + t11858 + t11871;
  t11802 = t11598*t11801;
  t11812 = t4619*t4712;
  t11814 = t11760*t11004;
  t11817 = t11812 + t11814 + t11816;
  t11823 = t11768*t11817;
  t11831 = t11802 + t11823;
  t11874 = t11649*t11775;
  t11875 = t10390*t11843;
  t11878 = t11875 + t11876;
  t11885 = t11524*t11878;
  t11886 = -1.*t4619*t1573;
  t11888 = -1.*t8521*t857;
  t11891 = -1.*t11843*t2113;
  t11894 = -1.*t11760*t3274;
  t11900 = t11886 + t11888 + t11891 + t11892 + t11894 + t11898;
  t11901 = t11768*t11900;
  t11903 = t11874 + t11885 + t11901;
  t11912 = t6442 + t11861 + t11862;
  t11913 = t11524*t11912;
  t11914 = -1.*t11760*t11004;
  t11918 = t4753 + t11914 + t11916;
  t11923 = t11649*t11918;
  t11924 = -1.*t11843*t11004;
  t11926 = t8612 + t8701 + t11781 + t11786 + t11924 + t11925;
  t11927 = t11524*t11926;
  t11928 = t11843*t2113;
  t11931 = t11760*t3274;
  t11934 = t9858 + t9872 + t11928 + t11930 + t11931 + t11933;
  t11937 = t11598*t11934;
  t11938 = t11913 + t11923 + t11927 + t11937;
  t11966 = t2251*t11964;
  t11969 = t11786 + t11967 + t11968;
  t11970 = t892*t10390*t11969;
  t11972 = t11966 + t11970;
  t11982 = t11010*t11979;
  t11983 = t11953*t11010;
  t11984 = t11962*t11609;
  t11985 = t11816 + t11983 + t11984;
  t11987 = t892*t10390*t11985;
  t11988 = t11982 + t11987;
  t11991 = t2251*t11979;
  t12001 = -1.*t892*t10390*t11999;
  t12008 = t861*t10390*t12007;
  t12009 = t11856 + t12001 + t12008;
  t12013 = t11010*t12009;
  t12021 = t11999*t11010;
  t12022 = t12007*t11609;
  t12023 = t11862 + t11864 + t12016 + t12020 + t12021 + t12022;
  t12025 = t892*t10390*t12023;
  t12033 = t11991 + t12013 + t12025;
  t12036 = t3457*t11964;
  t12039 = t892*t10390*t11999;
  t12040 = -1.*t861*t10390*t12007;
  t12041 = t11876 + t12039 + t12040;
  t12043 = t2251*t12041;
  t12044 = -1.*t11999*t2251;
  t12047 = -1.*t12007*t11563;
  t12048 = -1.*t11953*t3457;
  t12052 = -1.*t11962*t11659;
  t12053 = t11892 + t11898 + t12044 + t12047 + t12048 + t12052;
  t12055 = t892*t10390*t12053;
  t12057 = t12036 + t12043 + t12055;
  t12061 = t11862 + t12016 + t12020;
  t12063 = t2251*t12061;
  t12064 = -1.*t11953*t11010;
  t12066 = -1.*t11962*t11609;
  t12069 = t11916 + t12064 + t12066;
  t12070 = t3457*t12069;
  t12072 = -1.*t11999*t11010;
  t12074 = -1.*t12007*t11609;
  t12081 = t11786 + t11925 + t11967 + t11968 + t12072 + t12074;
  t12085 = t2251*t12081;
  t12088 = t11999*t2251;
  t12089 = t12007*t11563;
  t12090 = t11953*t3457;
  t12091 = t11962*t11659;
  t12093 = t11930 + t11933 + t12088 + t12089 + t12090 + t12091;
  t12094 = t11010*t12093;
  t12096 = t12063 + t12070 + t12085 + t12094;
  t12257 = t11515*t11768;
  t12259 = -1.*t11534*t861*t10390;
  t12260 = t12257 + t12259;
  t11572 = 0.241*t11010*t11571;
  t11574 = 0.241*t3457*t11571;
  t11643 = 0.241*t2251*t11624;
  t11691 = 0.241*t2251*t11688;
  t11697 = t11572 + t11574 + t11643 + t11691;
  t12177 = 0.241*t11717*t11624;
  t12178 = 0.241*t11571*t11729;
  t12179 = 0.241*t11717*t11688;
  t12180 = 0.241*t11571*t11747;
  t12182 = t12177 + t12178 + t12179 + t12180;
  t12409 = t11010*t12061;
  t12416 = t2251*t12069;
  t12417 = t12409 + t12416;
  t11973 = 0.241*t2251*t11972;
  t11990 = 0.241*t3457*t11988;
  t12035 = 0.241*t2251*t12033;
  t12059 = 0.241*t11010*t12057;
  t12101 = 0.241*t892*t10390*t12096;
  t12102 = t11973 + t11990 + t12035 + t12059 + t12101;
  t12354 = 0.241*t11571*t11972;
  t12356 = 0.241*t11688*t11988;
  t12360 = 0.241*t11571*t12033;
  t12364 = 0.241*t11624*t12057;
  t12365 = 0.241*t12260*t12096;
  t12367 = t12354 + t12356 + t12360 + t12364 + t12365;
  t12214 = 0.241*t11717*t11972;
  t12215 = 0.241*t11747*t11988;
  t12217 = 0.241*t11717*t12033;
  t12219 = 0.241*t11729*t12057;
  t12220 = 0.241*t12117*t12096;
  t12223 = t12214 + t12215 + t12217 + t12219 + t12220;
  t12572 = t11598*t11912;
  t12573 = t11524*t11918;
  t12579 = t12572 + t12573;
  t12458 = t857*t5971;
  t12459 = t4712*t6981;
  t12475 = t12458 + t12459;
  t12525 = t857*t11314;
  t12531 = t4712*t11351;
  t12536 = t12525 + t12531;
  t11794 = 0.241*t2251*t11790;
  t11832 = 0.241*t3457*t11831;
  t11873 = 0.241*t2251*t11872;
  t11908 = 0.241*t11010*t11903;
  t11944 = 0.241*t892*t10390*t11938;
  t11945 = t11794 + t11832 + t11873 + t11908 + t11944;
  t12336 = 0.241*t11571*t11790;
  t12338 = 0.241*t11571*t11872;
  t12341 = 0.241*t11831*t11688;
  t12348 = 0.241*t11624*t11903;
  t12349 = 0.241*t12260*t11938;
  t12351 = t12336 + t12338 + t12341 + t12348 + t12349;
  t12197 = 0.241*t11717*t11790;
  t12198 = 0.241*t11717*t11872;
  t12201 = 0.241*t11831*t11747;
  t12202 = 0.241*t11729*t11903;
  t12206 = 0.241*t12117*t11938;
  t12211 = t12197 + t12198 + t12201 + t12202 + t12206;
  t12561 = 0.241*t11903*t11972;
  t12563 = 0.241*t11938*t12417;
  t12567 = 0.241*t11872*t11988;
  t12569 = 0.241*t11831*t12033;
  t12570 = 0.241*t11790*t12057;
  t12580 = 0.241*t12579*t12096;
  t12584 = t12561 + t12563 + t12567 + t12569 + t12570 + t12580;
  t10636 = 0.241*t892*t10048*t10390;
  t10826 = 0.241*t10824*t857*t2251;
  t10946 = 0.241*t10913*t857*t2251;
  t11022 = 0.241*t10913*t1573*t11010;
  t11027 = 0.241*t10824*t4712*t3457;
  t11029 = t10636 + t10826 + t10946 + t11022 + t11027;
  t12265 = 0.241*t10048*t12260;
  t12266 = 0.241*t10824*t857*t11571;
  t12269 = 0.241*t10913*t857*t11571;
  t12276 = 0.241*t10913*t1573*t11624;
  t12277 = 0.241*t10824*t4712*t11688;
  t12280 = t12265 + t12266 + t12269 + t12276 + t12277;
  t12123 = 0.241*t10048*t12117;
  t12126 = 0.241*t10824*t857*t11717;
  t12127 = 0.241*t10913*t857*t11717;
  t12134 = 0.241*t10913*t1573*t11729;
  t12139 = 0.241*t10824*t4712*t11747;
  t12141 = t12123 + t12126 + t12127 + t12134 + t12139;
  t12624 = 0.241*t10913*t1573*t11790;
  t12627 = 0.241*t10048*t12579;
  t12628 = 0.241*t10824*t857*t11831;
  t12630 = 0.241*t10824*t4712*t11872;
  t12635 = 0.241*t10913*t857*t11903;
  t12638 = 0.241*t12475*t11938;
  t12639 = t12624 + t12627 + t12628 + t12630 + t12635 + t12638;
  t12407 = 0.241*t10913*t1573*t11972;
  t12418 = 0.241*t10048*t12417;
  t12420 = 0.241*t10824*t857*t11988;
  t12428 = 0.241*t10824*t4712*t12033;
  t12431 = 0.241*t10913*t857*t12057;
  t12480 = 0.241*t12475*t12096;
  t12486 = t12407 + t12418 + t12420 + t12428 + t12431 + t12480;
  t12736 = 0.01694953*t10913*t1573*t857;
  t12737 = 0.241*t10824*t857*t11492;
  t12739 = 0.241*t10824*t4712*t11420;
  t12741 = 0.241*t12536*t10048;
  t12742 = 0.241*t12475*t11412;
  t12743 = t12736 + t12737 + t12739 + t12741 + t12742;
  t11413 = 0.241*t892*t11412*t10390;
  t11414 = 0.008474765*t857*t2251;
  t11424 = 0.241*t11420*t2251;
  t11435 = 0.008474765*t1573*t11010;
  t11494 = 0.241*t11492*t3457;
  t11495 = t11413 + t11414 + t11424 + t11435 + t11494;
  t12297 = 0.241*t11412*t12260;
  t12298 = 0.008474765*t857*t11571;
  t12301 = 0.241*t11420*t11571;
  t12302 = 0.008474765*t1573*t11624;
  t12304 = 0.241*t11492*t11688;
  t12309 = t12297 + t12298 + t12301 + t12302 + t12304;
  t12160 = 0.241*t11412*t12117;
  t12163 = 0.008474765*t857*t11717;
  t12165 = 0.241*t11420*t11717;
  t12167 = 0.008474765*t1573*t11729;
  t12168 = 0.241*t11492*t11747;
  t12170 = t12160 + t12163 + t12165 + t12167 + t12168;
  t12641 = 0.008474765*t1573*t11790;
  t12643 = 0.241*t11412*t12579;
  t12644 = 0.241*t11420*t11831;
  t12645 = 0.241*t11492*t11872;
  t12646 = 0.008474765*t857*t11903;
  t12648 = 0.241*t12536*t11938;
  t12653 = t12641 + t12643 + t12644 + t12645 + t12646 + t12648;
  t12489 = 0.008474765*t1573*t11972;
  t12518 = 0.241*t11412*t12417;
  t12519 = 0.241*t11420*t11988;
  t12523 = 0.241*t11492*t12033;
  t12524 = 0.008474765*t857*t12057;
  t12537 = 0.241*t12536*t12096;
  t12541 = t12489 + t12518 + t12519 + t12523 + t12524 + t12537;
  t12704 = 0.241*t10824*t857*t11239;
  t12705 = 0.241*t10913*t1573*t11075;
  t12707 = 0.241*t10824*t4712*t11187;
  t12708 = 0.241*t10913*t857*t11197;
  t12712 = t12704 + t12705 + t12707 + t12708;
  t12762 = 0.008474765*t1573*t11075;
  t12764 = 0.008474765*t857*t11197;
  t12765 = 0.241*t11187*t11492;
  t12766 = 0.241*t11239*t11420;
  t12767 = t12762 + t12764 + t12765 + t12766;
  t11085 = 0.241*t11075*t2251;
  t11188 = 0.241*t11187*t2251;
  t11216 = 0.241*t11197*t11010;
  t11240 = 0.241*t11239*t3457;
  t11241 = t11085 + t11188 + t11216 + t11240;
  t12283 = 0.241*t11075*t11571;
  t12285 = 0.241*t11187*t11571;
  t12286 = 0.241*t11197*t11624;
  t12287 = 0.241*t11239*t11688;
  t12292 = t12283 + t12285 + t12286 + t12287;
  t12149 = 0.241*t11075*t11717;
  t12150 = 0.241*t11187*t11717;
  t12153 = 0.241*t11197*t11729;
  t12154 = 0.241*t11239*t11747;
  t12157 = t12149 + t12150 + t12153 + t12154;
  t12615 = 0.241*t11197*t11790;
  t12616 = 0.241*t11187*t11831;
  t12618 = 0.241*t11239*t11872;
  t12619 = 0.241*t11075*t11903;
  t12620 = t12615 + t12616 + t12618 + t12619;
  t12380 = 0.241*t11197*t11972;
  t12381 = 0.241*t11187*t11988;
  t12385 = 0.241*t11239*t12033;
  t12389 = 0.241*t11075*t12057;
  t12396 = t12380 + t12381 + t12385 + t12389;
  t12689 = 0.00482*t10913*t1573;
  t12692 = -0.03856*t10824*t857;
  t12693 = t12689 + t12692;
  t12787 = -0.03856*t11187;
  t12790 = 0.00482*t11197;
  t12791 = t12787 + t12790;
  t12758 = 0.0001694953*t1573;
  t12759 = -0.03856*t11420;
  t12760 = t12758 + t12759;
  t2314 = 0.00482*t2251;
  t3464 = -0.03856*t3457;
  t3467 = t2314 + t3464;
  t12237 = 0.00482*t11571;
  t12243 = -0.03856*t11688;
  t12244 = t12237 + t12243;
  t12110 = 0.00482*t11717;
  t12111 = -0.03856*t11747;
  t12112 = t12110 + t12111;
  t12603 = -0.03856*t11872;
  t12605 = 0.00482*t11903;
  t12608 = t12603 + t12605;
  t12374 = -0.03856*t12033;
  t12375 = 0.00482*t12057;
  t12376 = t12374 + t12375;
  p_output1[0]=var2[11]*(-0.5*(0.482*t11010*t2251 + 0.482*t2251*t3457)*var2[0] - 0.5*t11751*var2[1] - 0.5*t11697*var2[2] - 0.5*t12102*var2[3] - 0.5*t11945*var2[4] - 0.5*t11029*var2[5] - 0.5*t11495*var2[9] - 0.5*t11241*var2[10] - 0.5*t3467*var2[11]);
  p_output1[1]=var2[11]*(-0.5*t11751*var2[0] - 0.5*(0.482*t11717*t11729 + 0.482*t11717*t11747)*var2[1] - 0.5*t12182*var2[2] - 0.5*t12223*var2[3] - 0.5*t12211*var2[4] - 0.5*t12141*var2[5] - 0.5*t12170*var2[9] - 0.5*t12157*var2[10] - 0.5*t12112*var2[11]);
  p_output1[2]=var2[11]*(-0.5*t11697*var2[0] - 0.5*t12182*var2[1] - 0.5*(0.482*t11571*t11624 + 0.482*t11571*t11688)*var2[2] - 0.5*t12367*var2[3] - 0.5*t12351*var2[4] - 0.5*t12280*var2[5] - 0.5*t12309*var2[9] - 0.5*t12292*var2[10] - 0.5*t12244*var2[11]);
  p_output1[3]=var2[11]*(-0.5*t12102*var2[0] - 0.5*t12223*var2[1] - 0.5*t12367*var2[2] - 0.5*(0.482*t11988*t12033 + 0.482*t11972*t12057 + 0.482*t12096*t12417)*var2[3] - 0.5*t12584*var2[4] - 0.5*t12486*var2[5] - 0.5*t12541*var2[9] - 0.5*t12396*var2[10] - 0.5*t12376*var2[11]);
  p_output1[4]=var2[11]*(-0.5*t11945*var2[0] - 0.5*t12211*var2[1] - 0.5*t12351*var2[2] - 0.5*t12584*var2[3] - 0.5*(0.482*t11831*t11872 + 0.482*t11790*t11903 + 0.482*t11938*t12579)*var2[4] - 0.5*t12639*var2[5] - 0.5*t12653*var2[9] - 0.5*t12620*var2[10] - 0.5*t12608*var2[11]);
  p_output1[5]=var2[11]*(-0.5*t11029*var2[0] - 0.5*t12141*var2[1] - 0.5*t12280*var2[2] - 0.5*t12486*var2[3] - 0.5*t12639*var2[4] - 0.5*(0.482*t10048*t12475 + 0.482*Power(t10913,2)*t1573*t857 + 0.482*Power(t10824,2)*t4712*t857)*var2[5] - 0.5*t12743*var2[9] - 0.5*t12712*var2[10] - 0.5*t12693*var2[11]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=var2[11]*(-0.5*t11495*var2[0] - 0.5*t12170*var2[1] - 0.5*t12309*var2[2] - 0.5*t12541*var2[3] - 0.5*t12653*var2[4] - 0.5*t12743*var2[5] - 0.5*(0.482*t11420*t11492 + 0.482*t11412*t12536 + 0.00059603022245*t1573*t857)*var2[9] - 0.5*t12767*var2[10] - 0.5*t12760*var2[11]);
  p_output1[10]=var2[11]*(-0.5*t11241*var2[0] - 0.5*t12157*var2[1] - 0.5*t12292*var2[2] - 0.5*t12396*var2[3] - 0.5*t12620*var2[4] - 0.5*t12712*var2[5] - 0.5*t12767*var2[9] - 0.5*(0.482*t11075*t11197 + 0.482*t11187*t11239)*var2[10] - 0.5*t12791*var2[11]);
  p_output1[11]=(-0.5*t3467*var2[0] - 0.5*t12112*var2[1] - 0.5*t12244*var2[2] - 0.5*t12376*var2[3] - 0.5*t12608*var2[4] - 0.5*t12693*var2[5] - 0.5*t12760*var2[9] - 0.5*t12791*var2[10])*var2[11];
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec12_plane.hh"

namespace SymFunction
{

void Ce2_vec12_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
