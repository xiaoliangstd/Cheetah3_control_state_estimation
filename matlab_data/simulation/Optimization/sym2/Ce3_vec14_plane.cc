/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:54:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t739;
  double t776;
  double t833;
  double t582;
  double t893;
  double t514;
  double t1248;
  double t1077;
  double t1125;
  double t2175;
  double t4430;
  double t4740;
  double t4475;
  double t4489;
  double t4906;
  double t4924;
  double t4936;
  double t5006;
  double t5015;
  double t4959;
  double t4974;
  double t4757;
  double t4790;
  double t4812;
  double t4816;
  double t4527;
  double t4644;
  double t4741;
  double t4745;
  double t5063;
  double t5073;
  double t5087;
  double t5846;
  double t5848;
  double t5800;
  double t5809;
  double t806;
  double t1010;
  double t1021;
  double t2123;
  double t2195;
  double t2271;
  double t2306;
  double t2325;
  double t2467;
  double t2798;
  double t2810;
  double t2883;
  double t3043;
  double t3046;
  double t3073;
  double t3085;
  double t3269;
  double t3329;
  double t4749;
  double t4750;
  double t4822;
  double t4843;
  double t4865;
  double t4890;
  double t4994;
  double t5020;
  double t5035;
  double t5090;
  double t5106;
  double t5326;
  double t5332;
  double t5345;
  double t5353;
  double t5625;
  double t5639;
  double t5681;
  double t5693;
  double t5751;
  double t5766;
  double t5823;
  double t5861;
  double t5885;
  double t5947;
  double t5948;
  double t5950;
  double t5953;
  double t5985;
  double t6031;
  double t6033;
  double t6035;
  double t6068;
  double t7121;
  double t7136;
  double t7156;
  double t7190;
  double t7210;
  double t7234;
  double t7258;
  double t7261;
  double t7320;
  double t7373;
  double t7393;
  double t7397;
  double t8576;
  double t8584;
  double t8587;
  double t8306;
  double t8313;
  double t8316;
  double t8325;
  double t8347;
  double t8357;
  double t8367;
  double t8419;
  double t8439;
  double t8461;
  double t8498;
  double t8513;
  double t8559;
  double t8595;
  double t8658;
  double t8672;
  double t8678;
  double t8682;
  double t8686;
  double t8688;
  double t8689;
  double t8749;
  double t8768;
  double t8781;
  double t8456;
  double t8732;
  double t8739;
  double t8913;
  double t8934;
  double t8948;
  double t8228;
  double t8229;
  double t8303;
  double t8854;
  double t8862;
  double t8865;
  double t8798;
  double t8799;
  double t8837;
  double t9549;
  double t9550;
  double t9584;
  double t10271;
  double t10317;
  double t10321;
  double t10330;
  double t9945;
  double t9947;
  double t9952;
  double t9968;
  double t10017;
  double t10030;
  double t10193;
  double t10226;
  double t10233;
  double t10239;
  double t10246;
  double t10250;
  double t10341;
  double t10353;
  double t10379;
  double t10380;
  double t10383;
  double t10394;
  double t10398;
  double t10400;
  double t10469;
  double t10472;
  double t7741;
  double t10463;
  double t10468;
  double t10427;
  double t10438;
  double t10443;
  double t10096;
  double t10168;
  double t10490;
  double t10474;
  double t9928;
  double t9939;
  double t9941;
  double t10241;
  double t10406;
  double t10409;
  double t10533;
  double t10534;
  double t10535;
  double t7750;
  double t10526;
  double t10527;
  double t10529;
  double t10595;
  double t10598;
  double t10601;
  double t10725;
  double t10743;
  double t10746;
  double t10760;
  double t10762;
  double t10764;
  double t10787;
  double t10793;
  double t10796;
  double t10807;
  double t10811;
  double t10813;
  double t10868;
  double t10918;
  double t8892;
  double t11069;
  double t11075;
  double t11076;
  double t9023;
  double t9763;
  double t11085;
  double t11087;
  double t11088;
  double t9864;
  double t10536;
  double t11224;
  double t11225;
  double t11227;
  double t11211;
  double t11230;
  double t10569;
  double t10652;
  double t11213;
  double t11217;
  double t11221;
  double t10691;
  double t11094;
  double t11101;
  double t8906;
  double t8949;
  double t8975;
  double t11068;
  double t11079;
  double t9268;
  double t9448;
  double t9494;
  double t11161;
  double t11334;
  double t11338;
  double t11166;
  double t9774;
  double t9782;
  double t9783;
  double t11187;
  double t11194;
  double t9865;
  double t9867;
  double t9883;
  double t11212;
  double t11231;
  double t10538;
  double t10541;
  double t10542;
  double t11236;
  double t11242;
  double t10573;
  double t10577;
  double t10579;
  double t11269;
  double t11279;
  double t10656;
  double t10657;
  double t10660;
  double t11283;
  double t11289;
  double t10692;
  double t10693;
  double t10704;
  double t11530;
  double t11531;
  double t11548;
  double t11574;
  double t11575;
  double t11576;
  double t11619;
  double t11620;
  double t11622;
  double t11625;
  double t11626;
  double t11629;
  double t11643;
  double t11644;
  double t11648;
  double t11662;
  double t11667;
  double t11668;
  double t11678;
  double t11679;
  double t11682;
  double t11695;
  double t11697;
  double t11705;
  double t11048;
  double t11049;
  double t11760;
  double t11764;
  double t11765;
  double t11770;
  double t11771;
  double t11788;
  double t11790;
  double t11792;
  double t11116;
  double t11118;
  double t11123;
  double t11146;
  double t11151;
  double t11174;
  double t11177;
  double t11179;
  double t11205;
  double t11206;
  double t11855;
  double t11856;
  double t11843;
  double t11847;
  double t11851;
  double t11858;
  double t11860;
  double t11252;
  double t11253;
  double t11256;
  double t11264;
  double t11265;
  double t11310;
  double t11312;
  double t11313;
  double t11785;
  double t11793;
  double t11768;
  double t11779;
  double t11810;
  double t11815;
  double t11824;
  double t11827;
  double t11854;
  double t11861;
  double t11870;
  double t11874;
  double t11894;
  double t11897;
  double t11900;
  double t11908;
  double t12230;
  double t12231;
  double t12235;
  double t12238;
  double t12130;
  double t12192;
  double t12161;
  double t12165;
  double t12166;
  double t12377;
  double t12379;
  double t12391;
  double t12406;
  double t12409;
  double t12411;
  double t12458;
  double t12459;
  double t12467;
  double t6301;
  double t6339;
  double t6427;
  double t12507;
  double t12509;
  double t12513;
  double t12521;
  double t12525;
  double t12527;
  double t12538;
  double t12541;
  double t12544;
  double t12548;
  double t12551;
  double t12554;
  double t12612;
  double t12614;
  double t12615;
  double t12619;
  double t12620;
  double t12622;
  double t12624;
  double t12629;
  double t12685;
  double t12687;
  double t12688;
  double t12691;
  double t12693;
  double t12694;
  double t12704;
  double t12631;
  double t12646;
  double t12650;
  double t12769;
  double t12777;
  double t12796;
  double t12807;
  double t12816;
  double t12817;
  double t12347;
  double t12349;
  double t12662;
  double t12669;
  double t12671;
  double t12401;
  double t12413;
  double t12415;
  double t12695;
  double t12712;
  double t12719;
  double t12990;
  double t12992;
  double t13000;
  double t13004;
  double t13005;
  double t13006;
  double t12373;
  double t12394;
  double t12396;
  double t12728;
  double t12748;
  double t12753;
  double t13108;
  double t13114;
  double t13092;
  double t13093;
  double t13100;
  double t13079;
  double t13080;
  double t13104;
  double t13106;
  double t13129;
  double t13130;
  double t13135;
  double t13144;
  double t13145;
  double t12135;
  double t12183;
  double t12189;
  double t12191;
  double t12193;
  double t12257;
  double t12263;
  double t12265;
  double t12277;
  double t12282;
  double t12293;
  double t13271;
  double t13273;
  double t13275;
  double t12269;
  double t12297;
  double t12400;
  double t12416;
  double t12519;
  double t12531;
  double t12533;
  double t12534;
  double t12545;
  double t12558;
  double t12561;
  double t12563;
  double t12575;
  double t12579;
  double t12581;
  double t12584;
  double t12588;
  double t12598;
  double t12599;
  double t12600;
  double t6722;
  double t6764;
  double t6993;
  double t7003;
  double t12683;
  double t12702;
  double t12710;
  double t13458;
  double t13459;
  double t13462;
  double t13465;
  double t13470;
  double t13471;
  double t12726;
  double t13483;
  double t13484;
  double t13489;
  double t12739;
  double t12743;
  double t12987;
  double t13474;
  double t13505;
  double t13017;
  double t13018;
  double t13598;
  double t13604;
  double t13606;
  double t13613;
  double t13616;
  double t13625;
  double t13035;
  double t13535;
  double t13544;
  double t13049;
  double t13051;
  t739 = Cos(var1[13]);
  t776 = Cos(var1[5]);
  t833 = Sin(var1[12]);
  t582 = Cos(var1[12]);
  t893 = Sin(var1[5]);
  t514 = Sin(var1[3]);
  t1248 = Sin(var1[13]);
  t1077 = Cos(var1[3]);
  t1125 = Cos(var1[4]);
  t2175 = Sin(var1[4]);
  t4430 = Cos(var1[14]);
  t4740 = Sin(var1[14]);
  t4475 = -1.*t4430;
  t4489 = 1. + t4475;
  t4906 = -1.*t4430*t1248;
  t4924 = -1.*t739*t4740;
  t4936 = 0. + t4906 + t4924;
  t5006 = t833*t4936;
  t5015 = 0. + t5006;
  t4959 = t582*t4936;
  t4974 = 0. + t4959;
  t4757 = -0.336601*t4489;
  t4790 = -0.356601*t4430;
  t4812 = -0.16*t4740;
  t4816 = 0. + t4757 + t4790 + t4812;
  t4527 = -0.20833*t4489;
  t4644 = -0.36833*t4430;
  t4741 = 0.020000000000000018*t4740;
  t4745 = 0. + t4527 + t4644 + t4741;
  t5063 = t739*t4430;
  t5073 = -1.*t1248*t4740;
  t5087 = 0. + t5063 + t5073;
  t5846 = t833*t5087;
  t5848 = 0. + t5846;
  t5800 = t582*t5087;
  t5809 = 0. + t5800;
  t806 = t582*t739*t776;
  t1010 = t739*t833*t893;
  t1021 = t806 + t1010;
  t2123 = t1125*t1248;
  t2195 = t739*t776*t833;
  t2271 = -1.*t582*t739*t893;
  t2306 = t2195 + t2271;
  t2325 = -1.*t2175*t2306;
  t2467 = t2123 + t2325;
  t2798 = -1.*t582*t776*t1248;
  t2810 = -1.*t833*t1248*t893;
  t2883 = t2798 + t2810;
  t3043 = t739*t1125;
  t3046 = -1.*t776*t833*t1248;
  t3073 = t582*t1248*t893;
  t3085 = t3046 + t3073;
  t3269 = -1.*t2175*t3085;
  t3329 = t3043 + t3269;
  t4749 = t4430*t4745;
  t4750 = 0.194401*t4740;
  t4822 = t4816*t4740;
  t4843 = 0. + t4749 + t4750 + t4822;
  t4865 = 0.241*t4843;
  t4890 = 0. + t4865;
  t4994 = t776*t4974;
  t5020 = t5015*t893;
  t5035 = 0. + t4994 + t5020;
  t5090 = t1125*t5087;
  t5106 = t776*t5015;
  t5326 = -1.*t4974*t893;
  t5332 = 0. + t5106 + t5326;
  t5345 = -1.*t2175*t5332;
  t5353 = 0. + t5090 + t5345;
  t5625 = -0.194401*t4430;
  t5639 = -1.*t4430*t4816;
  t5681 = t4745*t4740;
  t5693 = 0. + t5625 + t5639 + t5681;
  t5751 = 0.241*t5693;
  t5766 = 0. + t5751;
  t5823 = t776*t5809;
  t5861 = t5848*t893;
  t5885 = 0. + t5823 + t5861;
  t5947 = t4430*t1248;
  t5948 = t739*t4740;
  t5950 = 0. + t5947 + t5948;
  t5953 = t1125*t5950;
  t5985 = t776*t5848;
  t6031 = -1.*t5809*t893;
  t6033 = 0. + t5985 + t6031;
  t6035 = -1.*t2175*t6033;
  t6068 = 0. + t5953 + t6035;
  t7121 = -1.*t1248*t2175;
  t7136 = -1.*t1125*t2306;
  t7156 = t7121 + t7136;
  t7190 = -1.*t739*t2175;
  t7210 = -1.*t1125*t3085;
  t7234 = t7190 + t7210;
  t7258 = -1.*t5087*t2175;
  t7261 = -1.*t1125*t5332;
  t7320 = t7258 + t7261;
  t7373 = -1.*t5950*t2175;
  t7393 = -1.*t1125*t6033;
  t7397 = t7373 + t7393;
  t8576 = -0.04*t739;
  t8584 = 0.04*t1248;
  t8587 = t8576 + t8584;
  t8306 = t582*t776;
  t8313 = t833*t893;
  t8316 = t8306 + t8313;
  t8325 = -1.*t739;
  t8347 = 1. + t8325;
  t8357 = -0.194401*t8347;
  t8367 = -0.234401*t739;
  t8419 = -0.04*t1248;
  t8439 = t8357 + t8367 + t8419;
  t8461 = -1.*t582;
  t8498 = 1. + t8461;
  t8513 = -0.081715*t8498;
  t8559 = -0.13528*t582;
  t8595 = t833*t8587;
  t8658 = t8513 + t8559 + t8595;
  t8672 = t776*t8658;
  t8678 = 0.053565*t833;
  t8682 = t582*t8587;
  t8686 = t8678 + t8682;
  t8688 = -1.*t8686*t893;
  t8689 = t8672 + t8688;
  t8749 = t8439*t2175;
  t8768 = t1125*t8689;
  t8781 = t8749 + t8768;
  t8456 = -1.*t8439*t2175;
  t8732 = -1.*t1125*t8689;
  t8739 = t8456 + t8732;
  t8913 = t1125*t8439;
  t8934 = -1.*t2175*t8689;
  t8948 = t8913 + t8934;
  t8228 = t1248*t2175;
  t8229 = t1125*t2306;
  t8303 = t8228 + t8229;
  t8854 = t776*t8686;
  t8862 = t8658*t893;
  t8865 = t8854 + t8862;
  t8798 = -1.*t776*t833;
  t8799 = t582*t893;
  t8837 = t8798 + t8799;
  t9549 = t739*t2175;
  t9550 = t1125*t3085;
  t9584 = t9549 + t9550;
  t10271 = -0.194401*t1248;
  t10317 = -1.*t1248*t4816;
  t10321 = t739*t4745;
  t10330 = 0. + t10271 + t10317 + t10321;
  t9945 = 0. + t582;
  t9947 = t9945*t776;
  t9952 = -1.*t833;
  t9968 = 0. + t9952;
  t10017 = -1.*t9968*t893;
  t10030 = 0. + t9947 + t10017;
  t10193 = -0.194401*t8347;
  t10226 = t739*t4816;
  t10233 = t1248*t4745;
  t10239 = 0. + t10193 + t10226 + t10233;
  t10246 = -0.081715*t8498;
  t10250 = -0.11459*t582;
  t10341 = t833*t10330;
  t10353 = t10246 + t10250 + t10341;
  t10379 = t776*t10353;
  t10380 = 0.032875*t833;
  t10383 = t582*t10330;
  t10394 = t10380 + t10383;
  t10398 = -1.*t10394*t893;
  t10400 = 0. + t10379 + t10398;
  t10469 = t1125*t10239;
  t10472 = -1.*t2175*t10400;
  t7741 = t5090 + t5345;
  t10463 = t1125*t10030;
  t10468 = 0. + t10463;
  t10427 = t10239*t2175;
  t10438 = t1125*t10400;
  t10443 = 0. + t10427 + t10438;
  t10096 = -1.*t2175*t10030;
  t10168 = 0. + t10096;
  t10490 = 0. + t10469 + t10472;
  t10474 = t10469 + t10472;
  t9928 = t5087*t2175;
  t9939 = t1125*t5332;
  t9941 = 0. + t9928 + t9939;
  t10241 = -1.*t10239*t2175;
  t10406 = -1.*t1125*t10400;
  t10409 = t10241 + t10406;
  t10533 = t776*t10394;
  t10534 = t10353*t893;
  t10535 = 0. + t10533 + t10534;
  t7750 = t5953 + t6035;
  t10526 = t776*t9968;
  t10527 = t9945*t893;
  t10529 = 0. + t10526 + t10527;
  t10595 = t5950*t2175;
  t10598 = t1125*t6033;
  t10601 = 0. + t10595 + t10598;
  t10725 = -1.*t582*t739*t776;
  t10743 = -1.*t739*t833*t893;
  t10746 = t10725 + t10743;
  t10760 = t582*t776*t1248;
  t10762 = t833*t1248*t893;
  t10764 = t10760 + t10762;
  t10787 = -1.*t776*t4974;
  t10793 = -1.*t5015*t893;
  t10796 = t10787 + t10793;
  t10807 = -1.*t776*t5809;
  t10811 = -1.*t5848*t893;
  t10813 = t10807 + t10811;
  t10868 = t5106 + t5326;
  t10918 = t5985 + t6031;
  t8892 = -1.*t8837*t8865;
  t11069 = -1.*t776*t8686;
  t11075 = -1.*t8658*t893;
  t11076 = t11069 + t11075;
  t9023 = t1021*t8865;
  t9763 = t8837*t8865;
  t11085 = t776*t833;
  t11087 = -1.*t582*t893;
  t11088 = t11085 + t11087;
  t9864 = -1.*t8865*t2883;
  t10536 = t10529*t10535;
  t11224 = -1.*t776*t10394;
  t11225 = -1.*t10353*t893;
  t11227 = t11224 + t11225;
  t11211 = t10379 + t10398;
  t11230 = t9947 + t10017;
  t10569 = -1.*t10535*t5035;
  t10652 = -1.*t10529*t10535;
  t11213 = -1.*t776*t9968;
  t11217 = -1.*t9945*t893;
  t11221 = t11213 + t11217;
  t10691 = t10535*t5885;
  t11094 = -1.*t8837*t8689;
  t11101 = -1.*t8316*t8865;
  t8906 = -1.*t1125*t8316*t8781;
  t8949 = t2175*t8316*t8948;
  t8975 = t8892 + t8906 + t8949;
  t11068 = t1021*t8689;
  t11079 = t2306*t8865;
  t9268 = t8303*t8781;
  t9448 = t2467*t8948;
  t9494 = t9023 + t9268 + t9448;
  t11161 = t8837*t8689;
  t11334 = Power(t1125,2);
  t11338 = Power(t2175,2);
  t11166 = t8316*t8865;
  t9774 = t1125*t8316*t8781;
  t9782 = -1.*t2175*t8316*t8948;
  t9783 = t9763 + t9774 + t9782;
  t11187 = -1.*t8865*t3085;
  t11194 = -1.*t8689*t2883;
  t9865 = -1.*t8781*t9584;
  t9867 = -1.*t8948*t3329;
  t9883 = t9864 + t9865 + t9867;
  t11212 = t10529*t11211;
  t11231 = t11230*t10535;
  t10538 = t10468*t10443;
  t10541 = t10168*t10490;
  t10542 = t10536 + t10538 + t10541;
  t11236 = -1.*t10535*t10868;
  t11242 = -1.*t11211*t5035;
  t10573 = -1.*t10443*t9941;
  t10577 = -1.*t10490*t5353;
  t10579 = t10569 + t10573 + t10577;
  t11269 = -1.*t10529*t11211;
  t11279 = -1.*t11230*t10535;
  t10656 = -1.*t10468*t10443;
  t10657 = -1.*t10168*t10490;
  t10660 = t10652 + t10656 + t10657;
  t11283 = t10535*t10918;
  t11289 = t11211*t5885;
  t10692 = t10443*t10601;
  t10693 = t10490*t6068;
  t10704 = t10691 + t10692 + t10693;
  t11530 = 0.053565*t582;
  t11531 = -1.*t833*t8587;
  t11548 = t11530 + t11531;
  t11574 = 0.032875*t582;
  t11575 = -1.*t833*t10330;
  t11576 = t11574 + t11575;
  t11619 = t582*t776*t4936;
  t11620 = t833*t4936*t893;
  t11622 = t11619 + t11620;
  t11625 = t582*t776*t5087;
  t11626 = t833*t5087*t893;
  t11629 = t11625 + t11626;
  t11643 = -1.*t739*t776*t833;
  t11644 = t582*t739*t893;
  t11648 = t11643 + t11644;
  t11662 = t776*t833*t1248;
  t11667 = -1.*t582*t1248*t893;
  t11668 = t11662 + t11667;
  t11678 = -1.*t776*t833*t4936;
  t11679 = t582*t4936*t893;
  t11682 = t11678 + t11679;
  t11695 = -1.*t776*t833*t5087;
  t11697 = t582*t5087*t893;
  t11705 = t11695 + t11697;
  t11048 = -1.*t8316*t8689;
  t11049 = t11048 + t8892;
  t11760 = t776*t11548;
  t11764 = t8686*t893;
  t11765 = t11760 + t11764;
  t11770 = -1.*t11548*t893;
  t11771 = t8854 + t11770;
  t11788 = -1.*t582*t776;
  t11790 = -1.*t833*t893;
  t11792 = t11788 + t11790;
  t11116 = t8439*t1248;
  t11118 = t2306*t8689;
  t11123 = t11116 + t11118 + t9023;
  t11146 = t8316*t8689;
  t11151 = t11146 + t9763;
  t11174 = -1.*t739*t8439;
  t11177 = -1.*t8689*t3085;
  t11179 = t11174 + t11177 + t9864;
  t11205 = t10030*t10400;
  t11206 = 0. + t11205 + t10536;
  t11855 = -1.*t11576*t893;
  t11856 = t10533 + t11855;
  t11843 = t776*t11576;
  t11847 = t10394*t893;
  t11851 = t11843 + t11847;
  t11858 = -1.*t582*t776;
  t11860 = t11858 + t11790;
  t11252 = -1.*t10239*t5087;
  t11253 = -1.*t10400*t5332;
  t11256 = t11252 + t11253 + t10569;
  t11264 = -1.*t10030*t10400;
  t11265 = 0. + t11264 + t10652;
  t11310 = t10239*t5950;
  t11312 = t10400*t6033;
  t11313 = t11310 + t11312 + t10691;
  t11785 = -1.*t8837*t11765;
  t11793 = -1.*t11792*t8865;
  t11768 = t1021*t11765;
  t11779 = t11648*t8865;
  t11810 = t8837*t11765;
  t11815 = t11792*t8865;
  t11824 = -1.*t8865*t11668;
  t11827 = -1.*t11765*t2883;
  t11854 = t10529*t11851;
  t11861 = t11860*t10535;
  t11870 = -1.*t10535*t11682;
  t11874 = -1.*t11851*t5035;
  t11894 = -1.*t10529*t11851;
  t11897 = -1.*t11860*t10535;
  t11900 = t10535*t11705;
  t11908 = t11851*t5885;
  t12230 = -0.194401*t739;
  t12231 = -1.*t739*t4816;
  t12235 = -1.*t1248*t4745;
  t12238 = t12230 + t12231 + t12235;
  t12130 = t5063 + t5073;
  t12192 = t4906 + t4924;
  t12161 = -1.*t739*t4430;
  t12165 = t1248*t4740;
  t12166 = t12161 + t12165;
  t12377 = t776*t833*t12192;
  t12379 = -1.*t582*t12192*t893;
  t12391 = t12377 + t12379;
  t12406 = t776*t833*t12166;
  t12409 = -1.*t582*t12166*t893;
  t12411 = t12406 + t12409;
  t12458 = -1.*t1125*t1248;
  t12459 = -1.*t2175*t11648;
  t12467 = t12458 + t12459;
  t6301 = t1077*t2883;
  t6339 = -1.*t514*t3329;
  t6427 = t6301 + t6339;
  t12507 = t582*t776*t12192;
  t12509 = t833*t12192*t893;
  t12513 = t12507 + t12509;
  t12521 = t1125*t12130;
  t12525 = -1.*t2175*t12391;
  t12527 = t12521 + t12525;
  t12538 = t582*t776*t12166;
  t12541 = t833*t12166*t893;
  t12544 = t12538 + t12541;
  t12548 = t1125*t12192;
  t12551 = -1.*t2175*t12411;
  t12554 = t12548 + t12551;
  t12612 = 0.04*t739;
  t12614 = t12612 + t8584;
  t12615 = t776*t833*t12614;
  t12619 = -1.*t582*t12614*t893;
  t12620 = t12615 + t12619;
  t12622 = t582*t776*t12614;
  t12624 = t833*t12614*t893;
  t12629 = t12622 + t12624;
  t12685 = t776*t833*t12238;
  t12687 = -1.*t582*t12238*t893;
  t12688 = t12685 + t12687;
  t12691 = t582*t776*t12238;
  t12693 = t833*t12238*t893;
  t12694 = t12691 + t12693;
  t12704 = t10271 + t10317 + t10321;
  t12631 = -1.*t8837*t12629;
  t12646 = t1021*t12629;
  t12650 = t8865*t2883;
  t12769 = t8587*t2175;
  t12777 = t1125*t12620;
  t12796 = t12769 + t12777;
  t12807 = t1125*t8587;
  t12816 = -1.*t2175*t12620;
  t12817 = t12807 + t12816;
  t12347 = t1125*t11648;
  t12349 = t7121 + t12347;
  t12662 = t8837*t12629;
  t12669 = -1.*t10746*t8865;
  t12671 = -1.*t12629*t2883;
  t12401 = t12192*t2175;
  t12413 = t1125*t12411;
  t12415 = t12401 + t12413;
  t12695 = t10529*t12694;
  t12712 = -1.*t10535*t12544;
  t12719 = -1.*t12694*t5035;
  t12990 = t12704*t2175;
  t12992 = t1125*t12688;
  t13000 = t12990 + t12992;
  t13004 = t1125*t12704;
  t13005 = -1.*t2175*t12688;
  t13006 = t13004 + t13005;
  t12373 = t12130*t2175;
  t12394 = t1125*t12391;
  t12396 = t12373 + t12394;
  t12728 = -1.*t10529*t12694;
  t12748 = t10535*t12513;
  t12753 = t12694*t5885;
  t13108 = -0.16*t4430;
  t13114 = t13108 + t4741;
  t13092 = 0.020000000000000018*t4430;
  t13093 = 0.16*t4740;
  t13100 = t13092 + t13093;
  t13079 = 0.194401*t4430;
  t13080 = t4430*t4816;
  t13104 = t4430*t13100;
  t13106 = -1.*t4745*t4740;
  t13129 = t13114*t4740;
  t13130 = t13079 + t13080 + t13104 + t13106 + t13129;
  t13135 = -1.*t4430*t13114;
  t13144 = t13100*t4740;
  t13145 = t4749 + t13135 + t4750 + t4822 + t13144;
  t12135 = -0.11459*t12130;
  t12183 = -0.081715*t12166;
  t12189 = t12135 + t12183;
  t12191 = -1.*t12189*t4890;
  t12193 = -0.032875*t12192*t5766;
  t12257 = -1.*t9968*t10394;
  t12263 = -1.*t9945*t10353;
  t12265 = 0. + t12257 + t12263;
  t12277 = t9968*t10394;
  t12282 = t9945*t10353;
  t12293 = 0. + t12277 + t12282;
  t13271 = -1.*t1248*t13114;
  t13273 = t739*t13100;
  t13275 = t13271 + t13273;
  t12269 = t12265*t12130;
  t12297 = t12293*t12192;
  t12400 = -1.*t5766*t12396;
  t12416 = -1.*t4890*t12415;
  t12519 = t514*t12513;
  t12531 = t1077*t12527;
  t12533 = t12519 + t12531;
  t12534 = -1.*t5766*t12533;
  t12545 = t514*t12544;
  t12558 = t1077*t12554;
  t12561 = t12545 + t12558;
  t12563 = -1.*t4890*t12561;
  t12575 = t1077*t12513;
  t12579 = -1.*t514*t12527;
  t12581 = t12575 + t12579;
  t12584 = -1.*t5766*t12581;
  t12588 = t1077*t12544;
  t12598 = -1.*t514*t12554;
  t12599 = t12588 + t12598;
  t12600 = -1.*t4890*t12599;
  t6722 = t1077*t5035;
  t6764 = -1.*t514*t5353;
  t6993 = t1077*t5885;
  t7003 = -1.*t514*t6068;
  t12683 = t12544*t11206;
  t12702 = -1.*t10239*t12192;
  t12710 = -1.*t10400*t12411;
  t13458 = t776*t833*t13275;
  t13459 = -1.*t582*t13275*t893;
  t13462 = t13458 + t13459;
  t13465 = t582*t776*t13275;
  t13470 = t833*t13275*t893;
  t13471 = t13465 + t13470;
  t12726 = t12513*t11265;
  t13483 = t739*t13114;
  t13484 = t1248*t13100;
  t13489 = t13483 + t13484;
  t12739 = t10239*t12130;
  t12743 = t10400*t12391;
  t12987 = t12415*t10542;
  t13474 = t10529*t13471;
  t13505 = -1.*t13471*t5035;
  t13017 = -1.*t10443*t12415;
  t13018 = -1.*t10490*t12554;
  t13598 = t13489*t2175;
  t13604 = t1125*t13462;
  t13606 = t13598 + t13604;
  t13613 = t1125*t13489;
  t13616 = -1.*t2175*t13462;
  t13625 = t13613 + t13616;
  t13035 = t12396*t10660;
  t13535 = -1.*t10529*t13471;
  t13544 = t13471*t5885;
  t13049 = t10443*t12396;
  t13051 = t10490*t12527;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.06108*(-1.*t1077*t2467 - 1.*t1021*t514) + 0.06108*(-1.*t1077*t3329 - 1.*t2883*t514) - 1.*t4890*(-1.*t5035*t514 - 1.*t1077*t5353) - 1.*t5766*(-1.*t514*t5885 - 1.*t1077*t6068))*var2[1] - 0.5*(-0.06108*(t1021*t1077 - 1.*t2467*t514) + 0.06108*t6427 - 1.*t4890*(t6722 + t6764) - 1.*t5766*(t6993 + t7003))*var2[2])*var2[13];
  p_output1[4]=(-0.5*(-0.06108*t2467 + 0.06108*t3329 - 1.*t4890*t7741 - 1.*t5766*t7750)*var2[0] - 0.5*(0.06108*t514*t7156 - 0.06108*t514*t7234 + t4890*t514*t7320 + t514*t5766*t7397)*var2[1] - 0.5*(-0.06108*t1077*t7156 + 0.06108*t1077*t7234 - 1.*t1077*t4890*t7320 - 1.*t1077*t5766*t7397)*var2[2] - 0.5*(-1.*t4890*(-1.*t10030*t10704*t2175 + t10601*(-1.*t10168*t10409 - 1.*t10468*t10474 + t10030*t10490*t1125 + t10030*t10443*t2175) + t10660*t7750 + t10468*(t10474*t10601 + t10409*t6068 + t10490*t7397 + t10443*t7750)) + 0.06108*(t8303*(t2175*t8316*t8739 + t2175*t8316*t8781) + t1125*t8316*(t2467*t8739 + t2467*t8781 + t7156*t8948 + t8303*t8948) + t2467*t8975 - 1.*t2175*t8316*t9494) - 0.06108*((-1.*t2175*t8316*t8739 - 1.*t2175*t8316*t8781)*t9584 + t1125*t8316*(-1.*t3329*t8739 - 1.*t3329*t8781 - 1.*t7234*t8948 - 1.*t8948*t9584) + t3329*t9783 - 1.*t2175*t8316*t9883) - 1.*t5766*(-1.*t10030*t10579*t2175 + t10542*t7741 + (t10168*t10409 + t10468*t10474 - 1.*t10030*t10490*t1125 - 1.*t10030*t10443*t2175)*t9941 + t10468*(-1.*t10409*t5353 - 1.*t10490*t7320 - 1.*t10443*t7741 - 1.*t10474*t9941)))*var2[3])*var2[13];
  p_output1[5]=(-0.5*(-0.06108*t10746*t1125 + 0.06108*t10764*t1125 - 1.*t10796*t1125*t4890 - 1.*t10813*t1125*t5766)*var2[0] - 0.5*(-0.06108*(t1077*t2306 + t10746*t2175*t514) + 0.06108*(t1077*t3085 + t10764*t2175*t514) - 1.*t4890*(t1077*t10868 + t10796*t2175*t514) - 1.*(t1077*t10918 + t10813*t2175*t514)*t5766)*var2[1] - 0.5*(-1.*t4890*(-1.*t1077*t10796*t2175 + t10868*t514) - 0.06108*(-1.*t10746*t1077*t2175 + t2306*t514) + 0.06108*(-1.*t10764*t1077*t2175 + t3085*t514) - 1.*(-1.*t1077*t10813*t2175 + t10918*t514)*t5766)*var2[2] - 0.5*(-1.*t4890*(t10660*t10813*t1125 + t10704*t11221*t1125 + t10601*(-1.*t10443*t11221*t1125 - 1.*t10468*t11227*t1125 + t11269 + t11279 + t10490*t11221*t2175 + t10168*t11227*t2175) + t10468*(t10443*t10813*t1125 + t10601*t11227*t1125 + t11283 + t11289 - 1.*t10490*t10813*t2175 - 1.*t11227*t2175*t6068)) + 0.06108*(t1125*t8316*(t11068 + t11079 - 1.*t11076*t2175*t2467 + t11076*t1125*t8303 + t10746*t1125*t8781 - 1.*t10746*t2175*t8948) + t8303*(t11094 + t11101 - 1.*t11076*t11334*t8316 - 1.*t11076*t11338*t8316 - 1.*t11088*t1125*t8781 + t11088*t2175*t8948) + t10746*t1125*t8975 + t11088*t1125*t9494) - 0.06108*((t11161 + t11166 + t11076*t11334*t8316 + t11076*t11338*t8316 + t11088*t1125*t8781 - 1.*t11088*t2175*t8948)*t9584 + t1125*t8316*(t11187 + t11194 + t11076*t2175*t3329 - 1.*t10764*t1125*t8781 + t10764*t2175*t8948 - 1.*t11076*t1125*t9584) + t10764*t1125*t9783 + t11088*t1125*t9883) - 1.*t5766*(t10542*t10796*t1125 + t10579*t11221*t1125 + (t11212 + t11231 + t10443*t11221*t1125 + t10468*t11227*t1125 - 1.*t10490*t11221*t2175 - 1.*t10168*t11227*t2175)*t9941 + t10468*(t11236 + t11242 - 1.*t10443*t10796*t1125 + t10490*t10796*t2175 + t11227*t2175*t5353 - 1.*t11227*t1125*t9941)))*var2[3] - 0.5*(-1.*(t10868*t11206 + t11230*t11256 + (t11212 + t10400*t11221 + t10030*t11227 + t11231)*t5035 + t10529*(-1.*t10400*t10796 + t11236 + t11242 - 1.*t11227*t5332))*t5766 - 1.*t4890*(t10918*t11265 + t11230*t11313 + (-1.*t10400*t11221 - 1.*t10030*t11227 + t11269 + t11279)*t5885 + t10529*(t10400*t10813 + t11283 + t11289 + t11227*t6033)) + 0.06108*(t11049*t2306 + t11123*t8316 + t1021*(t11094 + t11101 - 1.*t11076*t8316 - 1.*t11088*t8689) + (t11068 + t11079 + t11076*t2306 + t10746*t8689)*t8837) - 0.06108*(t11151*t3085 + t11179*t8316 + t2883*(t11161 + t11166 + t11076*t8316 + t11088*t8689) + (t11187 + t11194 - 1.*t11076*t3085 - 1.*t10764*t8689)*t8837))*var2[4])*var2[13];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=(-0.5*(-0.06108*t1021*t1125 + 0.06108*t1125*t2883 - 1.*t1125*t11622*t4890 - 1.*t1125*t11629*t5766)*var2[0] - 0.5*(-0.06108*(t1077*t11648 + t1021*t2175*t514) - 1.*t4890*(t1077*t11682 + t11622*t2175*t514) + 0.06108*(t1077*t11668 + t2175*t2883*t514) - 1.*(t1077*t11705 + t11629*t2175*t514)*t5766)*var2[1] - 0.5*(-0.06108*(-1.*t1021*t1077*t2175 + t11648*t514) + 0.06108*(-1.*t1077*t2175*t2883 + t11668*t514) - 1.*t4890*(-1.*t1077*t11622*t2175 + t11682*t514) - 1.*(-1.*t1077*t11629*t2175 + t11705*t514)*t5766)*var2[2] - 0.5*(-1.*t4890*(t10660*t1125*t11629 + t10468*(t10443*t1125*t11629 + t10601*t1125*t11856 + t11900 + t11908 - 1.*t10490*t11629*t2175 - 1.*t11856*t2175*t6068) + t10704*t1125*t8837 + t10601*(-1.*t10468*t1125*t11856 + t11894 + t11897 + t10168*t11856*t2175 - 1.*t10443*t1125*t8837 + t10490*t2175*t8837)) + 0.06108*(t1125*t8316*(t11768 + t11779 - 1.*t11771*t2175*t2467 + t1125*t11771*t8303 + t1021*t1125*t8781 - 1.*t1021*t2175*t8948) + t8303*(t11785 + t11793 - 1.*t11334*t11771*t8316 - 1.*t11338*t11771*t8316 - 1.*t1125*t8781*t8837 + t2175*t8837*t8948) + t1021*t1125*t8975 + t1125*t8837*t9494) - 0.06108*((t11810 + t11815 + t11334*t11771*t8316 + t11338*t11771*t8316 + t1125*t8781*t8837 - 1.*t2175*t8837*t8948)*t9584 + t1125*t8316*(t11824 + t11827 + t11771*t2175*t3329 - 1.*t1125*t2883*t8781 + t2175*t2883*t8948 - 1.*t1125*t11771*t9584) + t1125*t2883*t9783 + t1125*t8837*t9883) - 1.*t5766*(t10542*t1125*t11622 + t10579*t1125*t8837 + (t11854 + t10468*t1125*t11856 + t11861 - 1.*t10168*t11856*t2175 + t10443*t1125*t8837 - 1.*t10490*t2175*t8837)*t9941 + t10468*(-1.*t10443*t1125*t11622 + t11870 + t11874 + t10490*t11622*t2175 + t11856*t2175*t5353 - 1.*t1125*t11856*t9941)))*var2[3] - 0.5*(0.06108*(t11049*t11648 + t11123*t11792 + t1021*(t11094 + t11785 + t11793 - 1.*t11771*t8316) + (t11068 + t11768 + t11779 + t11771*t2306)*t8837) - 0.06108*(t11151*t11668 + t11179*t11792 + t2883*(t11161 + t11810 + t11815 + t11771*t8316) + (t11194 + t11824 + t11827 - 1.*t11771*t3085)*t8837) - 1.*t4890*(t11265*t11705 + t11313*t11860 + t10529*(t10400*t11629 + t11900 + t11908 + t11856*t6033) + t5885*(-1.*t10030*t11856 + t11894 + t11897 - 1.*t10400*t8837)) - 1.*t5766*(t11206*t11682 + t11256*t11860 + t10529*(-1.*t10400*t11622 + t11870 + t11874 - 1.*t11856*t5332) + t5035*(t11854 + t10030*t11856 + t11861 + t10400*t8837)))*var2[4] - 0.5*(-0.06108*t739*(-1.*t11548*t833 - 1.*t833*t8658) + 0.06108*t1248*(t11548*t833 + t833*t8658) - 1.*t4890*t5950*(t10394*t582 + t10353*t833 - 1.*t10394*t9945 - 1.*t11576*t9968) - 1.*t5087*t5766*(-1.*t10394*t582 - 1.*t10353*t833 + t10394*t9945 + t11576*t9968))*var2[5])*var2[13];
  p_output1[13]=(-0.5*(0.06108*t12349 + t12400 + t12416 - 0.06108*t9584)*var2[0] - 0.5*(t12584 + t12600 + 0.06108*(t10746*t1077 - 1.*t12467*t514) - 0.06108*t6427)*var2[1] - 0.5*(t12534 + t12563 + 0.06108*(t1077*t12467 + t10746*t514) - 0.06108*(t1077*t3329 + t2883*t514))*var2[2] - 0.5*(-1.*t4890*(t10601*(t12728 - 1.*t10468*t13000 - 1.*t10168*t13006) + t13035 + t10468*(t12748 + t12753 + t10601*t13000 + t13049 + t13051 + t13006*t6068)) + 0.06108*(t8303*(t12631 - 1.*t1125*t12796*t8316 + t12817*t2175*t8316) + t8975*t9584 + t1125*t8316*(t12646 + t12650 + t12817*t2467 + t12796*t8303 + t3329*t8948 + t8781*t9584)) - 0.06108*((t12662 + t1125*t12796*t8316 - 1.*t12817*t2175*t8316)*t9584 + t1125*t8316*(t12669 + t12671 - 1.*t12817*t3329 - 1.*t12349*t8781 - 1.*t12467*t8948 - 1.*t12796*t9584) + t12349*t9783) - 1.*t5766*(t12987 + (t12695 + t10468*t13000 + t10168*t13006)*t9941 + t10468*(t12712 + t12719 + t13017 + t13018 - 1.*t13006*t5353 - 1.*t13000*t9941)))*var2[3] - 0.5*(-1.*(t12683 + (t10030*t12688 + t12695)*t5035 + t10529*(t12702 + t12710 + t12712 + t12719 - 1.*t12704*t5087 - 1.*t12688*t5332))*t5766 - 1.*t4890*(t12726 + (-1.*t10030*t12688 + t12728)*t5885 + t10529*(t12739 + t12743 + t12748 + t12753 + t12704*t5950 + t12688*t6033)) - 0.06108*(t10746*t11151 + t2883*(t12662 + t12620*t8316) + (t11116 + t12669 + t12671 - 1.*t12620*t3085 - 1.*t739*t8587 - 1.*t11648*t8689)*t8837) + 0.06108*(t11049*t2883 + t1021*(t12631 - 1.*t12620*t8316) + (t12646 + t12650 + t12620*t2306 + t739*t8439 + t1248*t8587 + t3085*t8689)*t8837))*var2[4] - 0.5*(0.06108*t1248*(t582*t8658 - 1.*t833*t8686) + 0.06108*t739*(-1.*t582*t8658 + t833*t8686) - 1.*t4890*(t12269 + t5950*(-1.*t12238*t833*t9945 - 1.*t12238*t582*t9968)) - 1.*t5766*(t12297 + t5087*(t12238*t833*t9945 + t12238*t582*t9968)))*var2[5] - 0.5*(t12191 + t12193 + 0.0032717502*t1248 - 0.0032717502*t739)*var2[12])*var2[13];
  p_output1[14]=var2[13]*(-0.5*(t12400 + t12416 - 0.241*t10601*t13145 - 0.241*t13130*t9941)*var2[0] - 0.5*(t12584 + t12600 - 0.241*t13130*(0. + t6722 + t6764) - 0.241*t13145*(0. + t6993 + t7003))*var2[1] - 0.5*(t12534 + t12563 - 0.241*t13130*(0. + t5035*t514 + t1077*t5353) - 0.241*t13145*(0. + t514*t5885 + t1077*t6068))*var2[2] - 0.5*(-0.241*(t10601*t10660 + t10468*t10704)*t13130 - 1.*t4890*(t13035 + t10601*(t13535 - 1.*t10468*t13606 - 1.*t10168*t13625) + t10468*(t12748 + t13049 + t13051 + t13544 + t10601*t13606 + t13625*t6068)) - 0.241*t13145*(t10468*t10579 + t10542*t9941) - 1.*t5766*(t12987 + (t13474 + t10468*t13606 + t10168*t13625)*t9941 + t10468*(t12712 + t13017 + t13018 + t13505 - 1.*t13625*t5353 - 1.*t13606*t9941)))*var2[3] - 0.5*(-0.241*t13145*(t10529*t11256 + t11206*t5035) - 1.*(t12683 + (t10030*t13462 + t13474)*t5035 + t10529*(t12702 + t12710 + t12712 + t13505 - 1.*t13489*t5087 - 1.*t13462*t5332))*t5766 - 0.241*t13130*(t10529*t11313 + t11265*t5885) - 1.*t4890*(t12726 + (-1.*t10030*t13462 + t13535)*t5885 + t10529*(t12739 + t12743 + t12748 + t13544 + t13489*t5950 + t13462*t6033)))*var2[4] - 0.5*(-0.241*t13145*(0. + t12293*t5087) - 0.241*t13130*(0. + t12265*t5950) - 1.*t4890*(t12269 + t5950*(-1.*t13275*t833*t9945 - 1.*t13275*t582*t9968)) - 1.*t5766*(t12297 + t5087*(t13275*t833*t9945 + t13275*t582*t9968)))*var2[5] - 0.5*(t12191 + t12193 - 0.241*t13145*(0. + 0.032875*t5087) - 0.241*t13130*(0. - 0.081715*t4936 - 0.11459*t5950))*var2[12] - 0.5*(-0.241*t13130*t4843 - 1.*t13130*t4890 - 0.241*t13145*t5693 - 1.*t13145*t5766)*var2[13] - 0.5*(0.03856*t13130 - 0.004820000000000004*t13145)*var2[14]);
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec14_plane.hh"

namespace SymFunction
{

void Ce3_vec14_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
