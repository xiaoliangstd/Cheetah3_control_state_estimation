/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:03:02 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t5589;
  double t6815;
  double t6287;
  double t6310;
  double t7507;
  double t649;
  double t6752;
  double t7682;
  double t8387;
  double t8633;
  double t8809;
  double t8810;
  double t8821;
  double t8863;
  double t18104;
  double t18295;
  double t18198;
  double t19566;
  double t19621;
  double t8823;
  double t8945;
  double t9194;
  double t9195;
  double t9201;
  double t9217;
  double t12637;
  double t15665;
  double t16348;
  double t17271;
  double t19840;
  double t19730;
  double t18179;
  double t18488;
  double t19301;
  double t19341;
  double t19377;
  double t19397;
  double t19437;
  double t19546;
  double t19547;
  double t19549;
  double t20020;
  double t19998;
  double t19615;
  double t19624;
  double t19663;
  double t19666;
  double t19668;
  double t19673;
  double t19675;
  double t19696;
  double t19697;
  double t19704;
  double t20234;
  double t20114;
  double t19809;
  double t19819;
  double t19827;
  double t19846;
  double t19877;
  double t19915;
  double t19942;
  double t20485;
  double t20510;
  double t19972;
  double t19974;
  double t19975;
  double t20004;
  double t20010;
  double t20013;
  double t20023;
  double t20024;
  double t20025;
  double t20026;
  double t20687;
  double t20706;
  double t20066;
  double t20089;
  double t20104;
  double t20122;
  double t20129;
  double t20189;
  double t20239;
  double t20249;
  double t20278;
  double t20283;
  double t20909;
  double t20961;
  double t20374;
  double t20375;
  double t20381;
  double t8861;
  double t23739;
  double t24511;
  double t24389;
  double t24390;
  double t24429;
  double t24536;
  double t24659;
  double t24690;
  double t24698;
  double t24765;
  double t24833;
  double t24916;
  double t25023;
  double t25629;
  double t25086;
  double t25104;
  double t25159;
  double t25642;
  double t25745;
  double t26158;
  double t26265;
  double t26337;
  double t26343;
  double t26374;
  double t26750;
  double t26831;
  double t27690;
  double t27502;
  double t27508;
  double t27509;
  double t27514;
  double t27516;
  double t27611;
  double t27631;
  double t27636;
  double t27695;
  double t27696;
  double t27711;
  double t27714;
  double t27717;
  double t27755;
  double t27759;
  double t27774;
  double t27810;
  double t27811;
  double t27817;
  double t27821;
  double t27822;
  double t27837;
  double t27844;
  double t27848;
  double t27866;
  double t27872;
  double t20505;
  double t20507;
  double t20525;
  double t20527;
  double t27877;
  double t27971;
  double t28065;
  double t20530;
  double t20544;
  double t20546;
  double t20547;
  double t20549;
  double t28073;
  double t28081;
  double t28090;
  double t28115;
  double t28123;
  double t20694;
  double t20703;
  double t20714;
  double t20721;
  double t28124;
  double t28128;
  double t28319;
  double t20727;
  double t20733;
  double t20734;
  double t20735;
  double t20736;
  double t28483;
  double t28496;
  double t28518;
  double t28565;
  double t28584;
  double t20913;
  double t20919;
  double t21080;
  double t21122;
  double t28585;
  double t28595;
  double t28607;
  double t21201;
  double t21312;
  double t21451;
  double t21481;
  double t21549;
  double t28618;
  double t28697;
  double t28705;
  double t27378;
  double t29508;
  double t29523;
  double t29568;
  double t29612;
  double t29637;
  double t29655;
  double t29668;
  double t29677;
  double t29711;
  double t29723;
  double t29763;
  double t29807;
  double t29877;
  double t26816;
  double t26819;
  double t27039;
  double t27055;
  double t29903;
  double t29960;
  double t29962;
  double t27077;
  double t27082;
  double t27083;
  double t27091;
  double t27100;
  double t30281;
  double t30289;
  double t30291;
  double t30307;
  double t30309;
  double t30315;
  double t30321;
  double t30465;
  double t30295;
  double t30332;
  double t30504;
  double t30507;
  double t30509;
  double t30513;
  double t30515;
  double t30519;
  double t30522;
  double t30523;
  double t30536;
  double t30538;
  double t30540;
  double t30545;
  double t30571;
  double t30587;
  double t30588;
  double t30589;
  double t30600;
  double t30601;
  double t30603;
  double t30638;
  double t30660;
  double t30669;
  double t30670;
  double t30673;
  double t30488;
  double t30901;
  double t30942;
  double t30943;
  double t30944;
  double t30948;
  double t30955;
  double t30958;
  double t30964;
  double t30966;
  double t31046;
  double t31053;
  double t31056;
  double t31114;
  double t31122;
  double t31139;
  double t31143;
  double t31149;
  double t31311;
  double t31317;
  double t31318;
  double t31309;
  double t31319;
  double t31348;
  double t31349;
  double t31351;
  double t31325;
  double t31327;
  double t31342;
  double t31365;
  double t31426;
  double t31429;
  double t31430;
  double t31399;
  double t31469;
  double t31470;
  double t31471;
  double t31485;
  double t31486;
  double t31492;
  double t31494;
  double t31495;
  double t31544;
  double t31557;
  double t31562;
  double t31573;
  double t31574;
  double t31580;
  double t31582;
  double t31584;
  double t31657;
  double t31658;
  double t31662;
  double t31607;
  double t31619;
  double t31697;
  double t31698;
  double t31703;
  double t31691;
  double t31696;
  double t31722;
  double t31725;
  double t31726;
  double t31772;
  double t31773;
  double t31774;
  double t31775;
  double t31778;
  double t31781;
  double t31786;
  double t31788;
  double t31861;
  double t31864;
  double t31869;
  double t31832;
  double t31840;
  double t31901;
  double t31902;
  double t31908;
  double t31917;
  double t31918;
  double t31921;
  double t31922;
  double t31924;
  double t31993;
  double t31994;
  double t31995;
  double t32012;
  double t32013;
  double t32020;
  double t32022;
  double t32023;
  double t32076;
  double t32077;
  double t32083;
  double t32033;
  double t32047;
  t5589 = Sin(var1[3]);
  t6815 = Cos(var1[3]);
  t6287 = Cos(var1[5]);
  t6310 = Sin(var1[4]);
  t7507 = Sin(var1[5]);
  t649 = Cos(var1[4]);
  t6752 = t6287*t5589*t6310;
  t7682 = t6815*t7507;
  t8387 = t6752 + t7682;
  t8633 = t6815*t6287;
  t8809 = -1.*t5589*t6310*t7507;
  t8810 = t8633 + t8809;
  t8821 = Sin(var1[9]);
  t8863 = Cos(var1[9]);
  t18104 = Sin(var1[12]);
  t18295 = Cos(var1[12]);
  t18198 = -0.217782*t8387;
  t19566 = Sin(var1[15]);
  t19621 = Cos(var1[15]);
  t8823 = 0.0875*t649*t8821*t5589;
  t8945 = -1.*t8863;
  t9194 = 1. + t8945;
  t9195 = 0.0875*t9194*t8810;
  t9201 = -1.*t649*t8821*t5589;
  t9217 = t8863*t8810;
  t12637 = t9201 + t9217;
  t15665 = -1.*t8863*t649*t5589;
  t16348 = -1.*t8821*t8810;
  t17271 = t15665 + t16348;
  t19840 = Sin(var1[10]);
  t19730 = Cos(var1[10]);
  t18179 = -0.0875*t649*t18104*t5589;
  t18488 = -1.*t18295;
  t19301 = 1. + t18488;
  t19341 = -0.0875*t19301*t8810;
  t19377 = -1.*t649*t18104*t5589;
  t19397 = t18295*t8810;
  t19437 = t19377 + t19397;
  t19546 = -1.*t18295*t649*t5589;
  t19547 = -1.*t18104*t8810;
  t19549 = t19546 + t19547;
  t20020 = Sin(var1[13]);
  t19998 = Cos(var1[13]);
  t19615 = 0.0875*t649*t19566*t5589;
  t19624 = -1.*t19621;
  t19663 = 1. + t19624;
  t19666 = 0.0875*t19663*t8810;
  t19668 = -1.*t649*t19566*t5589;
  t19673 = t19621*t8810;
  t19675 = t19668 + t19673;
  t19696 = -1.*t19621*t649*t5589;
  t19697 = -1.*t19566*t8810;
  t19704 = t19696 + t19697;
  t20234 = Sin(var1[16]);
  t20114 = Cos(var1[16]);
  t19809 = -1.*t19730;
  t19819 = 1. + t19809;
  t19827 = 0.21935*t19819*t8387;
  t19846 = 0.21935*t19840*t17271;
  t19877 = t19840*t8387;
  t19915 = t19730*t17271;
  t19942 = t19877 + t19915;
  t20485 = Cos(var1[11]);
  t20510 = Sin(var1[11]);
  t19972 = t19730*t8387;
  t19974 = -1.*t19840*t17271;
  t19975 = t19972 + t19974;
  t20004 = -1.*t19998;
  t20010 = 1. + t20004;
  t20013 = -0.21935*t20010*t8387;
  t20023 = -0.21935*t20020*t19549;
  t20024 = t20020*t8387;
  t20025 = t19998*t19549;
  t20026 = t20024 + t20025;
  t20687 = Cos(var1[14]);
  t20706 = Sin(var1[14]);
  t20066 = t19998*t8387;
  t20089 = -1.*t20020*t19549;
  t20104 = t20066 + t20089;
  t20122 = -1.*t20114;
  t20129 = 1. + t20122;
  t20189 = -0.21935*t20129*t8387;
  t20239 = -0.21935*t20234*t19704;
  t20249 = t20234*t8387;
  t20278 = t20114*t19704;
  t20283 = t20249 + t20278;
  t20909 = Cos(var1[17]);
  t20961 = Sin(var1[17]);
  t20374 = t20114*t8387;
  t20375 = -1.*t20234*t19704;
  t20381 = t20374 + t20375;
  t8861 = 0.217782*t8387;
  t23739 = Cos(var1[6]);
  t24511 = Sin(var1[6]);
  t24389 = -1.*t23739;
  t24390 = 1. + t24389;
  t24429 = -0.0875*t24390*t8810;
  t24536 = -0.0875*t649*t5589*t24511;
  t24659 = t23739*t8810;
  t24690 = -1.*t649*t5589*t24511;
  t24698 = t24659 + t24690;
  t24765 = -1.*t649*t23739*t5589;
  t24833 = -1.*t8810*t24511;
  t24916 = t24765 + t24833;
  t25023 = Cos(var1[7]);
  t25629 = Sin(var1[7]);
  t25086 = -1.*t25023;
  t25104 = 1. + t25086;
  t25159 = 0.21935*t25104*t8387;
  t25642 = 0.21935*t24916*t25629;
  t25745 = t25023*t24916;
  t26158 = t8387*t25629;
  t26265 = t25745 + t26158;
  t26337 = t25023*t8387;
  t26343 = -1.*t24916*t25629;
  t26374 = t26337 + t26343;
  t26750 = Cos(var1[8]);
  t26831 = Sin(var1[8]);
  t27690 = 0.217782*t6815*t649*t6287;
  t27502 = 0.0875*t6815*t8821*t6310;
  t27508 = 0.0875*t9194*t6815*t649*t7507;
  t27509 = -1.*t6815*t8821*t6310;
  t27514 = t8863*t6815*t649*t7507;
  t27516 = t27509 + t27514;
  t27611 = -1.*t8863*t6815*t6310;
  t27631 = -1.*t6815*t649*t8821*t7507;
  t27636 = t27611 + t27631;
  t27695 = -0.0875*t6815*t18104*t6310;
  t27696 = -0.0875*t19301*t6815*t649*t7507;
  t27711 = -1.*t6815*t18104*t6310;
  t27714 = t18295*t6815*t649*t7507;
  t27717 = t27711 + t27714;
  t27755 = -1.*t18295*t6815*t6310;
  t27759 = -1.*t6815*t649*t18104*t7507;
  t27774 = t27755 + t27759;
  t27810 = 0.0875*t6815*t19566*t6310;
  t27811 = 0.0875*t19663*t6815*t649*t7507;
  t27817 = -1.*t6815*t19566*t6310;
  t27821 = t19621*t6815*t649*t7507;
  t27822 = t27817 + t27821;
  t27837 = -1.*t19621*t6815*t6310;
  t27844 = -1.*t6815*t649*t19566*t7507;
  t27848 = t27837 + t27844;
  t27866 = -0.21935*t19819*t6815*t649*t6287;
  t27872 = 0.21935*t19840*t27636;
  t20505 = -1. + t20485;
  t20507 = 0.25*t20505;
  t20525 = 0.21935*t20510;
  t20527 = t20507 + t20525;
  t27877 = -1.*t6815*t649*t6287*t19840;
  t27971 = t19730*t27636;
  t28065 = t27877 + t27971;
  t20530 = -1.*t20485;
  t20544 = 1. + t20530;
  t20546 = 0.21935*t20544;
  t20547 = 0.25*t20510;
  t20549 = t20546 + t20547;
  t28073 = -1.*t19730*t6815*t649*t6287;
  t28081 = -1.*t19840*t27636;
  t28090 = t28073 + t28081;
  t28115 = 0.21935*t20010*t6815*t649*t6287;
  t28123 = -0.21935*t20020*t27774;
  t20694 = -1. + t20687;
  t20703 = 0.25*t20694;
  t20714 = -0.21935*t20706;
  t20721 = t20703 + t20714;
  t28124 = -1.*t6815*t649*t6287*t20020;
  t28128 = t19998*t27774;
  t28319 = t28124 + t28128;
  t20727 = -1.*t20687;
  t20733 = 1. + t20727;
  t20734 = -0.21935*t20733;
  t20735 = 0.25*t20706;
  t20736 = t20734 + t20735;
  t28483 = -1.*t19998*t6815*t649*t6287;
  t28496 = -1.*t20020*t27774;
  t28518 = t28483 + t28496;
  t28565 = 0.21935*t20129*t6815*t649*t6287;
  t28584 = -0.21935*t20234*t27848;
  t20913 = -1. + t20909;
  t20919 = 0.25*t20913;
  t21080 = -0.21935*t20961;
  t21122 = t20919 + t21080;
  t28585 = -1.*t6815*t649*t6287*t20234;
  t28595 = t20114*t27848;
  t28607 = t28585 + t28595;
  t21201 = -1.*t20909;
  t21312 = 1. + t21201;
  t21451 = -0.21935*t21312;
  t21481 = 0.25*t20961;
  t21549 = t21451 + t21481;
  t28618 = -1.*t20114*t6815*t649*t6287;
  t28697 = -1.*t20234*t27848;
  t28705 = t28618 + t28697;
  t27378 = -0.217782*t6815*t649*t6287;
  t29508 = -0.0875*t6815*t649*t24390*t7507;
  t29523 = -0.0875*t6815*t6310*t24511;
  t29568 = t6815*t649*t23739*t7507;
  t29612 = -1.*t6815*t6310*t24511;
  t29637 = t29568 + t29612;
  t29655 = -1.*t6815*t23739*t6310;
  t29668 = -1.*t6815*t649*t7507*t24511;
  t29677 = t29655 + t29668;
  t29711 = -0.21935*t6815*t649*t6287*t25104;
  t29723 = 0.21935*t29677*t25629;
  t29763 = t25023*t29677;
  t29807 = -1.*t6815*t649*t6287*t25629;
  t29877 = t29763 + t29807;
  t26816 = -1. + t26750;
  t26819 = 0.25*t26816;
  t27039 = 0.21935*t26831;
  t27055 = t26819 + t27039;
  t29903 = -1.*t6815*t649*t6287*t25023;
  t29960 = -1.*t29677*t25629;
  t29962 = t29903 + t29960;
  t27077 = -1.*t26750;
  t27082 = 1. + t27077;
  t27083 = 0.21935*t27082;
  t27091 = 0.25*t26831;
  t27100 = t27083 + t27091;
  t30281 = t6815*t6287*t6310;
  t30289 = -1.*t5589*t7507;
  t30291 = t30281 + t30289;
  t30307 = t6287*t5589;
  t30309 = t6815*t6310*t7507;
  t30315 = t30307 + t30309;
  t30321 = -0.217782*t30315;
  t30465 = 0.0875*t9194*t30291;
  t30295 = -0.0875*t19301*t30291;
  t30332 = 0.0875*t19663*t30291;
  t30504 = -0.21935*t8821*t19840*t30291;
  t30507 = 0.21935*t19819*t30315;
  t30509 = t8821*t19840*t30291;
  t30513 = t19730*t30315;
  t30515 = t30509 + t30513;
  t30519 = -1.*t19730*t8821*t30291;
  t30522 = t19840*t30315;
  t30523 = t30519 + t30522;
  t30536 = 0.21935*t18104*t20020*t30291;
  t30538 = -0.21935*t20010*t30315;
  t30540 = t18104*t20020*t30291;
  t30545 = t19998*t30315;
  t30571 = t30540 + t30545;
  t30587 = -1.*t19998*t18104*t30291;
  t30588 = t20020*t30315;
  t30589 = t30587 + t30588;
  t30600 = 0.21935*t19566*t20234*t30291;
  t30601 = -0.21935*t20129*t30315;
  t30603 = t19566*t20234*t30291;
  t30638 = t20114*t30315;
  t30660 = t30603 + t30638;
  t30669 = -1.*t20114*t19566*t30291;
  t30670 = t20234*t30315;
  t30673 = t30669 + t30670;
  t30488 = 0.217782*t30315;
  t30901 = -0.0875*t24390*t30291;
  t30942 = 0.21935*t25104*t30315;
  t30943 = -0.21935*t30291*t24511*t25629;
  t30944 = -1.*t25023*t30291*t24511;
  t30948 = t30315*t25629;
  t30955 = t30944 + t30948;
  t30958 = t25023*t30315;
  t30964 = t30291*t24511*t25629;
  t30966 = t30958 + t30964;
  t31046 = 0.0875*t6815*t649*t23739;
  t31053 = -0.0875*t30315*t24511;
  t31056 = -1.*t23739*t30315;
  t31114 = -1.*t6815*t649*t24511;
  t31122 = t31056 + t31114;
  t31139 = t6815*t649*t23739;
  t31143 = -1.*t30315*t24511;
  t31149 = t31139 + t31143;
  t31311 = -1.*t6815*t6287*t6310;
  t31317 = t5589*t7507;
  t31318 = t31311 + t31317;
  t31309 = 0.21935*t25023*t31149;
  t31319 = 0.21935*t31318*t25629;
  t31348 = t25023*t31318;
  t31349 = -1.*t31149*t25629;
  t31351 = t31348 + t31349;
  t31325 = -1.*t25023*t31149;
  t31327 = -1.*t31318*t25629;
  t31342 = t31325 + t31327;
  t31365 = t26750*t31351;
  t31426 = t25023*t31149;
  t31429 = t31318*t25629;
  t31430 = t31426 + t31429;
  t31399 = -1.*t31351*t26831;
  t31469 = -0.0875*t8863*t6815*t649;
  t31470 = 0.0875*t8821*t30315;
  t31471 = -1.*t6815*t649*t8821;
  t31485 = -1.*t8863*t30315;
  t31486 = t31471 + t31485;
  t31492 = t8863*t6815*t649;
  t31494 = -1.*t8821*t30315;
  t31495 = t31492 + t31494;
  t31544 = 0.21935*t19840*t31318;
  t31557 = 0.21935*t19730*t31495;
  t31562 = -1.*t19840*t31318;
  t31573 = -1.*t19730*t31495;
  t31574 = t31562 + t31573;
  t31580 = t19730*t31318;
  t31582 = -1.*t19840*t31495;
  t31584 = t31580 + t31582;
  t31657 = t19840*t31318;
  t31658 = t19730*t31495;
  t31662 = t31657 + t31658;
  t31607 = t20485*t31584;
  t31619 = -1.*t20510*t31584;
  t31697 = -1.*t6815*t649*t18104;
  t31698 = -1.*t18295*t30315;
  t31703 = t31697 + t31698;
  t31691 = 0.0875*t18295*t6815*t649;
  t31696 = -0.0875*t18104*t30315;
  t31722 = t18295*t6815*t649;
  t31725 = -1.*t18104*t30315;
  t31726 = t31722 + t31725;
  t31772 = -0.21935*t20020*t31318;
  t31773 = -0.21935*t19998*t31726;
  t31774 = -1.*t20020*t31318;
  t31775 = -1.*t19998*t31726;
  t31778 = t31774 + t31775;
  t31781 = t19998*t31318;
  t31786 = -1.*t20020*t31726;
  t31788 = t31781 + t31786;
  t31861 = t20020*t31318;
  t31864 = t19998*t31726;
  t31869 = t31861 + t31864;
  t31832 = t20687*t31788;
  t31840 = -1.*t20706*t31788;
  t31901 = -0.0875*t19621*t6815*t649;
  t31902 = 0.0875*t19566*t30315;
  t31908 = -1.*t6815*t649*t19566;
  t31917 = -1.*t19621*t30315;
  t31918 = t31908 + t31917;
  t31921 = t19621*t6815*t649;
  t31922 = -1.*t19566*t30315;
  t31924 = t31921 + t31922;
  t31993 = -0.21935*t20234*t31318;
  t31994 = -0.21935*t20114*t31924;
  t31995 = -1.*t20234*t31318;
  t32012 = -1.*t20114*t31924;
  t32013 = t31995 + t32012;
  t32020 = t20114*t31318;
  t32022 = -1.*t20234*t31924;
  t32023 = t32020 + t32022;
  t32076 = t20234*t31318;
  t32077 = t20114*t31924;
  t32083 = t32076 + t32077;
  t32033 = t20909*t32023;
  t32047 = -1.*t20961*t32023;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=-247.14333000000002;
  p_output1[3]=-10.75176*(t18179 + t18198 + t19341 - 0.079366*t19437 + 0.000864*t19549) - 10.75176*(t18198 + t19615 + t19666 + 0.079366*t19675 + 0.000864*t19704) - 14.989680000000002*(t18179 + t19341 - 0.14451*t19437 + t20013 + t20023 - 0.031996*t20026 - 0.219832*t20104) - 14.989680000000002*(t19615 + t19666 + 0.14451*t19675 + t20189 + t20239 - 0.031996*t20283 - 0.219832*t20381) - 2.36421*(t18179 + t19341 - 0.124881*t19437 + t20013 + t20023 - 0.221546*(t20104*t20687 - 1.*t20026*t20706) - 0.37338*(t20026*t20687 + t20104*t20706) + t20026*t20721 + t20104*t20736) - 2.36421*(t19615 + t19666 + 0.124119*t19675 + t20189 + t20239 - 0.221546*(t20381*t20909 - 1.*t20283*t20961) - 0.37338*(t20283*t20909 + t20381*t20961) + t20283*t21122 + t20381*t21549) - 14.989680000000002*(t24429 + t24536 - 0.14451*t24698 + t25159 + t25642 - 0.031996*t26265 + 0.218868*t26374) - 2.36421*(t24429 + t24536 - 0.124881*t24698 + t25159 + t25642 + 0.217154*(t26374*t26750 - 1.*t26265*t26831) - 0.37338*(t26265*t26750 + t26374*t26831) + t26265*t27055 + t26374*t27100) - 134.72073*(-0.025165*t5589*t649 + 0.002284*t8387 - 0.000041*t8810) - 10.75176*(t24429 + t24536 - 0.079366*t24698 + 0.000864*t24916 + t8861) - 14.989680000000002*(0.14451*t12637 + t19827 + t19846 - 0.031996*t19942 + 0.218868*t19975 + t8823 + t9195) - 2.36421*(0.124119*t12637 + t19827 + t19846 + 0.217154*(t19975*t20485 - 1.*t19942*t20510) - 0.37338*(t19942*t20485 + t19975*t20510) + t19942*t20527 + t19975*t20549 + t8823 + t9195) - 10.75176*(0.079366*t12637 + 0.000864*t17271 + t8823 + t8861 + t9195);
  p_output1[4]=-10.75176*(t27378 + t27502 + t27508 + 0.079366*t27516 + 0.000864*t27636) - 10.75176*(t27690 + t27695 + t27696 - 0.079366*t27717 + 0.000864*t27774) - 10.75176*(t27690 + t27810 + t27811 + 0.079366*t27822 + 0.000864*t27848) - 14.989680000000002*(t27502 + t27508 + 0.14451*t27516 + t27866 + t27872 - 0.031996*t28065 + 0.218868*t28090) - 2.36421*(t27502 + t27508 + 0.124119*t27516 + t27866 + t27872 + t20527*t28065 + t20549*t28090 + 0.217154*(-1.*t20510*t28065 + t20485*t28090) - 0.37338*(t20485*t28065 + t20510*t28090)) - 14.989680000000002*(t27695 + t27696 - 0.14451*t27717 + t28115 + t28123 - 0.031996*t28319 - 0.219832*t28518) - 2.36421*(t27695 + t27696 - 0.124881*t27717 + t28115 + t28123 + t20721*t28319 + t20736*t28518 - 0.221546*(-1.*t20706*t28319 + t20687*t28518) - 0.37338*(t20687*t28319 + t20706*t28518)) - 14.989680000000002*(t27810 + t27811 + 0.14451*t27822 + t28565 + t28584 - 0.031996*t28607 - 0.219832*t28705) - 2.36421*(t27810 + t27811 + 0.124119*t27822 + t28565 + t28584 + t21122*t28607 + t21549*t28705 - 0.221546*(-1.*t20961*t28607 + t20909*t28705) - 0.37338*(t20909*t28607 + t20961*t28705)) - 10.75176*(t27378 + t29508 + t29523 - 0.079366*t29637 + 0.000864*t29677) - 14.989680000000002*(t29508 + t29523 - 0.14451*t29637 + t29711 + t29723 - 0.031996*t29877 + 0.218868*t29962) - 2.36421*(t29508 + t29523 - 0.124881*t29637 + t29711 + t29723 + t27055*t29877 + t27100*t29962 + 0.217154*(-1.*t26831*t29877 + t26750*t29962) - 0.37338*(t26750*t29877 + t26831*t29962)) - 134.72073*(-0.025165*t6310*t6815 - 0.002284*t6287*t649*t6815 - 0.000041*t649*t6815*t7507);
  p_output1[5]=-134.72073*(-0.000041*t30291 + 0.002284*t30315) - 10.75176*(-0.000864*t18104*t30291 - 0.079366*t18295*t30291 + t30295 + t30321) - 10.75176*(-0.000864*t19566*t30291 + 0.079366*t19621*t30291 + t30321 + t30332) - 14.989680000000002*(-0.14451*t18295*t30291 + t30295 + t30536 + t30538 - 0.219832*t30571 - 0.031996*t30589) - 2.36421*(-0.124881*t18295*t30291 + t30295 + t30536 + t30538 + t20736*t30571 + t20721*t30589 - 0.37338*(t20706*t30571 + t20687*t30589) - 0.221546*(t20687*t30571 - 1.*t20706*t30589)) - 14.989680000000002*(0.14451*t19621*t30291 + t30332 + t30600 + t30601 - 0.219832*t30660 - 0.031996*t30673) - 2.36421*(0.124119*t19621*t30291 + t30332 + t30600 + t30601 + t21549*t30660 + t21122*t30673 - 0.37338*(t20961*t30660 + t20909*t30673) - 0.221546*(t20909*t30660 - 1.*t20961*t30673)) - 10.75176*(-0.079366*t23739*t30291 - 0.000864*t24511*t30291 + t30488 + t30901) - 14.989680000000002*(-0.14451*t23739*t30291 + t30901 + t30942 + t30943 - 0.031996*t30955 + 0.218868*t30966) - 2.36421*(-0.124881*t23739*t30291 + t30901 + t30942 + t30943 + t27055*t30955 + t27100*t30966 + 0.217154*(-1.*t26831*t30955 + t26750*t30966) - 0.37338*(t26750*t30955 + t26831*t30966)) - 10.75176*(t30465 + t30488 - 0.000864*t30291*t8821 + 0.079366*t30291*t8863) - 2.36421*(t30465 + t30504 + t30507 + t20549*t30515 + t20527*t30523 - 0.37338*(t20510*t30515 + t20485*t30523) + 0.217154*(t20485*t30515 - 1.*t20510*t30523) + 0.124119*t30291*t8863) - 14.989680000000002*(t30465 + t30504 + t30507 + 0.218868*t30515 - 0.031996*t30523 + 0.14451*t30291*t8863);
  p_output1[6]=-14.989680000000002*(t31046 + t31053 - 0.031996*t25023*t31122 + 0.000482*t25629*t31122 - 0.14451*t31149) - 2.36421*(t31046 + t31053 + 0.21935*t25629*t31122 + t25023*t27055*t31122 - 1.*t25629*t27100*t31122 + 0.217154*(-1.*t25629*t26750*t31122 - 1.*t25023*t26831*t31122) - 0.37338*(t25023*t26750*t31122 - 1.*t25629*t26831*t31122) - 0.124881*t31149) - 10.75176*(t31046 + t31053 + 0.000864*t31122 - 0.079366*t31149);
  p_output1[7]=-14.989680000000002*(t31309 + t31319 + 0.218868*t31342 - 0.031996*t31351) - 2.36421*(t31309 + t31319 + t27100*t31342 + t27055*t31351 - 0.37338*(t26831*t31342 + t31365) + 0.217154*(t26750*t31342 + t31399));
  p_output1[8]=-2.36421*((0.25*t26750 + t27039)*t31351 + (0.21935*t26750 - 0.25*t26831)*t31430 + 0.217154*(t31399 - 1.*t26750*t31430) - 0.37338*(t31365 - 1.*t26831*t31430));
  p_output1[9]=-10.75176*(t31469 + t31470 + 0.000864*t31486 + 0.079366*t31495) - 2.36421*(t31469 + t31470 + 0.21935*t19840*t31486 + t19730*t20527*t31486 - 1.*t19840*t20549*t31486 + 0.217154*(-1.*t19840*t20485*t31486 - 1.*t19730*t20510*t31486) - 0.37338*(t19730*t20485*t31486 - 1.*t19840*t20510*t31486) + 0.124119*t31495) - 14.989680000000002*(t31469 + t31470 - 0.031996*t19730*t31486 + 0.000482*t19840*t31486 + 0.14451*t31495);
  p_output1[10]=-14.989680000000002*(t31544 + t31557 + 0.218868*t31574 - 0.031996*t31584) - 2.36421*(t31544 + t31557 + t20549*t31574 + t20527*t31584 - 0.37338*(t20510*t31574 + t31607) + 0.217154*(t20485*t31574 + t31619));
  p_output1[11]=-2.36421*((0.25*t20485 + t20525)*t31584 + (0.21935*t20485 - 0.25*t20510)*t31662 + 0.217154*(t31619 - 1.*t20485*t31662) - 0.37338*(t31607 - 1.*t20510*t31662));
  p_output1[12]=-14.989680000000002*(t31691 + t31696 - 0.031996*t19998*t31703 + 0.000482*t20020*t31703 - 0.14451*t31726) - 2.36421*(t31691 + t31696 - 0.21935*t20020*t31703 + t19998*t20721*t31703 - 1.*t20020*t20736*t31703 - 0.221546*(-1.*t20020*t20687*t31703 - 1.*t19998*t20706*t31703) - 0.37338*(t19998*t20687*t31703 - 1.*t20020*t20706*t31703) - 0.124881*t31726) - 10.75176*(t31691 + t31696 + 0.000864*t31703 - 0.079366*t31726);
  p_output1[13]=-14.989680000000002*(t31772 + t31773 - 0.219832*t31778 - 0.031996*t31788) - 2.36421*(t31772 + t31773 + t20736*t31778 + t20721*t31788 - 0.37338*(t20706*t31778 + t31832) - 0.221546*(t20687*t31778 + t31840));
  p_output1[14]=-2.36421*((0.25*t20687 + t20714)*t31788 + (-0.21935*t20687 - 0.25*t20706)*t31869 - 0.221546*(t31840 - 1.*t20687*t31869) - 0.37338*(t31832 - 1.*t20706*t31869));
  p_output1[15]=-10.75176*(t31901 + t31902 + 0.000864*t31918 + 0.079366*t31924) - 2.36421*(t31901 + t31902 - 0.21935*t20234*t31918 + t20114*t21122*t31918 - 1.*t20234*t21549*t31918 - 0.221546*(-1.*t20234*t20909*t31918 - 1.*t20114*t20961*t31918) - 0.37338*(t20114*t20909*t31918 - 1.*t20234*t20961*t31918) + 0.124119*t31924) - 14.989680000000002*(t31901 + t31902 - 0.031996*t20114*t31918 + 0.000482*t20234*t31918 + 0.14451*t31924);
  p_output1[16]=-14.989680000000002*(t31993 + t31994 - 0.219832*t32013 - 0.031996*t32023) - 2.36421*(t31993 + t31994 + t21549*t32013 + t21122*t32023 - 0.37338*(t20961*t32013 + t32033) - 0.221546*(t20909*t32013 + t32047));
  p_output1[17]=-2.36421*((0.25*t20909 + t21080)*t32023 + (-0.21935*t20909 - 0.25*t20961)*t32083 - 0.221546*(t32047 - 1.*t20909*t32083) - 0.37338*(t32033 - 1.*t20961*t32083));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ge_vec_laikago_description.hh"

namespace SymFunction
{

void Ge_vec_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
