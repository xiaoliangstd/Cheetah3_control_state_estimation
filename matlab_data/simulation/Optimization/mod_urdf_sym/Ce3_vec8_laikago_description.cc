/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:02:39 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t605;
  double t626;
  double t608;
  double t467;
  double t649;
  double t413;
  double t763;
  double t766;
  double t789;
  double t1056;
  double t2014;
  double t2235;
  double t2593;
  double t2658;
  double t2692;
  double t2712;
  double t2716;
  double t2722;
  double t2379;
  double t2394;
  double t2404;
  double t2410;
  double t2411;
  double t2421;
  double t2085;
  double t2150;
  double t2230;
  double t2239;
  double t2273;
  double t2917;
  double t2922;
  double t2940;
  double t620;
  double t662;
  double t667;
  double t1026;
  double t1081;
  double t1103;
  double t1139;
  double t1204;
  double t1205;
  double t1294;
  double t1352;
  double t1361;
  double t1398;
  double t1416;
  double t1490;
  double t1632;
  double t1876;
  double t1949;
  double t2329;
  double t2346;
  double t2495;
  double t2590;
  double t2698;
  double t2755;
  double t2772;
  double t2784;
  double t2794;
  double t2853;
  double t2857;
  double t2861;
  double t2862;
  double t2891;
  double t2895;
  double t2898;
  double t2905;
  double t2941;
  double t2942;
  double t2943;
  double t3037;
  double t3066;
  double t3098;
  double t3102;
  double t3122;
  double t3133;
  double t3902;
  double t3916;
  double t3953;
  double t3974;
  double t3981;
  double t4015;
  double t4020;
  double t4021;
  double t4053;
  double t4067;
  double t4113;
  double t4123;
  double t4675;
  double t4709;
  double t4712;
  double t4610;
  double t4611;
  double t4612;
  double t4662;
  double t4798;
  double t4844;
  double t4867;
  double t4869;
  double t4870;
  double t4895;
  double t4903;
  double t4916;
  double t4924;
  double t4926;
  double t4930;
  double t4936;
  double t4937;
  double t4956;
  double t4964;
  double t4978;
  double t4989;
  double t4387;
  double t4389;
  double t4400;
  double t5025;
  double t5028;
  double t5036;
  double t5202;
  double t5259;
  double t5263;
  double t5343;
  double t5355;
  double t5363;
  double t5271;
  double t5301;
  double t5320;
  double t5124;
  double t5157;
  double t5174;
  double t4466;
  double t4478;
  double t4507;
  double t5783;
  double t5787;
  double t5794;
  double t6253;
  double t6263;
  double t6264;
  double t6269;
  double t6237;
  double t6283;
  double t6287;
  double t6347;
  double t6349;
  double t6363;
  double t6395;
  double t6396;
  double t6407;
  double t6415;
  double t6429;
  double t6445;
  double t6545;
  double t6573;
  double t6587;
  double t6504;
  double t6507;
  double t6513;
  double t6631;
  double t6632;
  double t6640;
  double t6339;
  double t6466;
  double t6476;
  double t6651;
  double t6713;
  double t6752;
  double t7954;
  double t7957;
  double t7958;
  double t8683;
  double t8710;
  double t8750;
  double t8893;
  double t8949;
  double t8969;
  double t9021;
  double t9045;
  double t9097;
  double t9243;
  double t9331;
  double t9369;
  double t5364;
  double t10470;
  double t10481;
  double t10508;
  double t5444;
  double t5842;
  double t5917;
  double t6764;
  double t16029;
  double t16219;
  double t16305;
  double t7495;
  double t8061;
  double t8456;
  double t5330;
  double t5337;
  double t5395;
  double t10617;
  double t5446;
  double t5447;
  double t5485;
  double t10853;
  double t10991;
  double t5804;
  double t5805;
  double t5899;
  double t11867;
  double t5923;
  double t5933;
  double t5935;
  double t13822;
  double t13908;
  double t6647;
  double t6648;
  double t6823;
  double t16339;
  double t7500;
  double t7506;
  double t7538;
  double t16443;
  double t16539;
  double t7978;
  double t7989;
  double t8070;
  double t16951;
  double t8491;
  double t8511;
  double t8521;
  double t17164;
  double t17230;
  double t18631;
  double t18632;
  double t18641;
  double t18658;
  double t18688;
  double t18694;
  double t18741;
  double t18745;
  double t18747;
  double t18814;
  double t18816;
  double t18825;
  double t12650;
  double t12679;
  double t19337;
  double t19341;
  double t19359;
  double t19393;
  double t19395;
  double t10341;
  double t11186;
  double t16961;
  double t17028;
  double t19955;
  double t19959;
  double t19972;
  double t20026;
  double t20028;
  double t15064;
  double t16596;
  double t10274;
  double t10375;
  double t19766;
  double t19784;
  double t11319;
  double t11320;
  double t19686;
  double t19722;
  double t12637;
  double t12662;
  double t20403;
  double t20414;
  double t19373;
  double t19398;
  double t12762;
  double t12812;
  double t19542;
  double t19565;
  double t15068;
  double t15569;
  double t20205;
  double t20217;
  double t20234;
  double t20241;
  double t16640;
  double t16745;
  double t16971;
  double t16981;
  double t20010;
  double t20030;
  double t20104;
  double t20129;
  double t17053;
  double t17086;
  double t18427;
  double t18430;
  double t18457;
  double t18488;
  double t18497;
  double t18508;
  double t20832;
  double t20833;
  double t20845;
  double t20398;
  double t20406;
  double t20466;
  double t20472;
  double t20922;
  double t20931;
  double t20938;
  double t20909;
  double t20913;
  double t20914;
  double t20860;
  double t20863;
  double t20865;
  double t20521;
  double t20524;
  double t20575;
  double t20586;
  double t18534;
  double t18535;
  double t18540;
  double t20620;
  double t20654;
  double t20706;
  double t20722;
  double t21086;
  double t21087;
  double t21089;
  double t21074;
  double t21075;
  double t21083;
  double t18580;
  double t18587;
  double t18605;
  double t20751;
  double t20764;
  double t20779;
  double t20788;
  double t21436;
  double t21445;
  double t21446;
  double t19651;
  double t19675;
  double t21839;
  double t21863;
  double t22102;
  double t19277;
  double t19301;
  double t19819;
  double t19827;
  double t21821;
  double t22440;
  double t19915;
  double t19919;
  double t24365;
  double t24377;
  double t24389;
  double t24390;
  double t20194;
  double t20195;
  double t21515;
  double t21528;
  double t21529;
  double t21607;
  double t21684;
  double t21689;
  double t24706;
  double t24707;
  double t24708;
  double t3398;
  double t3427;
  double t3459;
  double t3484;
  double t3496;
  double t3533;
  double t24778;
  double t24780;
  double t24810;
  double t24833;
  double t24843;
  double t24860;
  double t22367;
  double t22730;
  double t24959;
  double t24969;
  double t24981;
  double t24938;
  double t24947;
  double t24948;
  double t23354;
  double t23739;
  double t24429;
  double t25175;
  double t25247;
  double t25250;
  double t25642;
  double t25739;
  double t25740;
  double t24536;
  double t24589;
  double t21530;
  double t21531;
  double t24950;
  double t25023;
  double t25028;
  double t26374;
  double t26380;
  double t26389;
  double t26349;
  double t26359;
  double t26364;
  double t25075;
  double t25088;
  double t25104;
  double t25629;
  double t26161;
  double t26187;
  double t26740;
  double t26742;
  double t26758;
  double t26709;
  double t26714;
  double t26732;
  double t26240;
  double t21574;
  double t21691;
  double t21692;
  double t26272;
  double t26277;
  double t27094;
  double t27100;
  double t27052;
  double t27055;
  double t27059;
  double t27048;
  double t27050;
  double t27086;
  double t27091;
  double t27102;
  double t27106;
  double t27111;
  double t27116;
  double t27118;
  double t21448;
  double t21451;
  double t21481;
  double t21484;
  double t21485;
  double t21500;
  double t21569;
  double t21696;
  double t23649;
  double t20065;
  double t20081;
  double t20089;
  double t20264;
  double t20270;
  double t20278;
  double t23737;
  double t24244;
  double t24473;
  double t27302;
  double t27306;
  double t27308;
  double t24511;
  double t24542;
  double t27272;
  double t27292;
  double t27294;
  double t24615;
  double t24753;
  double t24763;
  double t24765;
  double t24771;
  double t24828;
  double t24866;
  double t24867;
  double t24875;
  double t24916;
  double t3546;
  double t3551;
  double t3575;
  double t24919;
  double t24923;
  double t24926;
  double t24927;
  double t25136;
  double t25159;
  double t27316;
  double t26147;
  double t27665;
  double t27669;
  double t27671;
  double t27634;
  double t27652;
  double t27655;
  double t26265;
  double t27379;
  double t26305;
  double t26699;
  double t26706;
  double t27684;
  double t27696;
  double t26816;
  double t26819;
  double t27829;
  double t27837;
  double t27853;
  double t27812;
  double t27816;
  double t27818;
  double t27717;
  double t26934;
  double t27732;
  double t26948;
  double t26951;
  t605 = Cos(var1[7]);
  t626 = Sin(var1[5]);
  t608 = Sin(var1[6]);
  t467 = Cos(var1[5]);
  t649 = Sin(var1[7]);
  t413 = Sin(var1[3]);
  t763 = Cos(var1[3]);
  t766 = Cos(var1[4]);
  t789 = Cos(var1[6]);
  t1056 = Sin(var1[4]);
  t2014 = Cos(var1[8]);
  t2235 = Sin(var1[8]);
  t2593 = -1.*t2014*t649;
  t2658 = -1.*t605*t2235;
  t2692 = t2593 + t2658;
  t2712 = t605*t2014;
  t2716 = -1.*t649*t2235;
  t2722 = t2712 + t2716;
  t2379 = -1.*t2014;
  t2394 = 1. + t2379;
  t2404 = 0.21935*t2394;
  t2410 = 0.217154*t2014;
  t2411 = -0.12338*t2235;
  t2421 = t2404 + t2410 + t2411;
  t2085 = -1. + t2014;
  t2150 = 0.25*t2085;
  t2230 = -0.37338*t2014;
  t2239 = 0.002196*t2235;
  t2273 = t2150 + t2230 + t2239;
  t2917 = t2014*t649;
  t2922 = t605*t2235;
  t2940 = t2917 + t2922;
  t620 = -1.*t467*t605*t608;
  t662 = t626*t649;
  t667 = t620 + t662;
  t1026 = t766*t789*t605;
  t1081 = t605*t626*t608;
  t1103 = t467*t649;
  t1139 = t1081 + t1103;
  t1204 = -1.*t1056*t1139;
  t1205 = t1026 + t1204;
  t1294 = t605*t626;
  t1352 = t467*t608*t649;
  t1361 = t1294 + t1352;
  t1398 = -1.*t766*t789*t649;
  t1416 = t467*t605;
  t1490 = -1.*t626*t608*t649;
  t1632 = t1416 + t1490;
  t1876 = -1.*t1056*t1632;
  t1949 = t1398 + t1876;
  t2329 = t2014*t2273;
  t2346 = -0.21935*t2235;
  t2495 = t2421*t2235;
  t2590 = t2329 + t2346 + t2495;
  t2698 = -1.*t467*t608*t2692;
  t2755 = t626*t2722;
  t2772 = t2698 + t2755;
  t2784 = t766*t789*t2692;
  t2794 = t626*t608*t2692;
  t2853 = t467*t2722;
  t2857 = t2794 + t2853;
  t2861 = -1.*t1056*t2857;
  t2862 = t2784 + t2861;
  t2891 = 0.21935*t2014;
  t2895 = -1.*t2014*t2421;
  t2898 = t2273*t2235;
  t2905 = t2891 + t2895 + t2898;
  t2941 = t626*t2940;
  t2942 = -1.*t467*t608*t2722;
  t2943 = t2941 + t2942;
  t3037 = t766*t789*t2722;
  t3066 = t467*t2940;
  t3098 = t626*t608*t2722;
  t3102 = t3066 + t3098;
  t3122 = -1.*t1056*t3102;
  t3133 = t3037 + t3122;
  t3902 = -1.*t789*t605*t1056;
  t3916 = -1.*t766*t1139;
  t3953 = t3902 + t3916;
  t3974 = t789*t1056*t649;
  t3981 = -1.*t766*t1632;
  t4015 = t3974 + t3981;
  t4020 = -1.*t789*t1056*t2692;
  t4021 = -1.*t766*t2857;
  t4053 = t4020 + t4021;
  t4067 = -1.*t789*t1056*t2722;
  t4113 = -1.*t766*t3102;
  t4123 = t4067 + t4113;
  t4675 = -0.031996*t605;
  t4709 = 0.000482*t649;
  t4712 = t4675 + t4709;
  t4610 = -1.*t789;
  t4611 = 1. + t4610;
  t4612 = -0.0875*t4611;
  t4662 = -0.14451*t789;
  t4798 = -1.*t608*t4712;
  t4844 = t4612 + t4662 + t4798;
  t4867 = -1.*t626*t4844;
  t4869 = -1.*t605;
  t4870 = 1. + t4869;
  t4895 = 0.21935*t4870;
  t4903 = 0.218868*t605;
  t4916 = -0.031996*t649;
  t4924 = t4895 + t4903 + t4916;
  t4926 = t467*t4924;
  t4930 = t4867 + t4926;
  t4936 = -1.*t1056*t4930;
  t4937 = -0.05701*t608;
  t4956 = t789*t4712;
  t4964 = t4937 + t4956;
  t4978 = t766*t4964;
  t4989 = t4936 + t4978;
  t4387 = t789*t1056*t626;
  t4389 = t766*t608;
  t4400 = t4387 + t4389;
  t5025 = -1.*t766*t789*t626;
  t5028 = t1056*t608;
  t5036 = t5025 + t5028;
  t5202 = t766*t4930;
  t5259 = t1056*t4964;
  t5263 = t5202 + t5259;
  t5343 = t467*t4844;
  t5355 = t626*t4924;
  t5363 = t5343 + t5355;
  t5271 = t789*t605*t1056;
  t5301 = t766*t1139;
  t5320 = t5271 + t5301;
  t5124 = -1.*t766*t4930;
  t5157 = -1.*t1056*t4964;
  t5174 = t5124 + t5157;
  t4466 = t766*t789*t626;
  t4478 = -1.*t1056*t608;
  t4507 = t4466 + t4478;
  t5783 = -1.*t789*t1056*t649;
  t5787 = t766*t1632;
  t5794 = t5783 + t5787;
  t6253 = 0.21935*t649;
  t6263 = -1.*t649*t2421;
  t6264 = t605*t2273;
  t6269 = t6253 + t6263 + t6264;
  t6237 = -0.037381*t608;
  t6283 = t789*t6269;
  t6287 = t6237 + t6283;
  t6347 = -0.124881*t789;
  t6349 = -1.*t608*t6269;
  t6363 = t4612 + t6347 + t6349;
  t6395 = -1.*t626*t6363;
  t6396 = t605*t2421;
  t6407 = t649*t2273;
  t6415 = t4895 + t6396 + t6407;
  t6429 = t467*t6415;
  t6445 = t6395 + t6429;
  t6545 = t766*t6287;
  t6573 = -1.*t1056*t6445;
  t6587 = t6545 + t6573;
  t6504 = t1056*t6287;
  t6507 = t766*t6445;
  t6513 = t6504 + t6507;
  t6631 = t789*t1056*t2692;
  t6632 = t766*t2857;
  t6640 = t6631 + t6632;
  t6339 = -1.*t1056*t6287;
  t6466 = -1.*t766*t6445;
  t6476 = t6339 + t6466;
  t6651 = t467*t6363;
  t6713 = t626*t6415;
  t6752 = t6651 + t6713;
  t7954 = t789*t1056*t2722;
  t7957 = t766*t3102;
  t7958 = t7954 + t7957;
  t8683 = t467*t605*t608;
  t8710 = -1.*t626*t649;
  t8750 = t8683 + t8710;
  t8893 = -1.*t605*t626;
  t8949 = -1.*t467*t608*t649;
  t8969 = t8893 + t8949;
  t9021 = t467*t608*t2692;
  t9045 = -1.*t626*t2722;
  t9097 = t9021 + t9045;
  t9243 = -1.*t626*t2940;
  t9331 = t467*t608*t2722;
  t9369 = t9243 + t9331;
  t5364 = -1.*t467*t789*t5363;
  t10470 = -1.*t467*t4844;
  t10481 = -1.*t626*t4924;
  t10508 = t10470 + t10481;
  t5444 = t5363*t667;
  t5842 = t467*t789*t5363;
  t5917 = -1.*t5363*t1361;
  t6764 = t467*t789*t6752;
  t16029 = -1.*t467*t6363;
  t16219 = -1.*t626*t6415;
  t16305 = t16029 + t16219;
  t7495 = -1.*t6752*t2772;
  t8061 = -1.*t467*t789*t6752;
  t8456 = t6752*t2943;
  t5330 = -1.*t4400*t4989;
  t5337 = -1.*t5036*t5263;
  t5395 = t5330 + t5337 + t5364;
  t10617 = t789*t626*t5363;
  t5446 = t5263*t5320;
  t5447 = t4989*t1205;
  t5485 = t5444 + t5446 + t5447;
  t10853 = t5363*t1139;
  t10991 = t4930*t667;
  t5804 = t4400*t4989;
  t5805 = t5036*t5263;
  t5899 = t5804 + t5805 + t5842;
  t11867 = -1.*t789*t626*t5363;
  t5923 = -1.*t5263*t5794;
  t5933 = -1.*t4989*t1949;
  t5935 = t5917 + t5923 + t5933;
  t13822 = -1.*t4930*t1361;
  t13908 = -1.*t5363*t1632;
  t6647 = t5036*t6513;
  t6648 = t4400*t6587;
  t6823 = t6647 + t6648 + t6764;
  t16339 = -1.*t789*t626*t6752;
  t7500 = -1.*t6513*t6640;
  t7506 = -1.*t6587*t2862;
  t7538 = t7495 + t7500 + t7506;
  t16443 = -1.*t6752*t2857;
  t16539 = -1.*t6445*t2772;
  t7978 = -1.*t5036*t6513;
  t7989 = -1.*t4400*t6587;
  t8070 = t7978 + t7989 + t8061;
  t16951 = t789*t626*t6752;
  t8491 = t6513*t7958;
  t8511 = t6587*t3133;
  t8521 = t8456 + t8491 + t8511;
  t17164 = t6445*t2943;
  t17230 = t6752*t3102;
  t18631 = -1.*t789*t605*t1056*t626;
  t18632 = -1.*t766*t605*t608;
  t18641 = t18631 + t18632;
  t18658 = t789*t1056*t626*t649;
  t18688 = t766*t608*t649;
  t18694 = t18658 + t18688;
  t18741 = -1.*t789*t1056*t626*t2692;
  t18745 = -1.*t766*t608*t2692;
  t18747 = t18741 + t18745;
  t18814 = -1.*t789*t1056*t626*t2722;
  t18816 = -1.*t766*t608*t2722;
  t18825 = t18814 + t18816;
  t12650 = t608*t4964;
  t12679 = t789*t4964*t649;
  t19337 = 0.05701*t608;
  t19341 = -1.*t789*t4712;
  t19359 = t19337 + t19341;
  t19393 = -0.05701*t789;
  t19395 = t19393 + t4798;
  t10341 = -1.*t608*t4964;
  t11186 = t789*t605*t4964;
  t16961 = -1.*t608*t6287;
  t17028 = t789*t6287*t2722;
  t19955 = 0.037381*t608;
  t19959 = -1.*t789*t6269;
  t19972 = t19955 + t19959;
  t20026 = -0.037381*t789;
  t20028 = t20026 + t6349;
  t15064 = t608*t6287;
  t16596 = -1.*t789*t6287*t2692;
  t10274 = t789*t626*t4930;
  t10375 = t10274 + t5364 + t10341;
  t19766 = -1.*t789*t4964;
  t19784 = -1.*t608*t19395;
  t11319 = t4930*t1139;
  t11320 = t11186 + t11319 + t5444;
  t19686 = -1.*t605*t608*t4964;
  t19722 = t789*t605*t19395;
  t12637 = -1.*t789*t626*t4930;
  t12662 = t12637 + t5842 + t12650;
  t20403 = Power(t467,2);
  t20414 = Power(t626,2);
  t19373 = t789*t4964;
  t19398 = t608*t19395;
  t12762 = -1.*t4930*t1632;
  t12812 = t12679 + t5917 + t12762;
  t19542 = -1.*t608*t4964*t649;
  t19565 = t789*t19395*t649;
  t15068 = -1.*t789*t626*t6445;
  t15569 = t15064 + t15068 + t6764;
  t20205 = t789*t6287;
  t20217 = t608*t20028;
  t20234 = t608*t6287*t2692;
  t20241 = -1.*t789*t20028*t2692;
  t16640 = -1.*t6445*t2857;
  t16745 = t16596 + t16640 + t7495;
  t16971 = t789*t626*t6445;
  t16981 = t16961 + t16971 + t8061;
  t20010 = -1.*t789*t6287;
  t20030 = -1.*t608*t20028;
  t20104 = -1.*t608*t6287*t2722;
  t20129 = t789*t20028*t2722;
  t17053 = t6445*t3102;
  t17086 = t17028 + t8456 + t17053;
  t18427 = t766*t789*t605*t626;
  t18430 = -1.*t605*t1056*t608;
  t18457 = t18427 + t18430;
  t18488 = -1.*t766*t789*t626*t649;
  t18497 = t1056*t608*t649;
  t18508 = t18488 + t18497;
  t20832 = t789*t1056;
  t20833 = t766*t626*t608;
  t20845 = t20832 + t20833;
  t20398 = t467*t608*t5363;
  t20406 = -1.*t20403*t789*t19359;
  t20466 = -1.*t467*t789*t605*t5363;
  t20472 = t467*t19359*t667;
  t20922 = -1.*t766*t626*t19359;
  t20931 = t1056*t19395;
  t20938 = t20922 + t20931;
  t20909 = t1056*t626*t19359;
  t20913 = t766*t19395;
  t20914 = t20909 + t20913;
  t20860 = t766*t789;
  t20863 = -1.*t1056*t626*t608;
  t20865 = t20860 + t20863;
  t20521 = -1.*t467*t608*t5363;
  t20524 = t20403*t789*t19359;
  t20575 = -1.*t467*t789*t5363*t649;
  t20586 = -1.*t467*t19359*t1361;
  t18534 = t766*t789*t626*t2692;
  t18535 = -1.*t1056*t608*t2692;
  t18540 = t18534 + t18535;
  t20620 = t20403*t789*t19972;
  t20654 = -1.*t467*t608*t6752;
  t20706 = t467*t789*t6752*t2692;
  t20722 = -1.*t467*t19972*t2772;
  t21086 = -1.*t766*t626*t19972;
  t21087 = t1056*t20028;
  t21089 = t21086 + t21087;
  t21074 = t1056*t626*t19972;
  t21075 = t766*t20028;
  t21083 = t21074 + t21075;
  t18580 = t766*t789*t626*t2722;
  t18587 = -1.*t1056*t608*t2722;
  t18605 = t18580 + t18587;
  t20751 = -1.*t20403*t789*t19972;
  t20764 = t467*t608*t6752;
  t20779 = -1.*t467*t789*t6752*t2722;
  t20788 = t467*t19972*t2943;
  t21436 = -1.*t605*t2014;
  t21445 = t649*t2235;
  t21446 = t21436 + t21445;
  t19651 = -1.*t789*t4844;
  t19675 = t10341 + t19651;
  t21839 = 0.000482*t605;
  t21863 = 0.031996*t649;
  t22102 = t21839 + t21863;
  t19277 = t789*t4844;
  t19301 = t12650 + t19277;
  t19819 = -1.*t605*t608*t4844;
  t19827 = t4924*t649;
  t21821 = Power(t789,2);
  t22440 = Power(t608,2);
  t19915 = -1.*t789*t6363;
  t19919 = t16961 + t19915;
  t24365 = 0.21935*t605;
  t24377 = -1.*t605*t2421;
  t24389 = -1.*t649*t2273;
  t24390 = t24365 + t24377 + t24389;
  t20194 = t789*t6363;
  t20195 = t15064 + t20194;
  t21515 = -1.*t605*t626*t608;
  t21528 = -1.*t467*t649;
  t21529 = t21515 + t21528;
  t21607 = t467*t2692;
  t21684 = t626*t608*t21446;
  t21689 = t21607 + t21684;
  t24706 = -1.*t766*t789*t605;
  t24707 = -1.*t1056*t21529;
  t24708 = t24706 + t24707;
  t3398 = t763*t1361;
  t3427 = -1.*t413*t1949;
  t3459 = t3398 + t3427;
  t3484 = t763*t2772;
  t3496 = -1.*t413*t2862;
  t3533 = t3484 + t3496;
  t24778 = t626*t2692;
  t24780 = -1.*t467*t608*t21446;
  t24810 = t24778 + t24780;
  t24833 = t766*t789*t21446;
  t24843 = -1.*t1056*t21689;
  t24860 = t24833 + t24843;
  t22367 = t21821*t605*t22102;
  t22730 = -1.*t789*t4964*t649;
  t24959 = t467*t4712;
  t24969 = t626*t608*t22102;
  t24981 = t24959 + t24969;
  t24938 = t626*t4712;
  t24947 = -1.*t467*t608*t22102;
  t24948 = t24938 + t24947;
  t23354 = t21821*t22102*t649;
  t23739 = t789*t6287*t2692;
  t24429 = t21821*t24390*t2722;
  t25175 = t626*t6269;
  t25247 = -1.*t467*t608*t24390;
  t25250 = t25175 + t25247;
  t25642 = t467*t6269;
  t25739 = t626*t608*t24390;
  t25740 = t25642 + t25739;
  t24536 = -1.*t21821*t24390*t2692;
  t24589 = -1.*t789*t6287*t21446;
  t21530 = t766*t21529;
  t21531 = t3902 + t21530;
  t24950 = -1.*t467*t789*t24948;
  t25023 = t24948*t667;
  t25028 = t5363*t1361;
  t26374 = t766*t24981;
  t26380 = t789*t1056*t22102;
  t26389 = t26374 + t26380;
  t26349 = -1.*t1056*t24981;
  t26359 = t766*t789*t22102;
  t26364 = t26349 + t26359;
  t25075 = t467*t789*t24948;
  t25088 = -1.*t5363*t8750;
  t25104 = -1.*t24948*t1361;
  t25629 = -1.*t467*t789*t25250;
  t26161 = t6752*t2772;
  t26187 = t25250*t2943;
  t26740 = t766*t25740;
  t26742 = t789*t1056*t24390;
  t26758 = t26740 + t26742;
  t26709 = -1.*t1056*t25740;
  t26714 = t766*t789*t24390;
  t26732 = t26709 + t26714;
  t26240 = t467*t789*t25250;
  t21574 = t789*t1056*t21446;
  t21691 = t766*t21689;
  t21692 = t21574 + t21691;
  t26272 = -1.*t25250*t2772;
  t26277 = -1.*t6752*t24810;
  t27094 = -0.12338*t2014;
  t27100 = t27094 + t2239;
  t27052 = 0.002196*t2014;
  t27055 = 0.12338*t2235;
  t27059 = t27052 + t27055;
  t27048 = -0.21935*t2014;
  t27050 = t2014*t2421;
  t27086 = t2014*t27059;
  t27091 = -1.*t2273*t2235;
  t27102 = t27100*t2235;
  t27106 = t27048 + t27050 + t27086 + t27091 + t27102;
  t27111 = -1.*t2014*t27100;
  t27116 = t27059*t2235;
  t27118 = t2329 + t27111 + t2346 + t2495 + t27116;
  t21448 = 5.e-6*t21446;
  t21451 = 0.009008821*t2692*t2905;
  t21481 = 0.124881*t2722;
  t21484 = 0.0875*t21446;
  t21485 = t21481 + t21484;
  t21500 = -0.241*t2590*t21485;
  t21569 = -0.241*t2905*t6640;
  t21696 = -0.241*t2590*t21692;
  t23649 = -5.e-6*t789*t2692;
  t20065 = t6415*t2940;
  t20081 = -1.*t608*t6363*t2722;
  t20089 = t20065 + t17028 + t20081;
  t20264 = t608*t6363*t2692;
  t20270 = -1.*t6415*t2722;
  t20278 = t16596 + t20264 + t20270;
  t23737 = t789*t19919*t2692;
  t24244 = -1.*t608*t6363*t2692;
  t24473 = t6415*t2722;
  t27302 = -1.*t649*t27100;
  t27306 = t605*t27059;
  t27308 = t27302 + t27306;
  t24511 = t789*t20195*t21446;
  t24542 = -1.*t6415*t2692;
  t27272 = t605*t27100;
  t27292 = t649*t27059;
  t27294 = t27272 + t27292;
  t24615 = t608*t6363*t21446;
  t24753 = t413*t2772;
  t24763 = t763*t2862;
  t24765 = t24753 + t24763;
  t24771 = -0.241*t2905*t24765;
  t24828 = t413*t24810;
  t24866 = t763*t24860;
  t24867 = t24828 + t24866;
  t24875 = -0.241*t2590*t24867;
  t24916 = -0.241*t2905*t3533;
  t3546 = t763*t2943;
  t3551 = -1.*t413*t3133;
  t3575 = t3546 + t3551;
  t24919 = t763*t24810;
  t24923 = -1.*t413*t24860;
  t24926 = t24919 + t24923;
  t24927 = -0.241*t2590*t24926;
  t25136 = 5.e-6*t9097;
  t25159 = t16981*t2772;
  t27316 = t21821*t27308*t2722;
  t26147 = t6445*t2857;
  t27665 = -1.*t467*t608*t27308;
  t27669 = t626*t27294;
  t27671 = t27665 + t27669;
  t27634 = t626*t608*t27308;
  t27652 = t467*t27294;
  t27655 = t27634 + t27652;
  t26265 = t15569*t24810;
  t27379 = -1.*t21821*t27308*t2692;
  t26305 = -1.*t6445*t21689;
  t26699 = 5.e-6*t4053;
  t26706 = t8070*t6640;
  t27684 = -1.*t467*t789*t27671;
  t27696 = t27671*t2943;
  t26816 = t6513*t6640;
  t26819 = t6587*t2862;
  t27829 = t766*t27655;
  t27837 = t789*t1056*t27308;
  t27853 = t27829 + t27837;
  t27812 = -1.*t1056*t27655;
  t27816 = t766*t789*t27308;
  t27818 = t27812 + t27816;
  t27717 = t467*t789*t27671;
  t26934 = t6823*t21692;
  t27732 = -1.*t27671*t2772;
  t26948 = -1.*t6513*t21692;
  t26951 = -1.*t6587*t24860;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.000736496*(-1.*t413*t667 - 1.*t1205*t763) + 0.048889888*(-1.*t1361*t413 - 1.*t1949*t763) - 0.241*t2590*(-1.*t2772*t413 - 1.*t2862*t763) - 0.241*t2905*(-1.*t2943*t413 - 1.*t3133*t763))*var2[1] - 0.5*(0.048889888*t3459 - 0.241*t2590*t3533 - 0.241*t2905*t3575 - 0.000736496*(-1.*t1205*t413 + t667*t763))*var2[2])*var2[7];
  p_output1[4]=(-0.5*(-0.000736496*t1205 + 0.048889888*t1949 - 0.241*t2590*t2862 - 0.241*t2905*t3133)*var2[0] - 0.5*(0.000736496*t3953*t413 - 0.048889888*t4015*t413 + 0.241*t2590*t4053*t413 + 0.241*t2905*t4123*t413)*var2[1] - 0.5*(-0.000736496*t3953*t763 + 0.048889888*t4015*t763 - 0.241*t2590*t4053*t763 - 0.241*t2905*t4123*t763)*var2[2] - 0.5*(-0.000085*t1205 + 1.e-5*t1949 - 0.015477*t4400 + 0.048889888*((-1.*t4507*t4989 - 1.*t4989*t5036 - 1.*t4400*t5174 - 1.*t4400*t5263)*t5320 + t5036*(t3953*t4989 + t1205*t5174 + t1205*t5263 + t4989*t5320) + t1205*t5395 + t4400*t5485) - 0.000736496*((t4507*t4989 + t4989*t5036 + t4400*t5174 + t4400*t5263)*t5794 + t5036*(-1.*t4015*t4989 - 1.*t1949*t5174 - 1.*t1949*t5263 - 1.*t4989*t5794) + t1949*t5899 + t4400*t5935) - 0.241*t2905*((t4400*t6476 + t4400*t6513 + t4507*t6587 + t5036*t6587)*t6640 + t5036*(-1.*t2862*t6476 - 1.*t2862*t6513 - 1.*t4053*t6587 - 1.*t6587*t6640) + t2862*t6823 + t4400*t7538) + 5.e-6*(t1056*t3102 - 1.*t2722*t766*t789) - 0.241*t2590*((-1.*t4400*t6476 - 1.*t4400*t6513 - 1.*t4507*t6587 - 1.*t5036*t6587)*t7958 + t5036*(t3133*t6476 + t3133*t6513 + t4123*t6587 + t6587*t7958) + t3133*t8070 + t4400*t8521))*var2[3])*var2[7];
  p_output1[5]=(-0.5*(-0.000736496*t766*t8750 + 0.048889888*t766*t8969 - 0.241*t2590*t766*t9097 - 0.241*t2905*t766*t9369)*var2[0] - 0.5*(-0.000736496*(t1139*t763 + t1056*t413*t8750) + 0.048889888*(t1632*t763 + t1056*t413*t8969) - 0.241*t2590*(t2857*t763 + t1056*t413*t9097) - 0.241*t2905*(t3102*t763 + t1056*t413*t9369))*var2[1] - 0.5*(-0.000736496*(t1139*t413 - 1.*t1056*t763*t8750) + 0.048889888*(t1632*t413 - 1.*t1056*t763*t8969) - 0.241*t2590*(t2857*t413 - 1.*t1056*t763*t9097) - 0.241*t2905*(t3102*t413 - 1.*t1056*t763*t9369))*var2[2] - 0.5*(0.015477*t467*t766*t789 - 0.000085*t766*t8750 + 0.048889888*(-1.*t467*t5485*t766*t789 + t5320*(t10617 + t10508*t1056*t4400 - 1.*t10508*t5036*t766 - 1.*t467*t4930*t789 - 1.*t1056*t467*t4989*t789 + t467*t5263*t766*t789) + t5395*t766*t8750 + t5036*(t10853 + t10991 - 1.*t10508*t1056*t1205 + t10508*t5320*t766 - 1.*t1056*t4989*t8750 + t5263*t766*t8750)) + 1.e-5*t766*t8969 - 0.000736496*(-1.*t467*t5935*t766*t789 + t5794*(t11867 - 1.*t10508*t1056*t4400 + t10508*t5036*t766 + t467*t4930*t789 + t1056*t467*t4989*t789 - 1.*t467*t5263*t766*t789) + t5899*t766*t8969 + t5036*(t13822 + t13908 + t10508*t1056*t1949 - 1.*t10508*t5794*t766 + t1056*t4989*t8969 - 1.*t5263*t766*t8969)) - 0.241*t2905*(-1.*t467*t7538*t766*t789 + t6640*(t16339 - 1.*t1056*t16305*t4400 + t16305*t5036*t766 + t467*t6445*t789 + t1056*t467*t6587*t789 - 1.*t467*t6513*t766*t789) + t6823*t766*t9097 + t5036*(t16443 + t16539 + t1056*t16305*t2862 - 1.*t16305*t6640*t766 + t1056*t6587*t9097 - 1.*t6513*t766*t9097)) - 5.e-6*t766*t9369 - 0.241*t2590*((t16951 + t1056*t16305*t4400 - 1.*t16305*t5036*t766 - 1.*t467*t6445*t789 - 1.*t1056*t467*t6587*t789 + t467*t6513*t766*t789)*t7958 - 1.*t467*t766*t789*t8521 + t766*t8070*t9369 + t5036*(t17164 + t17230 - 1.*t1056*t16305*t3133 + t16305*t766*t7958 - 1.*t1056*t6587*t9369 + t6513*t766*t9369)))*var2[3] - 0.5*(-0.000085*t1139 + 1.e-5*t1632 + 5.e-6*(-1.*t2940*t467 - 1.*t2722*t608*t626) + 0.015477*t626*t789 + 0.048889888*(t10375*t1139 - 1.*t11320*t626*t789 + t667*(t10617 + t10508*t626*t789) + t467*t789*(t10853 + t10991 + t10508*t1139 + t4930*t8750)) - 0.000736496*(t12662*t1632 - 1.*t12812*t626*t789 + t1361*(t11867 - 1.*t10508*t626*t789) + t467*t789*(t13822 + t13908 - 1.*t10508*t1632 - 1.*t4930*t8969)) - 0.241*t2905*(t15569*t2857 - 1.*t16745*t626*t789 + t2772*(t16339 - 1.*t16305*t626*t789) + t467*t789*(t16443 + t16539 - 1.*t16305*t2857 - 1.*t6445*t9097)) - 0.241*t2590*(t16981*t3102 - 1.*t17086*t626*t789 + t2943*(t16951 + t16305*t626*t789) + t467*t789*(t17164 + t17230 + t16305*t3102 + t6445*t9369)))*var2[4])*var2[7];
  p_output1[6]=(-0.5*(-0.000736496*t18457 + 0.048889888*t18508 - 0.241*t18540*t2590 - 0.241*t18605*t2905)*var2[0] - 0.5*(-0.241*t2590*(-1.*t18747*t413 - 1.*t2692*t467*t763*t789) - 0.241*t2905*(-1.*t18825*t413 - 1.*t2722*t467*t763*t789) - 0.000736496*(-1.*t18641*t413 - 1.*t467*t605*t763*t789) + 0.048889888*(-1.*t18694*t413 + t467*t649*t763*t789))*var2[1] - 0.5*(-0.241*t2590*(t18747*t763 - 1.*t2692*t413*t467*t789) - 0.241*t2905*(t18825*t763 - 1.*t2722*t413*t467*t789) - 0.000736496*(t18641*t763 - 1.*t413*t467*t605*t789) + 0.048889888*(t18694*t763 + t413*t467*t649*t789))*var2[2] - 0.5*(-0.000085*t18457 + 1.e-5*t18508 - 0.015477*t20845 + 0.048889888*((t20398 + t20406 - 1.*t20914*t4400 - 1.*t20865*t4989 - 1.*t20938*t5036 - 1.*t20845*t5263)*t5320 + t5036*(t20466 + t20472 + t1205*t20914 + t18641*t4989 + t18457*t5263 + t20938*t5320) + t18457*t5395 + t20845*t5485) - 0.000736496*((t20521 + t20524 + t20914*t4400 + t20865*t4989 + t20938*t5036 + t20845*t5263)*t5794 + t5036*(t20575 + t20586 - 1.*t1949*t20914 - 1.*t18694*t4989 - 1.*t18508*t5263 - 1.*t20938*t5794) + t18508*t5899 + t20845*t5935) - 0.241*t2905*((t20620 + t20654 + t21083*t4400 + t21089*t5036 + t20845*t6513 + t20865*t6587)*t6640 + t5036*(t20706 + t20722 - 1.*t21083*t2862 - 1.*t18540*t6513 - 1.*t18747*t6587 - 1.*t21089*t6640) + t18540*t6823 + t20845*t7538) + 5.e-6*(t1056*t2722*t608 - 1.*t2722*t626*t766*t789) - 0.241*t2590*((t20751 + t20764 - 1.*t21083*t4400 - 1.*t21089*t5036 - 1.*t20845*t6513 - 1.*t20865*t6587)*t7958 + t5036*(t20779 + t20788 + t21083*t3133 + t18605*t6513 + t18825*t6587 + t21089*t7958) + t18605*t8070 + t20845*t8521))*var2[3] - 0.5*(0.015477*t467*t608 + 5.e-6*t2722*t467*t789 + 0.000085*t467*t605*t789 + 1.e-5*t467*t649*t789 + 0.048889888*(-1.*t11320*t467*t608 - 1.*t10375*t467*t605*t789 + t667*(t19766 + t19784 + t20398 + t20406 - 1.*t4930*t608*t626 - 1.*t19359*t20414*t789) + t467*t789*(t19686 + t19722 + t20466 + t20472 - 1.*t1139*t19359*t626 + t4930*t605*t626*t789)) - 0.241*t2905*(-1.*t16745*t467*t608 - 1.*t15569*t2692*t467*t789 + t2772*(t20205 + t20217 + t20620 + t20654 + t608*t626*t6445 + t19972*t20414*t789) + t467*t789*(t20234 + t20241 + t20706 + t20722 + t19972*t2857*t626 - 1.*t2692*t626*t6445*t789)) - 0.241*t2590*(-1.*t17086*t467*t608 - 1.*t16981*t2722*t467*t789 + t2943*(t20010 + t20030 + t20751 + t20764 - 1.*t608*t626*t6445 - 1.*t19972*t20414*t789) + t467*t789*(t20104 + t20129 + t20779 + t20788 - 1.*t19972*t3102*t626 + t2722*t626*t6445*t789)) - 0.000736496*(-1.*t12812*t467*t608 + t12662*t467*t649*t789 + t1361*(t19373 + t19398 + t20521 + t20524 + t4930*t608*t626 + t19359*t20414*t789) + t467*t789*(t19542 + t19565 + t20575 + t20586 + t1632*t19359*t626 + t4930*t626*t649*t789)))*var2[4] - 0.5*(5.e-6*t2722*t608 + 0.000085*t605*t608 + 1.e-5*t608*t649 - 0.015477*t789 + 0.048889888*(-1.*t19675*t605*t608 + (t11186 + t19819 + t19827)*t789 + t605*t789*(t19766 + t19784 + t4844*t608 - 1.*t19359*t789) + t608*(t19686 + t19722 - 1.*t19359*t605*t608 - 1.*t4844*t605*t789)) - 0.241*t2905*(-1.*t20195*t2692*t608 + t20278*t789 + t2692*t789*(t20205 + t20217 - 1.*t608*t6363 + t19972*t789) + t608*(t20234 + t20241 + t19972*t2692*t608 + t2692*t6363*t789)) - 0.241*t2590*(-1.*t19919*t2722*t608 + t20089*t789 + t2722*t789*(t20010 + t20030 + t608*t6363 - 1.*t19972*t789) + t608*(t20104 + t20129 - 1.*t19972*t2722*t608 - 1.*t2722*t6363*t789)) - 0.000736496*(t19301*t608*t649 + (t12679 - 1.*t4924*t605 - 1.*t4844*t608*t649)*t789 - 1.*t649*t789*(t19373 + t19398 - 1.*t4844*t608 + t19359*t789) + t608*(t19542 + t19565 - 1.*t19359*t608*t649 - 1.*t4844*t649*t789)))*var2[5])*var2[7];
  p_output1[7]=(-0.5*(0.048889888*t21531 + t21569 + t21696 - 0.000736496*t5794)*var2[0] - 0.5*(t24916 + t24927 - 0.000736496*t3459 + 0.048889888*(-1.*t24708*t413 + t763*t8750))*var2[1] - 0.5*(t24771 + t24875 - 0.000736496*(t1361*t413 + t1949*t763) + 0.048889888*(t24708*t763 + t413*t8750))*var2[2] - 0.5*(1.e-5*t21531 + t26699 - 0.000085*t5794 + 0.048889888*((t24950 - 1.*t26364*t4400 - 1.*t26389*t5036)*t5320 + t5395*t5794 + t5036*(t25023 + t25028 + t1205*t26364 + t1949*t4989 + t26389*t5320 + t5263*t5794)) - 0.000736496*((t25075 + t26364*t4400 + t26389*t5036)*t5794 + t5036*(t25088 + t25104 - 1.*t1949*t26364 - 1.*t24708*t4989 - 1.*t21531*t5263 - 1.*t26389*t5794) + t21531*t5899) - 0.241*t2905*(t26934 + (t26240 + t26732*t4400 + t26758*t5036)*t6640 + t5036*(t26272 + t26277 + t26948 + t26951 - 1.*t26732*t2862 - 1.*t26758*t6640)) - 0.241*t2590*(t26706 + (t25629 - 1.*t26732*t4400 - 1.*t26758*t5036)*t7958 + t5036*(t26161 + t26187 + t26816 + t26819 + t26732*t3133 + t26758*t7958)))*var2[3] - 0.5*(-0.000085*t1361 + t25136 + 0.048889888*(t10375*t1361 + t467*(t22367 + t22730 + t1139*t24981 + t25023 + t25028 + t1632*t4930)*t789 + t667*(t24950 - 1.*t22102*t608*t789 + t24981*t626*t789)) - 0.241*t2905*(t26265 + (t24536 + t24589 + t26272 + t26277 + t26305 - 1.*t25740*t2857)*t467*t789 + t2772*(t26240 + t24390*t608*t789 - 1.*t25740*t626*t789)) - 0.241*t2590*(t25159 + (t23739 + t24429 + t26147 + t26161 + t26187 + t25740*t3102)*t467*t789 + t2943*(t25629 - 1.*t24390*t608*t789 + t25740*t626*t789)) + 1.e-5*t8750 - 0.000736496*(t467*(t11186 + t23354 - 1.*t1632*t24981 + t25088 + t25104 - 1.*t21529*t4930)*t789 + t1361*(t25075 + t22102*t608*t789 - 1.*t24981*t626*t789) + t12662*t8750))*var2[4] - 0.5*(t23649 - 0.241*t2905*(t24511 + t608*(t24536 + t24542 + t24589 + t24615 - 1.*t22440*t24390*t2692 - 1.*t2722*t6269)) - 0.241*t2590*(t23737 + t608*(t23739 + t24244 + t24429 + t24473 + t22440*t24390*t2722 + t2940*t6269)) - 1.e-5*t605*t789 + 0.000085*t649*t789 - 0.000736496*(t608*(t11186 + t19819 + t19827 + t23354 - 1.*t4712*t605 + t22102*t22440*t649) - 1.*t19301*t605*t789) + 0.048889888*(t608*(t22367 + t22730 + t22102*t22440*t605 + t4924*t605 + t4712*t649 + t4844*t608*t649) - 1.*t19675*t649*t789))*var2[5] - 0.5*(t21448 + t21451 + t21500 + 0.00270221251488*t605 - 0.00005198763696*t649)*var2[6])*var2[7];
  p_output1[8]=var2[7]*(-0.5*(t21569 + t21696 - 0.241*t27106*t6640 - 0.241*t27118*t7958)*var2[0] - 0.5*(t24916 + t24927 - 0.241*t27106*t3533 - 0.241*t27118*t3575)*var2[1] - 0.5*(t24771 + t24875 - 0.241*t24765*t27106 - 0.241*t27118*(t2943*t413 + t3133*t763))*var2[2] - 0.5*(t26699 - 0.241*t2905*(t26934 + (t27717 + t27818*t4400 + t27853*t5036)*t6640 + t5036*(t26277 + t26948 + t26951 + t27732 - 1.*t27818*t2862 - 1.*t27853*t6640)) - 0.241*t27118*(t6640*t6823 + t5036*t7538) - 0.241*t2590*(t26706 + (t27684 - 1.*t27818*t4400 - 1.*t27853*t5036)*t7958 + t5036*(t26161 + t26816 + t26819 + t27696 + t27818*t3133 + t27853*t7958)) - 0.241*t27106*(t7958*t8070 + t5036*t8521))*var2[3] - 0.5*(t25136 - 0.241*t27118*(t15569*t2772 + t16745*t467*t789) - 0.241*t27106*(t16981*t2943 + t17086*t467*t789) - 0.241*t2905*(t26265 + (t24589 + t26277 + t26305 + t27379 + t27732 - 1.*t27655*t2857)*t467*t789 + t2772*(t27717 + t27308*t608*t789 - 1.*t27655*t626*t789)) - 0.241*t2590*(t25159 + (t23739 + t26147 + t26161 + t27316 + t27696 + t27655*t3102)*t467*t789 + t2943*(t27684 - 1.*t27308*t608*t789 + t27655*t626*t789)))*var2[4] - 0.5*(t23649 - 0.241*t2905*(t24511 + (t24542 + t24589 + t24615 - 1.*t2722*t27294 - 1.*t22440*t2692*t27308 + t27379)*t608) - 0.241*t2590*(t23737 + (t23739 + t24244 + t24473 + t22440*t2722*t27308 + t27316 + t27294*t2940)*t608) - 0.241*t27118*(t20278*t608 + t20195*t2692*t789) - 0.241*t27106*(t20089*t608 + t19919*t2722*t789))*var2[5] - 0.5*(t21448 + t21451 + t21500 + 0.009008821*t27118*t2722 - 0.241*t27106*(0.0875*t2692 + 0.124881*t2940))*var2[6] - 0.5*(-0.482*t2590*t27106 - 0.482*t27118*t2905)*var2[7] - 0.5*(0.02973458*t27106 - 0.000529236*t27118)*var2[8]);
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec8_laikago_description.hh"

namespace SymFunction
{

void Ce3_vec8_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
