/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:01:36 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t457;
  double t5252;
  double t529;
  double t1729;
  double t1792;
  double t5273;
  double t7157;
  double t7605;
  double t7682;
  double t7684;
  double t7690;
  double t7694;
  double t7709;
  double t7164;
  double t7298;
  double t7518;
  double t7590;
  double t7606;
  double t7631;
  double t7758;
  double t7793;
  double t7811;
  double t8426;
  double t8434;
  double t8280;
  double t8309;
  double t8329;
  double t8330;
  double t8331;
  double t8336;
  double t8351;
  double t7163;
  double t7643;
  double t7716;
  double t7721;
  double t7826;
  double t7827;
  double t7883;
  double t8490;
  double t8491;
  double t8492;
  double t8521;
  double t8527;
  double t8528;
  double t8651;
  double t8657;
  double t8658;
  double t8635;
  double t8645;
  double t8646;
  double t8649;
  double t8814;
  double t8816;
  double t8727;
  double t8737;
  double t8809;
  double t8545;
  double t8546;
  double t8553;
  double t8661;
  double t8663;
  double t8671;
  double t8673;
  double t8674;
  double t8683;
  double t8710;
  double t8462;
  double t8467;
  double t8468;
  double t7048;
  double t7066;
  double t7104;
  double t8863;
  double t2205;
  double t5972;
  double t6630;
  double t8861;
  double t8387;
  double t8403;
  double t8404;
  double t7825;
  double t8079;
  double t8089;
  double t8607;
  double t8461;
  double t8471;
  double t8479;
  double t8488;
  double t8503;
  double t8505;
  double t8508;
  double t8535;
  double t8536;
  double t8539;
  double t8554;
  double t8564;
  double t8615;
  double t8617;
  double t8621;
  double t9022;
  double t9024;
  double t9026;
  double t9033;
  double t9034;
  double t9037;
  double t9151;
  double t9153;
  double t9154;
  double t9157;
  double t8718;
  double t8725;
  double t8810;
  double t8812;
  double t8823;
  double t8825;
  double t8837;
  double t8838;
  double t8839;
  double t9044;
  double t9045;
  double t9046;
  double t9159;
  double t9160;
  double t9161;
  double t9162;
  double t9164;
  double t9167;
  double t9193;
  double t9194;
  double t9195;
  double t9201;
  double t8899;
  double t8901;
  double t8903;
  double t8904;
  double t8907;
  double t8910;
  double t8911;
  double t8913;
  double t8918;
  double t8919;
  double t8920;
  double t8943;
  double t8944;
  double t8945;
  double t8957;
  double t8959;
  double t8960;
  double t8970;
  double t8971;
  double t8974;
  double t8979;
  double t8980;
  double t8981;
  double t9013;
  double t9014;
  double t9015;
  double t9147;
  double t9148;
  double t9149;
  double t9217;
  double t9218;
  double t9219;
  double t9091;
  double t9093;
  double t9095;
  double t9369;
  double t9372;
  double t9378;
  double t9386;
  double t9391;
  double t9397;
  double t9400;
  double t9404;
  double t9462;
  double t9463;
  double t9464;
  double t9465;
  double t9466;
  double t9468;
  double t9469;
  double t9470;
  double t9471;
  double t9446;
  double t9450;
  double t9451;
  double t9452;
  double t9454;
  double t9455;
  double t9485;
  double t9488;
  double t9495;
  double t9457;
  double t9472;
  double t9478;
  double t9508;
  double t9509;
  double t9510;
  double t9482;
  double t9483;
  double t9484;
  double t9497;
  double t9498;
  double t9499;
  double t9436;
  double t9437;
  double t9438;
  double t9511;
  double t9512;
  double t9513;
  double t9516;
  double t9517;
  double t9518;
  double t9502;
  double t9504;
  double t9505;
  double t8629;
  double t8630;
  double t8631;
  double t9622;
  double t9623;
  double t9624;
  double t9625;
  double t9626;
  double t9627;
  double t9628;
  double t9615;
  double t9616;
  double t9617;
  double t9634;
  double t9635;
  double t9636;
  double t9618;
  double t9629;
  double t9630;
  double t9645;
  double t9647;
  double t9648;
  double t9638;
  double t9639;
  double t9642;
  double t9649;
  double t9650;
  double t9651;
  double t9660;
  double t9663;
  double t9668;
  double t8841;
  double t8844;
  double t8845;
  double t8433;
  double t8435;
  double t8436;
  double t8442;
  double t8443;
  double t8444;
  double t8454;
  double t8455;
  double t8457;
  double t9549;
  double t9550;
  double t9551;
  double t9554;
  double t9748;
  double t9749;
  double t9750;
  double t9753;
  double t9754;
  double t9755;
  double t9756;
  double t9757;
  double t9763;
  double t9764;
  double t9765;
  double t9739;
  double t9740;
  double t9741;
  double t9556;
  double t9557;
  double t9558;
  double t9559;
  double t9574;
  double t9575;
  double t9587;
  double t9593;
  double t9771;
  double t9777;
  double t9778;
  double t9779;
  double t9606;
  double t9607;
  double t9608;
  double t9609;
  double t8450;
  double t8451;
  double t8452;
  double t9672;
  double t9675;
  double t9676;
  double t9677;
  double t9813;
  double t9814;
  double t9817;
  double t9820;
  double t9822;
  double t9823;
  double t9824;
  double t9825;
  double t9829;
  double t9830;
  double t9831;
  double t9689;
  double t9690;
  double t9692;
  double t9695;
  double t9709;
  double t9710;
  double t9712;
  double t9714;
  double t9728;
  double t9729;
  double t9730;
  double t9731;
  double t9882;
  double t9883;
  double t9884;
  double t9888;
  double t9889;
  double t9890;
  double t9924;
  double t9925;
  double t9926;
  double t8622;
  double t8627;
  double t10026;
  double t10027;
  double t10033;
  double t10042;
  double t10043;
  double t10044;
  double t10034;
  double t10037;
  double t10039;
  double t10041;
  double t10045;
  double t10054;
  double t10076;
  double t10077;
  double t10079;
  double t10154;
  double t10155;
  double t10157;
  double t10164;
  double t10175;
  double t10176;
  double t10177;
  double t10165;
  double t10168;
  double t10171;
  double t10173;
  double t10181;
  double t10183;
  double t10185;
  double t10186;
  double t10187;
  double t10021;
  double t10148;
  double t10255;
  double t10256;
  double t10257;
  double t10265;
  double t10270;
  double t10272;
  double t10279;
  double t10286;
  double t10291;
  double t10262;
  double t10273;
  double t10274;
  double t10193;
  double t10199;
  double t10200;
  double t10278;
  double t10292;
  double t10293;
  double t10301;
  double t10302;
  double t10303;
  double t10209;
  double t10219;
  double t10229;
  double t10230;
  double t9772;
  double t9774;
  double t9747;
  double t9752;
  double t9789;
  double t10400;
  double t9791;
  double t9800;
  double t9801;
  double t9819;
  double t9827;
  double t9839;
  double t9840;
  double t9856;
  double t9858;
  double t9865;
  double t9866;
  double t10389;
  double t10390;
  double t10391;
  double t9500;
  double t9522;
  double t9527;
  double t10428;
  double t10429;
  double t10433;
  double t10447;
  double t10448;
  double t10449;
  double t9568;
  double t10479;
  double t10480;
  double t10481;
  double t9595;
  double t9597;
  double t10485;
  double t10486;
  double t10487;
  double t9643;
  double t9679;
  double t9680;
  double t10507;
  double t10508;
  double t10509;
  double t10513;
  double t10514;
  double t10515;
  double t9703;
  double t10532;
  double t10534;
  double t10535;
  double t9716;
  double t9718;
  double t10040;
  double t10085;
  double t10086;
  double t10112;
  double t10626;
  double t10121;
  double t10125;
  double t10172;
  double t10192;
  double t10212;
  double t10225;
  double t10617;
  double t10682;
  double t10276;
  double t10683;
  double t10685;
  double t10311;
  double t10700;
  double t10335;
  double t10703;
  double t10346;
  double t10705;
  double t10454;
  double t10457;
  double t10471;
  double t10472;
  double t10414;
  double t10416;
  double t10398;
  double t10399;
  double t10517;
  double t10519;
  double t10524;
  double t10525;
  double t10489;
  double t10490;
  double t10497;
  double t10498;
  double t10801;
  double t10802;
  double t10627;
  double t10628;
  double t10779;
  double t10781;
  double t10818;
  double t10820;
  double t10643;
  double t10892;
  double t10827;
  double t10828;
  double t10684;
  double t10853;
  double t10855;
  double t10702;
  double t10918;
  double t10842;
  double t10843;
  double t10844;
  double t10871;
  double t10872;
  double t10873;
  double t10919;
  double t10921;
  double t10927;
  double t10729;
  double t10938;
  double t10940;
  double t10754;
  double t10946;
  double t10991;
  double t10992;
  double t10993;
  double t10994;
  double t10996;
  double t10997;
  t457 = Cos(var1[4]);
  t5252 = Cos(var1[16]);
  t529 = Cos(var1[5]);
  t1729 = Sin(var1[15]);
  t1792 = Sin(var1[16]);
  t5273 = Sin(var1[5]);
  t7157 = Cos(var1[17]);
  t7605 = Sin(var1[17]);
  t7682 = -1. + t7157;
  t7684 = 0.25*t7682;
  t7690 = -0.37338*t7157;
  t7694 = 0.002196*t7605;
  t7709 = t7684 + t7690 + t7694;
  t7164 = -1.*t7157;
  t7298 = 1. + t7164;
  t7518 = -0.21935*t7298;
  t7590 = -0.221546*t7157;
  t7606 = -0.12338*t7605;
  t7631 = t7518 + t7590 + t7606;
  t7758 = t5252*t7157;
  t7793 = -1.*t1792*t7605;
  t7811 = t7758 + t7793;
  t8426 = Sin(var1[4]);
  t8434 = Cos(var1[15]);
  t8280 = t7157*t7709;
  t8309 = 0.21935*t7605;
  t8329 = t7631*t7605;
  t8330 = t8280 + t8309 + t8329;
  t8331 = -1.*t7157*t1792;
  t8336 = -1.*t5252*t7605;
  t8351 = t8331 + t8336;
  t7163 = -0.21935*t7157;
  t7643 = -1.*t7157*t7631;
  t7716 = t7709*t7605;
  t7721 = t7163 + t7643 + t7716;
  t7826 = t7157*t1792;
  t7827 = t5252*t7605;
  t7883 = t7826 + t7827;
  t8490 = t5252*t529;
  t8491 = -1.*t1729*t1792*t5273;
  t8492 = t8490 + t8491;
  t8521 = t529*t7811;
  t8527 = t1729*t8351*t5273;
  t8528 = t8521 + t8527;
  t8651 = -1.*t5252*t7157;
  t8657 = t1792*t7605;
  t8658 = t8651 + t8657;
  t8635 = t8434*t8351*t8426;
  t8645 = t457*t8528;
  t8646 = t8635 + t8645;
  t8649 = 0.241*t7721*t8646;
  t8814 = -0.12338*t7157;
  t8816 = t8814 + t7694;
  t8727 = 0.002196*t7157;
  t8737 = 0.12338*t7605;
  t8809 = t8727 + t8737;
  t8545 = t529*t7883;
  t8546 = t1729*t7811*t5273;
  t8553 = t8545 + t8546;
  t8661 = t8434*t8658*t8426;
  t8663 = t529*t8351;
  t8671 = t1729*t8658*t5273;
  t8673 = t8663 + t8671;
  t8674 = t457*t8673;
  t8683 = t8661 + t8674;
  t8710 = 0.241*t8330*t8683;
  t8462 = t529*t1792;
  t8467 = t5252*t1729*t5273;
  t8468 = t8462 + t8467;
  t7048 = t5252*t529*t1729;
  t7066 = -1.*t1792*t5273;
  t7104 = t7048 + t7066;
  t8863 = Sin(var1[3]);
  t2205 = -1.*t529*t1729*t1792;
  t5972 = -1.*t5252*t5273;
  t6630 = t2205 + t5972;
  t8861 = Cos(var1[3]);
  t8387 = t529*t1729*t8351;
  t8403 = -1.*t7811*t5273;
  t8404 = t8387 + t8403;
  t7825 = t529*t1729*t7811;
  t8079 = -1.*t7883*t5273;
  t8089 = t7825 + t8079;
  t8607 = -1.*t8434*t5252*t8426;
  t8461 = t8434*t5252*t457;
  t8471 = -1.*t8426*t8468;
  t8479 = t8461 + t8471;
  t8488 = -1.*t8434*t457*t1792;
  t8503 = -1.*t8426*t8492;
  t8505 = t8488 + t8503;
  t8508 = t8434*t457*t8351;
  t8535 = -1.*t8426*t8528;
  t8536 = t8508 + t8535;
  t8539 = t8434*t457*t7811;
  t8554 = -1.*t8426*t8553;
  t8564 = t8539 + t8554;
  t8615 = -1.*t529*t1792;
  t8617 = -1.*t5252*t1729*t5273;
  t8621 = t8615 + t8617;
  t9022 = t529*t1729*t1792;
  t9024 = t5252*t5273;
  t9026 = t9022 + t9024;
  t9033 = -1.*t529*t1729*t8351;
  t9034 = t7811*t5273;
  t9037 = t9033 + t9034;
  t9151 = t8861*t9037;
  t9153 = -1.*t8863*t8536;
  t9154 = t9151 + t9153;
  t9157 = 0.241*t7721*t9154;
  t8718 = 0.21935*t7157;
  t8725 = t7157*t7631;
  t8810 = t7157*t8809;
  t8812 = -1.*t7709*t7605;
  t8823 = t8816*t7605;
  t8825 = t8718 + t8725 + t8810 + t8812 + t8823;
  t8837 = -1.*t7157*t8816;
  t8838 = t8809*t7605;
  t8839 = t8280 + t8837 + t8309 + t8329 + t8838;
  t9044 = -1.*t529*t1729*t7811;
  t9045 = t7883*t5273;
  t9046 = t9044 + t9045;
  t9159 = -1.*t529*t1729*t8658;
  t9160 = t8351*t5273;
  t9161 = t9159 + t9160;
  t9162 = t8861*t9161;
  t9164 = t8434*t457*t8658;
  t9167 = -1.*t8426*t8673;
  t9193 = t9164 + t9167;
  t9194 = -1.*t8863*t9193;
  t9195 = t9162 + t9194;
  t9201 = 0.241*t8330*t9195;
  t8899 = -1.*t457*t8468;
  t8901 = t8607 + t8899;
  t8903 = t8434*t1792*t8426;
  t8904 = -1.*t457*t8492;
  t8907 = t8903 + t8904;
  t8910 = -1.*t8434*t8351*t8426;
  t8911 = -1.*t457*t8528;
  t8913 = t8910 + t8911;
  t8918 = -1.*t8434*t7811*t8426;
  t8919 = -1.*t457*t8553;
  t8920 = t8918 + t8919;
  t8943 = -1.*t5252*t457*t1729;
  t8944 = -1.*t8434*t5252*t8426*t5273;
  t8945 = t8943 + t8944;
  t8957 = t457*t1729*t1792;
  t8959 = t8434*t1792*t8426*t5273;
  t8960 = t8957 + t8959;
  t8970 = -1.*t457*t1729*t8351;
  t8971 = -1.*t8434*t8351*t8426*t5273;
  t8974 = t8970 + t8971;
  t8979 = -1.*t457*t1729*t7811;
  t8980 = -1.*t8434*t7811*t8426*t5273;
  t8981 = t8979 + t8980;
  t9013 = -1.*t5252*t529*t1729;
  t9014 = t1792*t5273;
  t9015 = t9013 + t9014;
  t9147 = t8861*t9026;
  t9148 = -1.*t8863*t8505;
  t9149 = t9147 + t9148;
  t9217 = t8861*t9046;
  t9218 = -1.*t8863*t8564;
  t9219 = t9217 + t9218;
  t9091 = -1.*t8434*t5252*t457;
  t9093 = -1.*t8426*t8621;
  t9095 = t9091 + t9093;
  t9369 = t8863*t9037;
  t9372 = t8861*t8536;
  t9378 = t9369 + t9372;
  t9386 = 0.241*t7721*t9378;
  t9391 = t8863*t9161;
  t9397 = t8861*t9193;
  t9400 = t9391 + t9397;
  t9404 = 0.241*t8330*t9400;
  t9462 = -1.*t8434;
  t9463 = 1. + t9462;
  t9464 = 0.0875*t9463;
  t9465 = 0.14451*t8434;
  t9466 = -0.031996*t5252;
  t9468 = 0.000482*t1792;
  t9469 = t9466 + t9468;
  t9470 = -1.*t1729*t9469;
  t9471 = t9464 + t9465 + t9470;
  t9446 = -1.*t5252;
  t9450 = 1. + t9446;
  t9451 = -0.21935*t9450;
  t9452 = -0.219832*t5252;
  t9454 = -0.031996*t1792;
  t9455 = t9451 + t9452 + t9454;
  t9485 = -1.*t529*t9471;
  t9488 = -1.*t9455*t5273;
  t9495 = t9485 + t9488;
  t9457 = t529*t9455;
  t9472 = -1.*t9471*t5273;
  t9478 = t9457 + t9472;
  t9508 = 0.05701*t1729;
  t9509 = t8434*t9469;
  t9510 = t9508 + t9509;
  t9482 = t1729*t8426;
  t9483 = -1.*t8434*t457*t5273;
  t9484 = t9482 + t9483;
  t9497 = t529*t9471;
  t9498 = t9455*t5273;
  t9499 = t9497 + t9498;
  t9436 = t8434*t5252*t8426;
  t9437 = t457*t8468;
  t9438 = t9436 + t9437;
  t9511 = t9510*t8426;
  t9512 = t457*t9478;
  t9513 = t9511 + t9512;
  t9516 = t457*t9510;
  t9517 = -1.*t8426*t9478;
  t9518 = t9516 + t9517;
  t9502 = t457*t1729;
  t9504 = t8434*t8426*t5273;
  t9505 = t9502 + t9504;
  t8629 = -1.*t8434*t1792*t8426;
  t8630 = t457*t8492;
  t8631 = t8629 + t8630;
  t9622 = 0.124119*t8434;
  t9623 = -0.21935*t1792;
  t9624 = -1.*t1792*t7631;
  t9625 = t5252*t7709;
  t9626 = t9623 + t9624 + t9625;
  t9627 = -1.*t1729*t9626;
  t9628 = t9464 + t9622 + t9627;
  t9615 = t5252*t7631;
  t9616 = t1792*t7709;
  t9617 = t9451 + t9615 + t9616;
  t9634 = -1.*t529*t9628;
  t9635 = -1.*t9617*t5273;
  t9636 = t9634 + t9635;
  t9618 = t529*t9617;
  t9629 = -1.*t9628*t5273;
  t9630 = t9618 + t9629;
  t9645 = 0.036619*t1729;
  t9647 = t8434*t9626;
  t9648 = t9645 + t9647;
  t9638 = t529*t9628;
  t9639 = t9617*t5273;
  t9642 = t9638 + t9639;
  t9649 = t9648*t8426;
  t9650 = t457*t9630;
  t9651 = t9649 + t9650;
  t9660 = t457*t9648;
  t9663 = -1.*t8426*t9630;
  t9668 = t9660 + t9663;
  t8841 = t8434*t7811*t8426;
  t8844 = t457*t8553;
  t8845 = t8841 + t8844;
  t8433 = -1.*t5252*t1729*t8426;
  t8435 = t8434*t5252*t457*t5273;
  t8436 = t8433 + t8435;
  t8442 = t1729*t1792*t8426;
  t8443 = -1.*t8434*t457*t1792*t5273;
  t8444 = t8442 + t8443;
  t8454 = -1.*t1729*t7811*t8426;
  t8455 = t8434*t457*t7811*t5273;
  t8457 = t8454 + t8455;
  t9549 = -1.*t8434*t529*t9499;
  t9550 = -1.*t9484*t9513;
  t9551 = -1.*t9505*t9518;
  t9554 = t9549 + t9550 + t9551;
  t9748 = -0.05701*t1729;
  t9749 = -1.*t8434*t9469;
  t9750 = t9748 + t9749;
  t9753 = 0.05701*t8434;
  t9754 = t9753 + t9470;
  t9755 = t9754*t8426;
  t9756 = -1.*t457*t9750*t5273;
  t9757 = t9755 + t9756;
  t9763 = t457*t9754;
  t9764 = t9750*t8426*t5273;
  t9765 = t9763 + t9764;
  t9739 = t8434*t8426;
  t9740 = t457*t1729*t5273;
  t9741 = t9739 + t9740;
  t9556 = t9499*t9015;
  t9557 = t9438*t9513;
  t9558 = t8479*t9518;
  t9559 = t9556 + t9557 + t9558;
  t9574 = t8434*t529*t9499;
  t9575 = t9484*t9513;
  t9587 = t9505*t9518;
  t9593 = t9574 + t9575 + t9587;
  t9771 = Power(t529,2);
  t9777 = t8434*t457;
  t9778 = -1.*t1729*t8426*t5273;
  t9779 = t9777 + t9778;
  t9606 = -1.*t9026*t9499;
  t9607 = -1.*t9513*t8631;
  t9608 = -1.*t9518*t8505;
  t9609 = t9606 + t9607 + t9608;
  t8450 = -1.*t1729*t8351*t8426;
  t8451 = t8434*t457*t8351*t5273;
  t8452 = t8450 + t8451;
  t9672 = t8434*t529*t9642;
  t9675 = t9484*t9651;
  t9676 = t9505*t9668;
  t9677 = t9672 + t9675 + t9676;
  t9813 = -0.036619*t1729;
  t9814 = -1.*t8434*t9626;
  t9817 = t9813 + t9814;
  t9820 = 0.036619*t8434;
  t9822 = t9820 + t9627;
  t9823 = t9822*t8426;
  t9824 = -1.*t457*t9817*t5273;
  t9825 = t9823 + t9824;
  t9829 = t457*t9822;
  t9830 = t9817*t8426*t5273;
  t9831 = t9829 + t9830;
  t9689 = -1.*t9642*t9037;
  t9690 = -1.*t9651*t8646;
  t9692 = -1.*t9668*t8536;
  t9695 = t9689 + t9690 + t9692;
  t9709 = -1.*t8434*t529*t9642;
  t9710 = -1.*t9484*t9651;
  t9712 = -1.*t9505*t9668;
  t9714 = t9709 + t9710 + t9712;
  t9728 = t9642*t9046;
  t9729 = t9651*t8845;
  t9730 = t9668*t8564;
  t9731 = t9728 + t9729 + t9730;
  t9882 = -1.*t9510*t8426;
  t9883 = -1.*t457*t9478;
  t9884 = t9882 + t9883;
  t9888 = -1.*t1729*t8426;
  t9889 = t8434*t457*t5273;
  t9890 = t9888 + t9889;
  t9924 = -1.*t9648*t8426;
  t9925 = -1.*t457*t9630;
  t9926 = t9924 + t9925;
  t8622 = t457*t8621;
  t8627 = t8607 + t8622;
  t10026 = 0.000482*t5252;
  t10027 = 0.031996*t1792;
  t10033 = t10026 + t10027;
  t10042 = t529*t9469;
  t10043 = t1729*t10033*t5273;
  t10044 = t10042 + t10043;
  t10034 = -1.*t529*t1729*t10033;
  t10037 = t9469*t5273;
  t10039 = t10034 + t10037;
  t10041 = t8434*t10033*t8426;
  t10045 = t457*t10044;
  t10054 = t10041 + t10045;
  t10076 = t8434*t457*t10033;
  t10077 = -1.*t8426*t10044;
  t10079 = t10076 + t10077;
  t10154 = -0.21935*t5252;
  t10155 = -1.*t5252*t7631;
  t10157 = -1.*t1792*t7709;
  t10164 = t10154 + t10155 + t10157;
  t10175 = t529*t9626;
  t10176 = t1729*t10164*t5273;
  t10177 = t10175 + t10176;
  t10165 = -1.*t529*t1729*t10164;
  t10168 = t9626*t5273;
  t10171 = t10165 + t10168;
  t10173 = t8434*t10164*t8426;
  t10181 = t457*t10177;
  t10183 = t10173 + t10181;
  t10185 = t8434*t457*t10164;
  t10186 = -1.*t8426*t10177;
  t10187 = t10185 + t10186;
  t10021 = 5.e-6*t8646;
  t10148 = t8646*t9714;
  t10255 = -1.*t1792*t8816;
  t10256 = t5252*t8809;
  t10257 = t10255 + t10256;
  t10265 = t5252*t8816;
  t10270 = t1792*t8809;
  t10272 = t10265 + t10270;
  t10279 = t529*t10272;
  t10286 = t1729*t10257*t5273;
  t10291 = t10279 + t10286;
  t10262 = -1.*t529*t1729*t10257;
  t10273 = t10272*t5273;
  t10274 = t10262 + t10273;
  t10193 = t9642*t9037;
  t10199 = t9651*t8646;
  t10200 = t9668*t8536;
  t10278 = t8434*t10257*t8426;
  t10292 = t457*t10291;
  t10293 = t10278 + t10292;
  t10301 = t8434*t457*t10257;
  t10302 = -1.*t8426*t10291;
  t10303 = t10301 + t10302;
  t10209 = t8683*t9677;
  t10219 = -1.*t9642*t9161;
  t10229 = -1.*t9651*t8683;
  t10230 = -1.*t9668*t9193;
  t9772 = -1.*t8434*t9771*t9750;
  t9774 = t529*t1729*t9499;
  t9747 = -1.*t8434*t5252*t529*t9499;
  t9752 = t529*t9750*t9015;
  t9789 = t8434*t9771*t9750;
  t10400 = Power(t5273,2);
  t9791 = -1.*t529*t1729*t9499;
  t9800 = -1.*t529*t9750*t9026;
  t9801 = -1.*t8434*t529*t1792*t9499;
  t9819 = t8434*t9771*t9817;
  t9827 = -1.*t529*t1729*t9642;
  t9839 = t8434*t529*t8351*t9642;
  t9840 = -1.*t529*t9817*t9037;
  t9856 = -1.*t8434*t9771*t9817;
  t9858 = t529*t1729*t9642;
  t9865 = -1.*t8434*t529*t7811*t9642;
  t9866 = t529*t9817*t9046;
  t10389 = -1.*t1729*t9510;
  t10390 = t8434*t5273*t9478;
  t10391 = t10389 + t10390 + t9549;
  t9500 = t8434*t5273*t9499;
  t9522 = t8468*t9499;
  t9527 = t9478*t9015;
  t10428 = t8434*t5252*t9510;
  t10429 = t8468*t9478;
  t10433 = t10428 + t10429 + t9556;
  t10447 = t1729*t9510;
  t10448 = -1.*t8434*t5273*t9478;
  t10449 = t10447 + t10448 + t9574;
  t9568 = -1.*t8434*t5273*t9499;
  t10479 = t8434*t9510*t1792;
  t10480 = -1.*t9478*t8492;
  t10481 = t10479 + t9606 + t10480;
  t9595 = -1.*t9026*t9478;
  t9597 = -1.*t9499*t8492;
  t10485 = t1729*t9648;
  t10486 = -1.*t8434*t5273*t9630;
  t10487 = t10485 + t10486 + t9672;
  t9643 = -1.*t8434*t5273*t9642;
  t9679 = -1.*t9642*t8528;
  t9680 = -1.*t9630*t9037;
  t10507 = -1.*t8434*t9648*t8351;
  t10508 = -1.*t9630*t8528;
  t10509 = t10507 + t10508 + t9689;
  t10513 = -1.*t1729*t9648;
  t10514 = t8434*t5273*t9630;
  t10515 = t10513 + t10514 + t9709;
  t9703 = t8434*t5273*t9642;
  t10532 = t8434*t9648*t7811;
  t10534 = t9630*t8553;
  t10535 = t10532 + t9728 + t10534;
  t9716 = t9630*t9046;
  t9718 = t9642*t8553;
  t10040 = -1.*t8434*t529*t10039;
  t10085 = t9026*t9499;
  t10086 = t10039*t9015;
  t10112 = t8434*t529*t10039;
  t10626 = Power(t8434,2);
  t10121 = -1.*t9026*t10039;
  t10125 = -1.*t9499*t7104;
  t10172 = -1.*t8434*t529*t10171;
  t10192 = t10171*t9046;
  t10212 = t8434*t529*t10171;
  t10225 = -1.*t10171*t9037;
  t10617 = 5.e-6*t9037;
  t10682 = t9037*t10515;
  t10276 = -1.*t8434*t529*t10274;
  t10683 = t8434*t9648*t8351;
  t10685 = t9630*t8528;
  t10311 = t10274*t9046;
  t10700 = t9161*t10487;
  t10335 = t8434*t529*t10274;
  t10703 = -1.*t8434*t9648*t8658;
  t10346 = -1.*t10274*t9037;
  t10705 = -1.*t9630*t8673;
  t10454 = t8434*t9510;
  t10457 = t1729*t9754;
  t10471 = -1.*t1729*t9510*t1792;
  t10472 = t8434*t9754*t1792;
  t10414 = -1.*t5252*t1729*t9510;
  t10416 = t8434*t5252*t9754;
  t10398 = -1.*t8434*t9510;
  t10399 = -1.*t1729*t9754;
  t10517 = -1.*t8434*t9648;
  t10519 = -1.*t1729*t9822;
  t10524 = -1.*t1729*t9648*t7811;
  t10525 = t8434*t9822*t7811;
  t10489 = t8434*t9648;
  t10490 = t1729*t9822;
  t10497 = t1729*t9648*t8351;
  t10498 = -1.*t8434*t9822*t8351;
  t10801 = -1.*t8434*t9471;
  t10802 = t10389 + t10801;
  t10627 = t10626*t5252*t10033;
  t10628 = -1.*t8434*t9510*t1792;
  t10779 = t8434*t9471;
  t10781 = t10447 + t10779;
  t10818 = -1.*t5252*t1729*t9471;
  t10820 = t9455*t1792;
  t10643 = t10626*t10033*t1792;
  t10892 = Power(t1729,2);
  t10827 = -1.*t8434*t9628;
  t10828 = t10513 + t10827;
  t10684 = t10626*t10164*t7811;
  t10853 = t8434*t9628;
  t10855 = t10485 + t10853;
  t10702 = -1.*t10626*t10164*t8351;
  t10918 = 5.e-6*t8434*t8351;
  t10842 = t9617*t7883;
  t10843 = -1.*t1729*t9628*t7811;
  t10844 = t10842 + t10532 + t10843;
  t10871 = t1729*t9628*t8351;
  t10872 = -1.*t9617*t7811;
  t10873 = t10507 + t10871 + t10872;
  t10919 = t8434*t10828*t8351;
  t10921 = -1.*t1729*t9628*t8351;
  t10927 = t9617*t7811;
  t10729 = t10626*t10257*t7811;
  t10938 = t8434*t10855*t8658;
  t10940 = -1.*t9617*t8351;
  t10754 = -1.*t10626*t10257*t8351;
  t10946 = t1729*t9628*t8658;
  t10991 = 5.e-6*t7811;
  t10992 = 0.008825179*t8351*t7721;
  t10993 = -0.124119*t7811;
  t10994 = -0.0875*t8658;
  t10996 = t10993 + t10994;
  t10997 = 0.241*t8330*t10996;
  p_output1[0]=var2[16]*(-0.5*(0.000736496*t8479 - 0.048889888*t8505 + 0.241*t8330*t8536 + 0.241*t7721*t8564)*var2[4] - 0.5*(-0.048889888*t457*t6630 + 0.000736496*t457*t7104 + 0.241*t457*t7721*t8089 + 0.241*t457*t8330*t8404)*var2[5] - 0.5*(0.000736496*t8436 - 0.048889888*t8444 + 0.241*t8330*t8452 + 0.241*t7721*t8457)*var2[15] - 0.5*(-0.048889888*t8627 + 0.000736496*t8631 + t8649 + t8710)*var2[16] - 0.5*(t8649 + t8710 + 0.241*t8646*t8825 + 0.241*t8839*t8845)*var2[17]);
  p_output1[1]=var2[16]*(-0.5*(0.000736496*(-1.*t8479*t8861 - 1.*t8863*t9015) - 0.048889888*(-1.*t8505*t8861 - 1.*t8863*t9026) + 0.241*t8330*(-1.*t8536*t8861 - 1.*t8863*t9037) + 0.241*t7721*(-1.*t8564*t8861 - 1.*t8863*t9046))*var2[3] - 0.5*(-0.000736496*t8863*t8901 + 0.048889888*t8863*t8907 - 0.241*t8330*t8863*t8913 - 0.241*t7721*t8863*t8920)*var2[4] - 0.5*(-0.048889888*(t8492*t8861 + t6630*t8426*t8863) + 0.000736496*(t8468*t8861 + t7104*t8426*t8863) + 0.241*t7721*(t8553*t8861 + t8089*t8426*t8863) + 0.241*t8330*(t8528*t8861 + t8404*t8426*t8863))*var2[5] - 0.5*(0.000736496*(-1.*t5252*t529*t8434*t8861 - 1.*t8863*t8945) - 0.048889888*(t1792*t529*t8434*t8861 - 1.*t8863*t8960) + 0.241*t8330*(-1.*t529*t8351*t8434*t8861 - 1.*t8863*t8974) + 0.241*t7721*(-1.*t529*t7811*t8434*t8861 - 1.*t8863*t8981))*var2[15] - 0.5*(-0.048889888*(t7104*t8861 - 1.*t8863*t9095) + 0.000736496*t9149 + t9157 + t9201)*var2[16] - 0.5*(0.241*t8825*t9154 + t9157 + t9201 + 0.241*t8839*t9219)*var2[17]);
  p_output1[2]=var2[16]*(-0.5*(0.000736496*(-1.*t8479*t8863 + t8861*t9015) - 0.048889888*t9149 + 0.241*t8330*t9154 + 0.241*t7721*t9219)*var2[3] - 0.5*(0.000736496*t8861*t8901 - 0.048889888*t8861*t8907 + 0.241*t8330*t8861*t8913 + 0.241*t7721*t8861*t8920)*var2[4] - 0.5*(0.000736496*(-1.*t7104*t8426*t8861 + t8468*t8863) - 0.048889888*(-1.*t6630*t8426*t8861 + t8492*t8863) + 0.241*t8330*(-1.*t8404*t8426*t8861 + t8528*t8863) + 0.241*t7721*(-1.*t8089*t8426*t8861 + t8553*t8863))*var2[5] - 0.5*(0.000736496*(-1.*t5252*t529*t8434*t8863 + t8861*t8945) - 0.048889888*(t1792*t529*t8434*t8863 + t8861*t8960) + 0.241*t8330*(-1.*t529*t8351*t8434*t8863 + t8861*t8974) + 0.241*t7721*(-1.*t529*t7811*t8434*t8863 + t8861*t8981))*var2[15] - 0.5*(0.000736496*(t8505*t8861 + t8863*t9026) - 0.048889888*(t7104*t8863 + t8861*t9095) + t9386 + t9404)*var2[16] - 0.5*(0.241*t8839*(t8564*t8861 + t8863*t9046) + 0.241*t8825*t9378 + t9386 + t9404)*var2[17]);
  p_output1[3]=var2[16]*(-0.5*(-0.000085*t8479 + 1.e-5*t8505 + 5.e-6*t8564 + 0.015477*t9505 - 0.048889888*(t8479*t9554 + t9505*t9559 + t9484*(t8479*t9513 + t8901*t9518 + t9438*t9518 + t8479*t9884) + t9438*(-1.*t9505*t9513 - 1.*t9484*t9518 - 1.*t9505*t9884 - 1.*t9518*t9890)) + 0.000736496*(t8505*t9593 + t9505*t9609 + t9484*(-1.*t8505*t9513 - 1.*t8631*t9518 - 1.*t8907*t9518 - 1.*t8505*t9884) + t8631*(t9505*t9513 + t9484*t9518 + t9505*t9884 + t9518*t9890)) + 0.241*t8330*(t8564*t9714 + t9505*t9731 + t9484*(t8564*t9651 + t8845*t9668 + t8920*t9668 + t8564*t9926) + t8845*(-1.*t9505*t9651 - 1.*t9484*t9668 - 1.*t9668*t9890 - 1.*t9505*t9926)) + 0.241*t7721*(t8536*t9677 + t9505*t9695 + t9484*(-1.*t8536*t9651 - 1.*t8646*t9668 - 1.*t8913*t9668 - 1.*t8536*t9926) + t8646*(t9505*t9651 + t9484*t9668 + t9668*t9890 + t9505*t9926)))*var2[4] - 0.5*(1.e-5*t457*t6630 - 0.000085*t457*t7104 + 5.e-6*t457*t8089 - 0.015477*t457*t529*t8434 - 0.048889888*(t9438*(-1.*t529*t8434*t9478 - 1.*t457*t9484*t9495 + t9500 + t8426*t9495*t9505 + t457*t529*t8434*t9513 - 1.*t529*t8426*t8434*t9518) + t9484*(-1.*t8426*t8479*t9495 + t457*t9438*t9495 + t457*t7104*t9513 - 1.*t7104*t8426*t9518 + t9522 + t9527) + t457*t7104*t9554 - 1.*t457*t529*t8434*t9559) + 0.000736496*(t8631*(t529*t8434*t9478 + t457*t9484*t9495 - 1.*t8426*t9495*t9505 - 1.*t457*t529*t8434*t9513 + t529*t8426*t8434*t9518 + t9568) + t457*t6630*t9593 + t9484*(t8426*t8505*t9495 - 1.*t457*t8631*t9495 - 1.*t457*t6630*t9513 + t6630*t8426*t9518 + t9595 + t9597) - 1.*t457*t529*t8434*t9609) + 0.241*t7721*(t8646*(t529*t8434*t9630 + t457*t9484*t9636 - 1.*t8426*t9505*t9636 + t9643 - 1.*t457*t529*t8434*t9651 + t529*t8426*t8434*t9668) + t457*t8404*t9677 + t9484*(t8426*t8536*t9636 - 1.*t457*t8646*t9636 - 1.*t457*t8404*t9651 + t8404*t8426*t9668 + t9679 + t9680) - 1.*t457*t529*t8434*t9695) + 0.241*t8330*(t8845*(-1.*t529*t8434*t9630 - 1.*t457*t9484*t9636 + t8426*t9505*t9636 + t457*t529*t8434*t9651 - 1.*t529*t8426*t8434*t9668 + t9703) + t457*t8089*t9714 + t9484*(-1.*t8426*t8564*t9636 + t457*t8845*t9636 + t457*t8089*t9651 - 1.*t8089*t8426*t9668 + t9716 + t9718) - 1.*t457*t529*t8434*t9731))*var2[5] - 0.5*(-0.000085*t8436 + 1.e-5*t8444 + 5.e-6*t8457 + 0.015477*t9741 - 0.048889888*(t8436*t9554 + t9559*t9741 + t9484*(t8436*t9513 + t8945*t9518 + t9747 + t9752 + t9438*t9757 + t8479*t9765) + t9438*(-1.*t9513*t9741 - 1.*t9484*t9757 - 1.*t9505*t9765 + t9772 + t9774 - 1.*t9518*t9779)) + 0.000736496*(t8444*t9593 + t9609*t9741 + t8631*(t9513*t9741 + t9484*t9757 + t9505*t9765 + t9518*t9779 + t9789 + t9791) + t9484*(-1.*t8444*t9513 - 1.*t8960*t9518 - 1.*t8631*t9757 - 1.*t8505*t9765 + t9800 + t9801)) + 0.241*t7721*(t8452*t9677 + t9695*t9741 + t8646*(t9651*t9741 + t9668*t9779 + t9819 + t9484*t9825 + t9827 + t9505*t9831) + t9484*(-1.*t8452*t9651 - 1.*t8974*t9668 - 1.*t8646*t9825 - 1.*t8536*t9831 + t9839 + t9840)) + 0.241*t8330*(t8457*t9714 + t9731*t9741 + t8845*(-1.*t9651*t9741 - 1.*t9668*t9779 - 1.*t9484*t9825 - 1.*t9505*t9831 + t9856 + t9858) + t9484*(t8457*t9651 + t8981*t9668 + t8845*t9825 + t8564*t9831 + t9865 + t9866)))*var2[15] - 0.5*(t10021 + 1.e-5*t8627 - 0.000085*t8631 + 0.241*t8330*(t10148 + (t10192 + t10193 + t10199 + t10200 + t10187*t8564 + t10183*t8845)*t9484 + t8845*(t10172 - 1.*t10183*t9484 - 1.*t10187*t9505)) + 0.241*t7721*(t10209 + (t10219 + t10225 + t10229 + t10230 - 1.*t10187*t8536 - 1.*t10183*t8646)*t9484 + t8646*(t10212 + t10183*t9484 + t10187*t9505)) - 0.048889888*(t9438*(t10040 - 1.*t10054*t9484 - 1.*t10079*t9505) + t9484*(t10085 + t10086 + t10079*t8479 + t10054*t9438 + t8631*t9513 + t8505*t9518) + t8631*t9554) + 0.000736496*(t8631*(t10112 + t10054*t9484 + t10079*t9505) + t9484*(t10121 + t10125 - 1.*t10079*t8505 - 1.*t10054*t8631 - 1.*t8627*t9513 - 1.*t9095*t9518) + t8627*t9593))*var2[16] - 0.5*(t10021 + 0.241*t8330*(t10148 + (t10193 + t10199 + t10200 + t10311 + t10303*t8564 + t10293*t8845)*t9484 + t8845*(t10276 - 1.*t10293*t9484 - 1.*t10303*t9505)) + 0.241*t7721*(t10209 + (t10219 + t10229 + t10230 + t10346 - 1.*t10303*t8536 - 1.*t10293*t8646)*t9484 + t8646*(t10335 + t10293*t9484 + t10303*t9505)) + 0.241*t8839*(t8646*t9677 + t9484*t9695) + 0.241*t8825*(t8845*t9714 + t9484*t9731))*var2[17]);
  p_output1[4]=var2[16]*(-0.5*(-0.015477*t5273*t8434 - 0.000085*t8468 + 1.e-5*t8492 + 5.e-6*t8553 - 0.048889888*(-1.*t10433*t5273*t8434 + t10391*t8468 + t9015*(t5273*t8434*t9495 + t9500) + t529*t8434*(t7104*t9478 + t8468*t9495 + t9522 + t9527)) + 0.000736496*(-1.*t10481*t5273*t8434 + t10449*t8492 + t9026*(-1.*t5273*t8434*t9495 + t9568) + t529*t8434*(-1.*t6630*t9478 - 1.*t8492*t9495 + t9595 + t9597)) + 0.241*t7721*(-1.*t10509*t5273*t8434 + t10487*t8528 + t9037*(-1.*t5273*t8434*t9636 + t9643) + t529*t8434*(-1.*t8404*t9630 - 1.*t8528*t9636 + t9679 + t9680)) + 0.241*t8330*(-1.*t10535*t5273*t8434 + t10515*t8553 + t9046*(t5273*t8434*t9636 + t9703) + t529*t8434*(t8089*t9630 + t8553*t9636 + t9716 + t9718)))*var2[5] - 0.5*(-0.015477*t1729*t529 + 1.e-5*t1792*t529*t8434 + 0.000085*t5252*t529*t8434 - 5.e-6*t529*t7811*t8434 - 0.048889888*(-1.*t10433*t1729*t529 - 1.*t10391*t5252*t529*t8434 + t529*t8434*(t10414 + t10416 + t5252*t5273*t8434*t9478 + t9747 - 1.*t5273*t8468*t9750 + t9752) + t9015*(t10398 + t10399 - 1.*t1729*t5273*t9478 - 1.*t10400*t8434*t9750 + t9772 + t9774)) + 0.000736496*(-1.*t10481*t1729*t529 + t10449*t1792*t529*t8434 + t9026*(t10454 + t10457 + t1729*t5273*t9478 + t10400*t8434*t9750 + t9789 + t9791) + t529*t8434*(t10471 + t10472 + t1792*t5273*t8434*t9478 + t5273*t8492*t9750 + t9800 + t9801)) + 0.241*t7721*(-1.*t10509*t1729*t529 - 1.*t10487*t529*t8351*t8434 + t9037*(t10489 + t10490 + t1729*t5273*t9630 + t10400*t8434*t9817 + t9819 + t9827) + t529*t8434*(t10497 + t10498 - 1.*t5273*t8351*t8434*t9630 + t5273*t8528*t9817 + t9839 + t9840)) + 0.241*t8330*(-1.*t10535*t1729*t529 - 1.*t10515*t529*t7811*t8434 + t9046*(t10517 + t10519 - 1.*t1729*t5273*t9630 - 1.*t10400*t8434*t9817 + t9856 + t9858) + t529*t8434*(t10524 + t10525 + t5273*t7811*t8434*t9630 - 1.*t5273*t8553*t9817 + t9865 + t9866)))*var2[15] - 0.5*(t10617 + 1.e-5*t7104 - 0.000085*t9026 + 0.241*t7721*(t10700 + t529*t8434*(t10219 + t10225 + t10702 + t10703 + t10705 - 1.*t10177*t8528) + (t10212 + t10164*t1729*t8434 - 1.*t10177*t5273*t8434)*t9037) + 0.241*t8330*(t10682 + t529*t8434*(t10192 + t10193 + t10683 + t10684 + t10685 + t10177*t8553) + (t10172 - 1.*t10164*t1729*t8434 + t10177*t5273*t8434)*t9046) - 0.048889888*((t10040 - 1.*t10033*t1729*t8434 + t10044*t5273*t8434)*t9015 + t10391*t9026 + t529*t8434*(t10085 + t10086 + t10627 + t10628 + t10044*t8468 + t8492*t9478)) + 0.000736496*(t10449*t7104 + (t10112 + t10033*t1729*t8434 - 1.*t10044*t5273*t8434)*t9026 + t529*t8434*(t10121 + t10125 + t10428 + t10643 - 1.*t10044*t8492 - 1.*t8621*t9478)))*var2[16] - 0.5*(t10617 + 0.241*t8839*(t10509*t529*t8434 + t10487*t9037) + 0.241*t7721*(t10700 + t529*t8434*(t10219 + t10346 + t10703 + t10705 + t10754 - 1.*t10291*t8528) + (t10335 + t10257*t1729*t8434 - 1.*t10291*t5273*t8434)*t9037) + 0.241*t8825*(t10535*t529*t8434 + t10515*t9046) + 0.241*t8330*(t10682 + t529*t8434*(t10193 + t10311 + t10683 + t10685 + t10729 + t10291*t8553) + (t10276 - 1.*t10257*t1729*t8434 + t10291*t5273*t8434)*t9046))*var2[17]);
  p_output1[5]=var2[16]*(-0.5*(1.e-5*t1729*t1792 + 0.000085*t1729*t5252 - 5.e-6*t1729*t7811 + 0.015477*t8434 - 0.048889888*(-1.*t10802*t1729*t5252 + (t10428 + t10818 + t10820)*t8434 + t1729*(t10414 + t10416 - 1.*t5252*t8434*t9471 - 1.*t1729*t5252*t9750) + t5252*t8434*(t10398 + t10399 + t1729*t9471 - 1.*t8434*t9750)) + 0.000736496*(t10781*t1729*t1792 + t8434*(t10479 - 1.*t5252*t9455 - 1.*t1729*t1792*t9471) + t1729*(t10471 + t10472 - 1.*t1792*t8434*t9471 - 1.*t1729*t1792*t9750) - 1.*t1792*t8434*(t10454 + t10457 - 1.*t1729*t9471 + t8434*t9750)) + 0.241*t8330*(-1.*t10828*t1729*t7811 + t10844*t8434 + t1729*(t10524 + t10525 - 1.*t7811*t8434*t9628 - 1.*t1729*t7811*t9817) + t7811*t8434*(t10517 + t10519 + t1729*t9628 - 1.*t8434*t9817)) + 0.241*t7721*(-1.*t10855*t1729*t8351 + t10873*t8434 + t1729*(t10497 + t10498 + t8351*t8434*t9628 + t1729*t8351*t9817) + t8351*t8434*(t10489 + t10490 - 1.*t1729*t9628 + t8434*t9817)))*var2[15] - 0.5*(t10918 + 0.000085*t1792*t8434 - 1.e-5*t5252*t8434 + 0.000736496*(-1.*t10781*t5252*t8434 + t1729*(t10428 + t10643 + t10818 + t10820 + t10033*t10892*t1792 - 1.*t5252*t9469)) - 0.048889888*(-1.*t10802*t1792*t8434 + t1729*(t10627 + t10628 + t10033*t10892*t5252 + t5252*t9455 + t1792*t9469 + t1729*t1792*t9471)) + 0.241*t7721*(t10938 + t1729*(t10702 + t10703 + t10940 + t10946 - 1.*t10164*t10892*t8351 - 1.*t7811*t9626)) + 0.241*t8330*(t10919 + t1729*(t10683 + t10684 + t10921 + t10927 + t10164*t10892*t7811 + t7883*t9626)))*var2[16] - 0.5*(t10918 + 0.241*(t10919 + t1729*(t10683 + t10729 + t10921 + t10927 + t10257*t10892*t7811 + t10272*t7883))*t8330 + 0.241*t7721*(t10938 + t1729*(t10703 + t10754 + t10940 + t10946 - 1.*t10272*t7811 - 1.*t10257*t10892*t8351)) + 0.241*(t10844*t1729 + t10828*t7811*t8434)*t8825 + 0.241*(t10873*t1729 + t10855*t8351*t8434)*t8839)*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=var2[16]*(-0.5*(t10991 + t10992 + t10997 - 0.00005198763696*t1792 + 0.00270221251488*t5252)*var2[16] - 0.5*(t10991 + t10992 + t10997 + 0.241*(-0.124119*t7883 - 0.0875*t8351)*t8825 + 0.008825179*t7811*t8839)*var2[17]);
  p_output1[16]=-0.5*(0.482*t8330*t8825 + 0.482*t7721*t8839)*var2[16]*var2[17];
  p_output1[17]=-0.5*(-0.02973458*t8825 + 0.000529236*t8839)*var2[16]*var2[17];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec17_laikago_description.hh"

namespace SymFunction
{

void Ce1_vec17_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
