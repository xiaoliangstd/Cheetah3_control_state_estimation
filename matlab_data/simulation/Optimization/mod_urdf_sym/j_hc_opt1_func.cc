/*
 * Automatically Generated from Mathematica.
 * Thu 12 Dec 2019 13:01:24 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t532;
  double t882;
  double t768;
  double t140;
  double t910;
  double t781;
  double t1018;
  double t1062;
  double t1343;
  double t1180;
  double t1196;
  double t1270;
  double t1115;
  double t1521;
  double t1523;
  double t1565;
  double t1570;
  double t1579;
  double t1587;
  double t1770;
  double t1776;
  double t1777;
  double t1366;
  double t1781;
  double t1801;
  double t1839;
  double t1600;
  double t1617;
  double t1780;
  double t1856;
  double t1880;
  double t1622;
  double t1644;
  double t2221;
  double t2243;
  double t2263;
  double t2274;
  double t2397;
  double t2412;
  double t2382;
  double t2410;
  double t2428;
  double t2438;
  double t2441;
  double t2447;
  double t2506;
  double t2615;
  double t2632;
  double t2830;
  double t2867;
  double t2886;
  double t2681;
  double t2693;
  double t3044;
  double t3048;
  double t3073;
  double t1076;
  double t3261;
  double t3182;
  double t3308;
  double t3336;
  double t3374;
  double t3375;
  double t3393;
  double t3394;
  double t1779;
  double t3273;
  double t3404;
  double t3434;
  double t3565;
  double t3575;
  double t3602;
  double t3458;
  double t3465;
  double t2231;
  double t3746;
  double t3753;
  double t3755;
  double t2375;
  double t3880;
  double t3875;
  double t3916;
  double t3919;
  double t3921;
  double t3922;
  double t3931;
  double t3941;
  double t2819;
  double t3894;
  double t3947;
  double t3990;
  double t4025;
  double t4034;
  double t4039;
  double t3997;
  double t3998;
  double t3039;
  double t4165;
  double t4174;
  double t4179;
  double t4343;
  double t4358;
  double t4362;
  double t4377;
  double t4381;
  double t4417;
  double t4586;
  double t4606;
  double t4609;
  double t4639;
  double t4651;
  double t4652;
  double t4795;
  double t4805;
  double t4827;
  double t4849;
  double t4852;
  double t4861;
  double t4335;
  double t4952;
  double t4959;
  double t4961;
  double t4967;
  double t4968;
  double t4969;
  double t4482;
  double t5064;
  double t5066;
  double t5079;
  double t5083;
  double t5089;
  double t5093;
  double t4719;
  double t5182;
  double t5195;
  double t5209;
  double t5211;
  double t5222;
  double t5223;
  double t4292;
  double t5321;
  double t5324;
  double t5330;
  double t5331;
  double t5334;
  double t5352;
  double t4479;
  double t5441;
  double t5459;
  double t5460;
  double t5464;
  double t5468;
  double t5474;
  double t4728;
  double t5584;
  double t5585;
  double t5589;
  double t5620;
  double t5621;
  double t5639;
  double t4926;
  double t5319;
  double t5773;
  double t5789;
  double t5801;
  double t5804;
  double t5805;
  double t5816;
  double t5033;
  double t5427;
  double t5952;
  double t5953;
  double t5955;
  double t5961;
  double t5965;
  double t5982;
  double t5552;
  double t5152;
  double t6048;
  double t6050;
  double t6052;
  double t6053;
  double t6057;
  double t6065;
  double t6109;
  double t6111;
  double t6113;
  double t6126;
  double t6127;
  double t6128;
  double t6129;
  double t6135;
  double t6145;
  double t6173;
  double t6175;
  double t6176;
  double t6202;
  double t6210;
  double t6211;
  double t6221;
  double t6223;
  double t6224;
  double t6106;
  double t6298;
  double t6299;
  double t6300;
  double t6305;
  double t6309;
  double t6310;
  double t6165;
  double t6373;
  double t6379;
  double t6384;
  double t6396;
  double t6399;
  double t6404;
  double t6107;
  double t6454;
  double t6457;
  double t6458;
  double t6468;
  double t6472;
  double t6477;
  double t6177;
  double t6555;
  double t6556;
  double t6558;
  double t6566;
  double t6573;
  double t6578;
  double t6429;
  double t6265;
  double t6654;
  double t6666;
  double t6676;
  double t6683;
  double t6689;
  double t6690;
  double t6513;
  double t6358;
  double t6770;
  double t6771;
  double t6776;
  double t6778;
  double t6780;
  double t6783;
  double t6814;
  double t6815;
  double t6816;
  double t6848;
  double t6849;
  double t6850;
  double t6853;
  double t6856;
  double t6857;
  double t3092;
  double t6885;
  double t6888;
  double t6925;
  double t6927;
  double t6929;
  double t6930;
  double t6933;
  double t6939;
  double t6862;
  double t6975;
  double t6980;
  double t6981;
  double t6984;
  double t6987;
  double t6989;
  double t6990;
  double t6893;
  double t7020;
  double t7021;
  double t7022;
  double t7026;
  double t7027;
  double t7030;
  double t7033;
  double t7124;
  double t7125;
  double t7126;
  double t7154;
  double t7155;
  double t7160;
  double t2302;
  double t7194;
  double t7195;
  double t7231;
  double t7225;
  double t7232;
  double t7233;
  double t7170;
  double t7254;
  double t7257;
  double t7251;
  double t7259;
  double t7266;
  double t7197;
  double t7294;
  double t7298;
  double t7302;
  double t7305;
  double t7308;
  double t7403;
  double t7404;
  double t7405;
  double t7425;
  double t7428;
  double t7432;
  double t4198;
  double t7465;
  double t7471;
  double t7492;
  double t7491;
  double t7503;
  double t7507;
  double t7437;
  double t7545;
  double t7546;
  double t7539;
  double t7548;
  double t7549;
  double t7474;
  double t7572;
  double t7578;
  double t7580;
  double t7583;
  double t7584;
  double t7650;
  double t7651;
  double t7654;
  double t7677;
  double t7678;
  double t7681;
  double t3789;
  double t7698;
  double t7702;
  double t7731;
  double t7730;
  double t7734;
  double t7738;
  double t7683;
  double t7765;
  double t7766;
  double t7763;
  double t7773;
  double t7775;
  double t7707;
  double t7799;
  double t7802;
  double t7803;
  double t7809;
  double t7813;
  t532 = Cos(var1[5]);
  t882 = Sin(var1[3]);
  t768 = Sin(var1[4]);
  t140 = Cos(var1[3]);
  t910 = Sin(var1[5]);
  t781 = t140*t532*t768;
  t1018 = t882*t910;
  t1062 = t781 + t1018;
  t1343 = Cos(var1[9]);
  t1180 = -1.*t532*t882*t768;
  t1196 = t140*t910;
  t1270 = t1180 + t1196;
  t1115 = Sin(var1[9]);
  t1521 = Cos(var1[10]);
  t1523 = t1343*t1270;
  t1565 = -1.*t1115;
  t1570 = 0. + t1565;
  t1579 = t1570*t1062;
  t1587 = t1523 + t1579;
  t1770 = -1.*t532*t882;
  t1776 = t140*t768*t910;
  t1777 = t1770 + t1776;
  t1366 = 0. + t1343;
  t1781 = -1.*t140*t532;
  t1801 = -1.*t882*t768*t910;
  t1839 = t1781 + t1801;
  t1600 = Cos(var1[11]);
  t1617 = 0. + t1600;
  t1780 = t1570*t1777;
  t1856 = t1343*t1839;
  t1880 = t1780 + t1856;
  t1622 = Sin(var1[10]);
  t1644 = Sin(var1[11]);
  t2221 = Cos(var1[4]);
  t2243 = t140*t2221*t1570;
  t2263 = -1.*t1343*t2221*t882;
  t2274 = t2243 + t2263;
  t2397 = Cos(var1[6]);
  t2412 = Sin(var1[6]);
  t2382 = Cos(var1[7]);
  t2410 = t2397*t1270;
  t2428 = -1.*t2412;
  t2438 = 0. + t2428;
  t2441 = t1062*t2438;
  t2447 = t2410 + t2441;
  t2506 = 0. + t2397;
  t2615 = Cos(var1[8]);
  t2632 = 0. + t2615;
  t2830 = t2397*t1839;
  t2867 = t1777*t2438;
  t2886 = t2830 + t2867;
  t2681 = Sin(var1[7]);
  t2693 = Sin(var1[8]);
  t3044 = -1.*t2221*t2397*t882;
  t3048 = t140*t2221*t2438;
  t3073 = t3044 + t3048;
  t1076 = 0.0875*t1062;
  t3261 = Cos(var1[15]);
  t3182 = Sin(var1[15]);
  t3308 = Cos(var1[16]);
  t3336 = t3261*t1270;
  t3374 = -1.*t3182;
  t3375 = 0. + t3374;
  t3393 = t3375*t1062;
  t3394 = t3336 + t3393;
  t1779 = 0.0875*t1777;
  t3273 = 0. + t3261;
  t3404 = Cos(var1[17]);
  t3434 = 0. + t3404;
  t3565 = t3375*t1777;
  t3575 = t3261*t1839;
  t3602 = t3565 + t3575;
  t3458 = Sin(var1[16]);
  t3465 = Sin(var1[17]);
  t2231 = 0.0875*t140*t2221;
  t3746 = t140*t2221*t3375;
  t3753 = -1.*t3261*t2221*t882;
  t3755 = t3746 + t3753;
  t2375 = -0.0875*t1062;
  t3880 = Cos(var1[12]);
  t3875 = Sin(var1[12]);
  t3916 = Cos(var1[13]);
  t3919 = t3880*t1270;
  t3921 = -1.*t3875;
  t3922 = 0. + t3921;
  t3931 = t3922*t1062;
  t3941 = t3919 + t3931;
  t2819 = -0.0875*t1777;
  t3894 = 0. + t3880;
  t3947 = Cos(var1[14]);
  t3990 = 0. + t3947;
  t4025 = t3922*t1777;
  t4034 = t3880*t1839;
  t4039 = t4025 + t4034;
  t3997 = Sin(var1[13]);
  t3998 = Sin(var1[14]);
  t3039 = -0.0875*t140*t2221;
  t4165 = t140*t2221*t3922;
  t4174 = -1.*t3880*t2221*t882;
  t4179 = t4165 + t4174;
  t4343 = t1343*t140*t2221*t532;
  t4358 = t2221*t532*t1570*t882;
  t4362 = t4343 + t4358;
  t4377 = t1521*t4362;
  t4381 = -1.*t532*t1622*t768;
  t4417 = t4377 + t4381;
  t4586 = -1.*t1622*t768*t910;
  t4606 = t1343*t140*t2221*t910;
  t4609 = t2221*t1570*t882*t910;
  t4639 = t4606 + t4609;
  t4651 = t1521*t4639;
  t4652 = t4586 + t4651;
  t4795 = -1.*t2221*t1622;
  t4805 = -1.*t1343*t140*t768;
  t4827 = -1.*t1570*t882*t768;
  t4849 = t4805 + t4827;
  t4852 = t1521*t4849;
  t4861 = t4795 + t4852;
  t4335 = -0.21935*t532*t768;
  t4952 = t140*t2221*t532*t2397;
  t4959 = t2221*t532*t882*t2438;
  t4961 = t4952 + t4959;
  t4967 = t2382*t4961;
  t4968 = -1.*t532*t768*t2681;
  t4969 = t4967 + t4968;
  t4482 = -0.21935*t768*t910;
  t5064 = t140*t2221*t2397*t910;
  t5066 = t2221*t882*t910*t2438;
  t5079 = t5064 + t5066;
  t5083 = t2382*t5079;
  t5089 = -1.*t768*t910*t2681;
  t5093 = t5083 + t5089;
  t4719 = -0.21935*t2221;
  t5182 = -1.*t140*t2397*t768;
  t5195 = -1.*t882*t768*t2438;
  t5209 = t5182 + t5195;
  t5211 = t2382*t5209;
  t5222 = -1.*t2221*t2681;
  t5223 = t5211 + t5222;
  t4292 = 0.0875*t2221*t532*t882;
  t5321 = t3261*t140*t2221*t532;
  t5324 = t2221*t532*t3375*t882;
  t5330 = t5321 + t5324;
  t5331 = t3308*t5330;
  t5334 = -1.*t532*t3458*t768;
  t5352 = t5331 + t5334;
  t4479 = 0.0875*t2221*t882*t910;
  t5441 = -1.*t3458*t768*t910;
  t5459 = t3261*t140*t2221*t910;
  t5460 = t2221*t3375*t882*t910;
  t5464 = t5459 + t5460;
  t5468 = t3308*t5464;
  t5474 = t5441 + t5468;
  t4728 = -0.0875*t882*t768;
  t5584 = -1.*t2221*t3458;
  t5585 = -1.*t3261*t140*t768;
  t5589 = -1.*t3375*t882*t768;
  t5620 = t5585 + t5589;
  t5621 = t3308*t5620;
  t5639 = t5584 + t5621;
  t4926 = -0.0875*t2221*t532*t882;
  t5319 = 0.21935*t532*t768;
  t5773 = t3880*t140*t2221*t532;
  t5789 = t2221*t532*t3922*t882;
  t5801 = t5773 + t5789;
  t5804 = t3916*t5801;
  t5805 = -1.*t532*t3997*t768;
  t5816 = t5804 + t5805;
  t5033 = -0.0875*t2221*t882*t910;
  t5427 = 0.21935*t768*t910;
  t5952 = -1.*t3997*t768*t910;
  t5953 = t3880*t140*t2221*t910;
  t5955 = t2221*t3922*t882*t910;
  t5961 = t5953 + t5955;
  t5965 = t3916*t5961;
  t5982 = t5952 + t5965;
  t5552 = 0.21935*t2221;
  t5152 = 0.0875*t882*t768;
  t6048 = -1.*t2221*t3997;
  t6050 = -1.*t3880*t140*t768;
  t6052 = -1.*t3922*t882*t768;
  t6053 = t6050 + t6052;
  t6057 = t3916*t6053;
  t6065 = t6048 + t6057;
  t6109 = t532*t882;
  t6111 = -1.*t140*t768*t910;
  t6113 = t6109 + t6111;
  t6126 = -1.*t2221*t1622*t910;
  t6127 = t1343*t6113;
  t6128 = t1570*t1839;
  t6129 = t6127 + t6128;
  t6135 = t1521*t6129;
  t6145 = t6126 + t6135;
  t6173 = t532*t882*t768;
  t6175 = -1.*t140*t910;
  t6176 = t6173 + t6175;
  t6202 = t2221*t532*t1622;
  t6210 = t1570*t6176;
  t6211 = t1343*t1062;
  t6221 = t6210 + t6211;
  t6223 = t1521*t6221;
  t6224 = t6202 + t6223;
  t6106 = -0.21935*t2221*t910;
  t6298 = t2397*t6113;
  t6299 = t1839*t2438;
  t6300 = t6298 + t6299;
  t6305 = t2382*t6300;
  t6309 = -1.*t2221*t910*t2681;
  t6310 = t6305 + t6309;
  t6165 = 0.21935*t2221*t532;
  t6373 = t2397*t1062;
  t6379 = t6176*t2438;
  t6384 = t6373 + t6379;
  t6396 = t2382*t6384;
  t6399 = t2221*t532*t2681;
  t6404 = t6396 + t6399;
  t6107 = 0.0875*t1839;
  t6454 = -1.*t2221*t3458*t910;
  t6457 = t3261*t6113;
  t6458 = t3375*t1839;
  t6468 = t6457 + t6458;
  t6472 = t3308*t6468;
  t6477 = t6454 + t6472;
  t6177 = 0.0875*t6176;
  t6555 = t2221*t532*t3458;
  t6556 = t3375*t6176;
  t6558 = t3261*t1062;
  t6566 = t6556 + t6558;
  t6573 = t3308*t6566;
  t6578 = t6555 + t6573;
  t6429 = 0.21935*t2221*t910;
  t6265 = -0.0875*t1839;
  t6654 = -1.*t2221*t3997*t910;
  t6666 = t3880*t6113;
  t6676 = t3922*t1839;
  t6683 = t6666 + t6676;
  t6689 = t3916*t6683;
  t6690 = t6654 + t6689;
  t6513 = -0.21935*t2221*t532;
  t6358 = -0.0875*t6176;
  t6770 = t2221*t532*t3997;
  t6771 = t3922*t6176;
  t6776 = t3880*t1062;
  t6778 = t6771 + t6776;
  t6780 = t3916*t6778;
  t6783 = t6770 + t6780;
  t6814 = -1.*t2397*t6176;
  t6815 = -1.*t1062*t2412;
  t6816 = t6814 + t6815;
  t6848 = t140*t532;
  t6849 = t882*t768*t910;
  t6850 = t6848 + t6849;
  t6853 = -1.*t2397*t6850;
  t6856 = -1.*t1777*t2412;
  t6857 = t6853 + t6856;
  t3092 = -1.*t2221*t882*t2412;
  t6885 = -1.*t140*t2221*t2412;
  t6888 = t3044 + t6885;
  t6925 = t2221*t532;
  t6927 = 0. + t6925;
  t6929 = t6927*t2382;
  t6930 = 0. + t6373 + t6379;
  t6933 = -1.*t6930*t2681;
  t6939 = t6929 + t6933;
  t6862 = t2397*t1777;
  t6975 = t2221*t910;
  t6980 = 0. + t6975;
  t6981 = t2382*t6980;
  t6984 = t6850*t2438;
  t6987 = 0. + t6862 + t6984;
  t6989 = -1.*t6987*t2681;
  t6990 = t6981 + t6989;
  t6893 = t140*t2221*t2397;
  t7020 = -1.*t768;
  t7021 = 0. + t7020;
  t7022 = t2382*t7021;
  t7026 = t2221*t882*t2438;
  t7027 = 0. + t6893 + t7026;
  t7030 = -1.*t7027*t2681;
  t7033 = t7022 + t7030;
  t7124 = -1.*t1343*t6176;
  t7125 = -1.*t1115*t1062;
  t7126 = t7124 + t7125;
  t7154 = -1.*t1115*t1777;
  t7155 = -1.*t1343*t6850;
  t7160 = t7154 + t7155;
  t2302 = -1.*t2221*t1115*t882;
  t7194 = -1.*t140*t2221*t1115;
  t7195 = t7194 + t2263;
  t7231 = 0. + t6210 + t6211;
  t7225 = t1521*t6927;
  t7232 = -1.*t1622*t7231;
  t7233 = t7225 + t7232;
  t7170 = t1343*t1777;
  t7254 = t1570*t6850;
  t7257 = 0. + t7170 + t7254;
  t7251 = t1521*t6980;
  t7259 = -1.*t1622*t7257;
  t7266 = t7251 + t7259;
  t7197 = t1343*t140*t2221;
  t7294 = t2221*t1570*t882;
  t7298 = 0. + t7197 + t7294;
  t7302 = -1.*t1622*t7298;
  t7305 = t1521*t7021;
  t7308 = t7302 + t7305;
  t7403 = -1.*t3880*t6176;
  t7404 = -1.*t3875*t1062;
  t7405 = t7403 + t7404;
  t7425 = -1.*t3875*t1777;
  t7428 = -1.*t3880*t6850;
  t7432 = t7425 + t7428;
  t4198 = -1.*t2221*t3875*t882;
  t7465 = -1.*t140*t2221*t3875;
  t7471 = t7465 + t4174;
  t7492 = 0. + t6771 + t6776;
  t7491 = t3916*t6927;
  t7503 = -1.*t3997*t7492;
  t7507 = t7491 + t7503;
  t7437 = t3880*t1777;
  t7545 = t3922*t6850;
  t7546 = 0. + t7437 + t7545;
  t7539 = t3916*t6980;
  t7548 = -1.*t3997*t7546;
  t7549 = t7539 + t7548;
  t7474 = t3880*t140*t2221;
  t7572 = t2221*t3922*t882;
  t7578 = 0. + t7474 + t7572;
  t7580 = -1.*t3997*t7578;
  t7583 = t3916*t7021;
  t7584 = t7580 + t7583;
  t7650 = -1.*t3261*t6176;
  t7651 = -1.*t3182*t1062;
  t7654 = t7650 + t7651;
  t7677 = -1.*t3182*t1777;
  t7678 = -1.*t3261*t6850;
  t7681 = t7677 + t7678;
  t3789 = -1.*t2221*t3182*t882;
  t7698 = -1.*t140*t2221*t3182;
  t7702 = t7698 + t3753;
  t7731 = 0. + t6556 + t6558;
  t7730 = t3308*t6927;
  t7734 = -1.*t3458*t7731;
  t7738 = t7730 + t7734;
  t7683 = t3261*t1777;
  t7765 = t3375*t6850;
  t7766 = 0. + t7683 + t7765;
  t7763 = t3308*t6980;
  t7773 = -1.*t3458*t7766;
  t7775 = t7763 + t7773;
  t7707 = t3261*t140*t2221;
  t7799 = t2221*t3375*t882;
  t7802 = 0. + t7707 + t7799;
  t7803 = -1.*t3458*t7802;
  t7809 = t3308*t7021;
  t7813 = t7803 + t7809;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=1.;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=1.;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=1.;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=1.;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=1.;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=1.;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=1.;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=1.;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=1.;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=1.;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=1.;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=1.;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=1.;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=1.;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=1.;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=t1076 + 0.037*(t1115*t1270 + t1062*t1366) - 0.25*t1521*t1587 - 0.27*(t1521*t1587*t1617 - 1.*t1587*t1622*t1644);
  p_output1[61]=t1779 + 0.037*(t1366*t1777 + t1115*t1839) - 0.25*t1521*t1880 - 0.27*(t1521*t1617*t1880 - 1.*t1622*t1644*t1880);
  p_output1[62]=t2231 - 0.25*t1521*t2274 - 0.27*(t1521*t1617*t2274 - 1.*t1622*t1644*t2274) + 0.037*(t1366*t140*t2221 + t2302);
  p_output1[63]=t2375 - 0.25*t2382*t2447 - 0.037*(t1270*t2412 + t1062*t2506) - 0.27*(t2382*t2447*t2632 - 1.*t2447*t2681*t2693);
  p_output1[64]=-0.037*(t1839*t2412 + t1777*t2506) + t2819 - 0.25*t2382*t2886 - 0.27*(t2382*t2632*t2886 - 1.*t2681*t2693*t2886);
  p_output1[65]=t3039 - 0.25*t2382*t3073 - 0.27*(t2382*t2632*t3073 - 1.*t2681*t2693*t3073) - 0.037*(t140*t2221*t2506 + t3092);
  p_output1[66]=t1076 + 0.037*(t1270*t3182 + t1062*t3273) - 0.25*t3308*t3394 - 0.27*(t3308*t3394*t3434 - 1.*t3394*t3458*t3465);
  p_output1[67]=t1779 + 0.037*(t1839*t3182 + t1777*t3273) - 0.25*t3308*t3602 - 0.27*(t3308*t3434*t3602 - 1.*t3458*t3465*t3602);
  p_output1[68]=t2231 - 0.25*t3308*t3755 - 0.27*(t3308*t3434*t3755 - 1.*t3458*t3465*t3755) + 0.037*(t140*t2221*t3273 + t3789);
  p_output1[69]=t2375 - 0.037*(t1270*t3875 + t1062*t3894) - 0.25*t3916*t3941 - 0.27*(t3916*t3941*t3990 - 1.*t3941*t3997*t3998);
  p_output1[70]=t2819 - 0.037*(t1839*t3875 + t1777*t3894) - 0.25*t3916*t4039 - 0.27*(t3916*t3990*t4039 - 1.*t3997*t3998*t4039);
  p_output1[71]=t3039 - 0.25*t3916*t4179 - 0.27*(t3916*t3990*t4179 - 1.*t3997*t3998*t4179) - 0.037*(t140*t2221*t3894 + t4198);
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=1.;
  p_output1[77]=0;
  p_output1[78]=t4292 + t4335 - 0.25*t4417 - 0.27*(t1617*t4417 + t1644*(-1.*t1622*t4362 - 1.*t1521*t532*t768)) + 0.037*(t1115*t140*t2221*t532 + t1366*t2221*t532*t882);
  p_output1[79]=t4479 + t4482 - 0.25*t4652 + 0.037*(t1115*t140*t2221*t910 + t1366*t2221*t882*t910) - 0.27*(t1617*t4652 + t1644*(-1.*t1622*t4639 - 1.*t1521*t768*t910));
  p_output1[80]=t4719 + t4728 - 0.25*t4861 - 0.27*(t1644*(-1.*t1521*t2221 - 1.*t1622*t4849) + t1617*t4861) + 0.037*(-1.*t1115*t140*t768 - 1.*t1366*t768*t882);
  p_output1[81]=t4335 + t4926 - 0.25*t4969 - 0.27*(t2632*t4969 + t2693*(-1.*t2681*t4961 - 1.*t2382*t532*t768)) - 0.037*(t140*t2221*t2412*t532 + t2221*t2506*t532*t882);
  p_output1[82]=t4482 + t5033 - 0.25*t5093 - 0.037*(t140*t2221*t2412*t910 + t2221*t2506*t882*t910) - 0.27*(t2632*t5093 + t2693*(-1.*t2681*t5079 - 1.*t2382*t768*t910));
  p_output1[83]=t4719 + t5152 - 0.25*t5223 - 0.27*(t2693*(-1.*t2221*t2382 - 1.*t2681*t5209) + t2632*t5223) - 0.037*(-1.*t140*t2412*t768 - 1.*t2506*t768*t882);
  p_output1[84]=t4292 + t5319 - 0.25*t5352 - 0.27*(t3434*t5352 + t3465*(-1.*t3458*t5330 - 1.*t3308*t532*t768)) + 0.037*(t140*t2221*t3182*t532 + t2221*t3273*t532*t882);
  p_output1[85]=t4479 + t5427 - 0.25*t5474 + 0.037*(t140*t2221*t3182*t910 + t2221*t3273*t882*t910) - 0.27*(t3434*t5474 + t3465*(-1.*t3458*t5464 - 1.*t3308*t768*t910));
  p_output1[86]=t4728 + t5552 - 0.25*t5639 - 0.27*(t3465*(-1.*t2221*t3308 - 1.*t3458*t5620) + t3434*t5639) + 0.037*(-1.*t140*t3182*t768 - 1.*t3273*t768*t882);
  p_output1[87]=t4926 + t5319 - 0.25*t5816 - 0.27*(t3990*t5816 + t3998*(-1.*t3997*t5801 - 1.*t3916*t532*t768)) - 0.037*(t140*t2221*t3875*t532 + t2221*t3894*t532*t882);
  p_output1[88]=t5033 + t5427 - 0.25*t5982 - 0.037*(t140*t2221*t3875*t910 + t2221*t3894*t882*t910) - 0.27*(t3990*t5982 + t3998*(-1.*t3997*t5961 - 1.*t3916*t768*t910));
  p_output1[89]=t5152 + t5552 - 0.25*t6065 - 0.27*(t3998*(-1.*t2221*t3916 - 1.*t3997*t6053) + t3990*t6065) - 0.037*(-1.*t140*t3875*t768 - 1.*t3894*t768*t882);
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=1.;
  p_output1[96]=t6106 + t6107 + 0.037*(t1366*t1839 + t1115*t6113) - 0.25*t6145 - 0.27*(t1617*t6145 + t1644*(-1.*t1622*t6129 - 1.*t1521*t2221*t910));
  p_output1[97]=t6165 + 0.037*(t1062*t1115 + t1366*t6176) + t6177 - 0.25*t6224 - 0.27*(t1644*(t1521*t2221*t532 - 1.*t1622*t6221) + t1617*t6224);
  p_output1[98]=0;
  p_output1[99]=t6106 - 0.037*(t1839*t2506 + t2412*t6113) + t6265 - 0.25*t6310 - 0.27*(t2632*t6310 + t2693*(-1.*t2681*t6300 - 1.*t2221*t2382*t910));
  p_output1[100]=t6165 - 0.037*(t1062*t2412 + t2506*t6176) + t6358 - 0.25*t6404 - 0.27*(t2693*(t2221*t2382*t532 - 1.*t2681*t6384) + t2632*t6404);
  p_output1[101]=0;
  p_output1[102]=t6107 + 0.037*(t1839*t3273 + t3182*t6113) + t6429 - 0.25*t6477 - 0.27*(t3434*t6477 + t3465*(-1.*t3458*t6468 - 1.*t2221*t3308*t910));
  p_output1[103]=0.037*(t1062*t3182 + t3273*t6176) + t6177 + t6513 - 0.25*t6578 - 0.27*(t3465*(t2221*t3308*t532 - 1.*t3458*t6566) + t3434*t6578);
  p_output1[104]=0;
  p_output1[105]=-0.037*(t1839*t3894 + t3875*t6113) + t6265 + t6429 - 0.25*t6690 - 0.27*(t3990*t6690 + t3998*(-1.*t3997*t6683 - 1.*t2221*t3916*t910));
  p_output1[106]=-0.037*(t1062*t3875 + t3894*t6176) + t6358 + t6513 - 0.25*t6783 - 0.27*(t3998*(t2221*t3916*t532 - 1.*t3997*t6778) + t3990*t6783);
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=-0.037*(-1.*t2412*t6176 + t6373) - 0.25*t2382*t6816 - 0.27*(t2382*t2632*t6816 - 1.*t2681*t2693*t6816);
  p_output1[118]=-0.25*t2382*t6857 - 0.27*(t2382*t2632*t6857 - 1.*t2681*t2693*t6857) - 0.037*(-1.*t2412*t6850 + t6862);
  p_output1[119]=-0.25*t2382*t6888 - 0.27*(t2382*t2632*t6888 - 1.*t2681*t2693*t6888) - 0.037*(t3092 + t6893);
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=-0.25*t6939 - 0.27*(t2693*(-1.*t2681*t6927 - 1.*t2382*t6930) + t2632*t6939);
  p_output1[136]=-0.25*t6990 - 0.27*(t2693*(-1.*t2681*t6980 - 1.*t2382*t6987) + t2632*t6990);
  p_output1[137]=-0.25*t7033 - 0.27*(t2693*(-1.*t2681*t7021 - 1.*t2382*t7027) + t2632*t7033);
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=-0.27*(-1.*t2693*(0. + t2681*t6927 + t2382*t6930) + t2615*(0. + t6929 + t6933));
  p_output1[154]=-0.27*(-1.*t2693*(0. + t2681*t6980 + t2382*t6987) + t2615*(0. + t6981 + t6989));
  p_output1[155]=-0.27*(-1.*t2693*(0. + t2681*t7021 + t2382*t7027) + t2615*(0. + t7022 + t7030));
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0.037*(-1.*t1115*t6176 + t6211) - 0.25*t1521*t7126 - 0.27*(t1521*t1617*t7126 - 1.*t1622*t1644*t7126);
  p_output1[169]=-0.25*t1521*t7160 - 0.27*(t1521*t1617*t7160 - 1.*t1622*t1644*t7160) + 0.037*(-1.*t1115*t6850 + t7170);
  p_output1[170]=-0.25*t1521*t7195 - 0.27*(t1521*t1617*t7195 - 1.*t1622*t1644*t7195) + 0.037*(t2302 + t7197);
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=-0.25*t7233 - 0.27*(t1644*(-1.*t1622*t6927 - 1.*t1521*t7231) + t1617*t7233);
  p_output1[187]=-0.25*t7266 - 0.27*(t1644*(-1.*t1622*t6980 - 1.*t1521*t7257) + t1617*t7266);
  p_output1[188]=-0.25*t7308 - 0.27*(t1644*(-1.*t1622*t7021 - 1.*t1521*t7298) + t1617*t7308);
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=-0.27*(-1.*t1644*(0. + t1622*t6927 + t1521*t7231) + t1600*(0. + t7225 + t7232));
  p_output1[205]=-0.27*(-1.*t1644*(0. + t1622*t6980 + t1521*t7257) + t1600*(0. + t7251 + t7259));
  p_output1[206]=-0.27*(-1.*t1644*(0. + t1622*t7021 + t1521*t7298) + t1600*(0. + t7302 + t7305));
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=-0.037*(-1.*t3875*t6176 + t6776) - 0.25*t3916*t7405 - 0.27*(t3916*t3990*t7405 - 1.*t3997*t3998*t7405);
  p_output1[232]=-0.25*t3916*t7432 - 0.27*(t3916*t3990*t7432 - 1.*t3997*t3998*t7432) - 0.037*(-1.*t3875*t6850 + t7437);
  p_output1[233]=-0.25*t3916*t7471 - 0.27*(t3916*t3990*t7471 - 1.*t3997*t3998*t7471) - 0.037*(t4198 + t7474);
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=-0.25*t7507 - 0.27*(t3998*(-1.*t3997*t6927 - 1.*t3916*t7492) + t3990*t7507);
  p_output1[250]=-0.25*t7549 - 0.27*(t3998*(-1.*t3997*t6980 - 1.*t3916*t7546) + t3990*t7549);
  p_output1[251]=-0.25*t7584 - 0.27*(t3998*(-1.*t3997*t7021 - 1.*t3916*t7578) + t3990*t7584);
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=-0.27*(-1.*t3998*(0. + t3997*t6927 + t3916*t7492) + t3947*(0. + t7491 + t7503));
  p_output1[268]=-0.27*(-1.*t3998*(0. + t3997*t6980 + t3916*t7546) + t3947*(0. + t7539 + t7548));
  p_output1[269]=-0.27*(-1.*t3998*(0. + t3997*t7021 + t3916*t7578) + t3947*(0. + t7580 + t7583));
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0.037*(-1.*t3182*t6176 + t6558) - 0.25*t3308*t7654 - 0.27*(t3308*t3434*t7654 - 1.*t3458*t3465*t7654);
  p_output1[283]=-0.25*t3308*t7681 - 0.27*(t3308*t3434*t7681 - 1.*t3458*t3465*t7681) + 0.037*(-1.*t3182*t6850 + t7683);
  p_output1[284]=-0.25*t3308*t7702 - 0.27*(t3308*t3434*t7702 - 1.*t3458*t3465*t7702) + 0.037*(t3789 + t7707);
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=-0.25*t7738 - 0.27*(t3465*(-1.*t3458*t6927 - 1.*t3308*t7731) + t3434*t7738);
  p_output1[301]=-0.25*t7775 - 0.27*(t3465*(-1.*t3458*t6980 - 1.*t3308*t7766) + t3434*t7775);
  p_output1[302]=-0.25*t7813 - 0.27*(t3465*(-1.*t3458*t7021 - 1.*t3308*t7802) + t3434*t7813);
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=-0.27*(-1.*t3465*(0. + t3458*t6927 + t3308*t7731) + t3404*(0. + t7730 + t7734));
  p_output1[319]=-0.27*(-1.*t3465*(0. + t3458*t6980 + t3308*t7766) + t3404*(0. + t7763 + t7773));
  p_output1[320]=-0.27*(-1.*t3465*(0. + t3458*t7021 + t3308*t7802) + t3404*(0. + t7803 + t7809));
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "j_hc_opt1_func.hh"

namespace SymFunction
{

void j_hc_opt1_func_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
