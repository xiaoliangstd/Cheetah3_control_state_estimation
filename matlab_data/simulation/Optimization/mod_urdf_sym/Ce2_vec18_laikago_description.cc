/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:02:17 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t131;
  double t37;
  double t91;
  double t146;
  double t97;
  double t155;
  double t166;
  double t17;
  double t263;
  double t394;
  double t449;
  double t702;
  double t927;
  double t938;
  double t1002;
  double t725;
  double t312;
  double t488;
  double t496;
  double t511;
  double t556;
  double t730;
  double t757;
  double t782;
  double t828;
  double t1190;
  double t1207;
  double t1215;
  double t1234;
  double t1236;
  double t1246;
  double t1276;
  double t1288;
  double t1318;
  double t1345;
  double t1347;
  double t1580;
  double t1581;
  double t1434;
  double t1476;
  double t1489;
  double t1710;
  double t1746;
  double t1772;
  double t1044;
  double t1057;
  double t1070;
  double t1077;
  double t1138;
  double t1142;
  double t1870;
  double t1993;
  double t2105;
  double t2489;
  double t2494;
  double t2499;
  double t2503;
  double t2326;
  double t2339;
  double t2369;
  double t2419;
  double t2451;
  double t2475;
  double t2567;
  double t2568;
  double t2571;
  double t2542;
  double t2547;
  double t2549;
  double t1857;
  double t2128;
  double t2135;
  double t2161;
  double t2176;
  double t2208;
  double t2484;
  double t3265;
  double t3266;
  double t3267;
  double t3388;
  double t3406;
  double t3415;
  double t3423;
  double t3431;
  double t3518;
  double t2531;
  double t2550;
  double t2566;
  double t2604;
  double t3844;
  double t3880;
  double t2619;
  double t2936;
  double t2939;
  double t2948;
  double t3765;
  double t3805;
  double t3631;
  double t3634;
  double t4717;
  double t4828;
  double t4873;
  double t5693;
  double t5717;
  double t5769;
  double t7139;
  double t7151;
  double t7279;
  double t7359;
  double t7375;
  double t7383;
  double t7404;
  double t7461;
  double t7507;
  double t7509;
  double t7512;
  double t8135;
  double t8143;
  double t8182;
  double t7569;
  double t7595;
  double t7603;
  double t7630;
  double t7648;
  double t7666;
  double t7819;
  double t7851;
  double t7916;
  double t7927;
  double t7930;
  double t7953;
  double t8415;
  double t8453;
  double t8514;
  double t8550;
  double t8565;
  double t8567;
  double t6482;
  double t8799;
  double t8866;
  double t8883;
  double t5821;
  double t10224;
  double t10228;
  double t10345;
  double t9011;
  double t9023;
  double t9384;
  double t8540;
  double t8576;
  double t8580;
  double t5957;
  double t6079;
  double t10791;
  double t10831;
  double t3280;
  double t3863;
  double t8600;
  double t8628;
  double t4188;
  double t4260;
  double t18344;
  double t18351;
  double t18384;
  double t18491;
  double t18506;
  double t18507;
  double t18412;
  double t18415;
  double t18475;
  double t8922;
  double t18566;
  double t18577;
  double t18583;
  double t10495;
  double t10807;
  double t18621;
  double t18659;
  double t18661;
  double t18669;
  double t18673;
  double t18678;
  double t18394;
  double t18509;
  double t18511;
  double t12555;
  double t13029;
  double t13907;
  double t18753;
  double t18760;
  double t17289;
  double t17588;
  double t18529;
  double t18548;
  double t17804;
  double t18038;
  double t8334;
  double t8360;
  double t8399;
  double t1189;
  double t1265;
  double t1379;
  double t1390;
  double t1403;
  double t1425;
  double t1495;
  double t1573;
  double t1619;
  double t1650;
  double t1733;
  double t1801;
  double t1854;
  double t8221;
  double t8231;
  double t8299;
  double t2238;
  double t2509;
  double t2521;
  double t2527;
  double t2530;
  double t2533;
  double t2534;
  double t2535;
  double t2572;
  double t2587;
  double t2594;
  double t2606;
  double t2620;
  double t2651;
  double t2661;
  double t2673;
  double t2993;
  double t3026;
  double t3072;
  double t3131;
  double t3185;
  double t3198;
  double t3521;
  double t3522;
  double t3620;
  double t3641;
  double t3642;
  double t3903;
  double t3952;
  double t4070;
  double t4209;
  double t4272;
  double t4293;
  double t4488;
  double t4584;
  double t19082;
  double t19086;
  double t19089;
  double t5046;
  double t5160;
  double t5269;
  double t5419;
  double t5773;
  double t5802;
  double t5846;
  double t5883;
  double t5887;
  double t5913;
  double t5950;
  double t5955;
  double t5991;
  double t6024;
  double t6091;
  double t6096;
  double t6118;
  double t6154;
  double t6312;
  double t6340;
  double t6486;
  double t6568;
  double t6593;
  double t6595;
  double t8193;
  double t8215;
  double t8302;
  double t8410;
  double t8413;
  double t7621;
  double t7732;
  double t7737;
  double t7924;
  double t7979;
  double t7982;
  double t8581;
  double t8648;
  double t8719;
  double t8738;
  double t8994;
  double t9000;
  double t9453;
  double t10541;
  double t10646;
  double t10849;
  double t10883;
  double t10981;
  double t11602;
  double t8912;
  double t8928;
  double t8929;
  double t8948;
  double t8968;
  double t12074;
  double t12252;
  double t12369;
  double t12612;
  double t13021;
  double t13830;
  double t14149;
  double t14154;
  double t14790;
  double t16861;
  double t17090;
  double t17271;
  double t17330;
  double t17570;
  double t17587;
  double t17606;
  double t17766;
  double t17767;
  double t17822;
  double t18069;
  double t18078;
  double t18214;
  double t18270;
  double t18518;
  double t18559;
  double t18561;
  double t18562;
  double t18592;
  double t18597;
  double t18598;
  double t18600;
  double t18604;
  double t18606;
  double t18618;
  double t18667;
  double t18710;
  double t18714;
  double t18752;
  double t18762;
  double t18772;
  double t18799;
  double t18807;
  double t18809;
  double t18813;
  double t18818;
  double t18822;
  double t18823;
  double t18827;
  double t18832;
  double t18843;
  double t18855;
  double t18863;
  double t18867;
  double t18872;
  double t18876;
  double t18887;
  double t18895;
  double t18905;
  double t18908;
  double t18910;
  double t18911;
  double t18914;
  double t18942;
  double t18962;
  double t18966;
  double t18970;
  double t18974;
  double t18983;
  double t18997;
  double t19003;
  double t19011;
  double t19030;
  double t19253;
  double t19257;
  double t19263;
  double t7513;
  double t7561;
  double t7774;
  double t8036;
  double t8051;
  double t19141;
  double t19143;
  double t19146;
  double t19149;
  double t19151;
  double t19362;
  double t19403;
  double t19382;
  double t19383;
  double t19397;
  double t19401;
  double t19408;
  double t19412;
  double t19425;
  double t19429;
  double t19437;
  double t19450;
  double t19453;
  double t19470;
  double t19471;
  double t19473;
  double t18565;
  double t18608;
  double t18812;
  double t18879;
  double t19043;
  double t19047;
  double t19350;
  double t19351;
  double t19353;
  double t19354;
  double t19355;
  double t19358;
  double t19203;
  double t19204;
  double t19205;
  double t19209;
  double t19216;
  double t19217;
  double t19646;
  double t19668;
  double t19609;
  double t19610;
  double t19611;
  double t19496;
  double t19503;
  double t19504;
  double t19666;
  double t19669;
  double t19681;
  double t19682;
  double t19683;
  double t19689;
  double t19690;
  double t19691;
  double t19694;
  double t19696;
  double t19697;
  double t19549;
  double t19557;
  double t19559;
  double t8761;
  double t8983;
  double t11789;
  double t17043;
  double t18287;
  double t18295;
  double t19336;
  double t19338;
  double t19339;
  double t19340;
  double t19342;
  double t19345;
  double t19186;
  double t19190;
  double t19195;
  double t19196;
  double t19197;
  double t19198;
  double t19585;
  double t19588;
  double t19603;
  double t19606;
  double t19608;
  double t19615;
  double t19835;
  double t19892;
  double t19874;
  double t19877;
  double t19883;
  double t19886;
  double t19893;
  double t19898;
  double t19900;
  double t19901;
  double t19906;
  double t19908;
  double t19909;
  double t4649;
  double t5643;
  double t5945;
  double t6219;
  double t6724;
  double t6734;
  double t19291;
  double t19292;
  double t19297;
  double t19298;
  double t19303;
  double t19309;
  double t19119;
  double t19122;
  double t19124;
  double t19125;
  double t19130;
  double t19131;
  double t19703;
  double t19704;
  double t19709;
  double t19711;
  double t19713;
  double t19717;
  double t19467;
  double t19475;
  double t19478;
  double t19481;
  double t19491;
  double t19505;
  double t19975;
  double t20007;
  double t19932;
  double t19937;
  double t19939;
  double t19941;
  double t19942;
  double t19943;
  double t20006;
  double t20009;
  double t20013;
  double t20014;
  double t20017;
  double t20020;
  double t20021;
  double t20023;
  double t20024;
  double t20025;
  double t2955;
  double t2970;
  double t3109;
  double t3111;
  double t3260;
  double t3261;
  double t19264;
  double t19265;
  double t19282;
  double t19286;
  double t19287;
  double t19289;
  double t19090;
  double t19095;
  double t19101;
  double t19106;
  double t19115;
  double t19117;
  double t19727;
  double t19730;
  double t19743;
  double t19744;
  double t19750;
  double t19751;
  double t19517;
  double t19523;
  double t19533;
  double t19546;
  double t19547;
  double t19560;
  double t19989;
  double t19990;
  double t19993;
  double t19995;
  double t19998;
  double t19859;
  double t19862;
  double t19865;
  double t19867;
  double t19868;
  double t1399;
  double t1703;
  double t2237;
  double t2252;
  double t2311;
  double t19238;
  double t19241;
  double t19246;
  double t19247;
  double t19248;
  double t19070;
  double t19071;
  double t19075;
  double t19077;
  double t19078;
  double t19655;
  double t19656;
  double t19657;
  double t19661;
  double t19663;
  double t19369;
  double t19372;
  double t19376;
  double t19377;
  double t19378;
  double t20110;
  double t20114;
  double t20115;
  double t19974;
  double t19977;
  double t19980;
  double t19839;
  double t19840;
  double t19846;
  double t911;
  double t1157;
  double t1164;
  double t19232;
  double t19233;
  double t19234;
  double t19057;
  double t19064;
  double t19065;
  double t19647;
  double t19649;
  double t19650;
  double t19364;
  double t19366;
  double t19367;
  t131 = Cos(var1[16]);
  t37 = Cos(var1[17]);
  t91 = Sin(var1[16]);
  t146 = Sin(var1[17]);
  t97 = -1.*t37*t91;
  t155 = -1.*t131*t146;
  t166 = t97 + t155;
  t17 = Cos(var1[15]);
  t263 = Sin(var1[4]);
  t394 = Cos(var1[4]);
  t449 = Cos(var1[5]);
  t702 = Sin(var1[15]);
  t927 = -1.*t131*t37;
  t938 = t91*t146;
  t1002 = t927 + t938;
  t725 = Sin(var1[5]);
  t312 = t17*t166*t263;
  t488 = t131*t37;
  t496 = -1.*t91*t146;
  t511 = t488 + t496;
  t556 = t449*t511;
  t730 = t702*t166*t725;
  t757 = t556 + t730;
  t782 = t394*t757;
  t828 = t312 + t782;
  t1190 = -1.*t37;
  t1207 = 1. + t1190;
  t1215 = -0.21935*t1207;
  t1234 = -0.221546*t37;
  t1236 = -0.12338*t146;
  t1246 = t1215 + t1234 + t1236;
  t1276 = -1. + t37;
  t1288 = 0.25*t1276;
  t1318 = -0.37338*t37;
  t1345 = 0.002196*t146;
  t1347 = t1288 + t1318 + t1345;
  t1580 = -0.12338*t37;
  t1581 = t1580 + t1345;
  t1434 = 0.002196*t37;
  t1476 = 0.12338*t146;
  t1489 = t1434 + t1476;
  t1710 = t37*t1347;
  t1746 = 0.21935*t146;
  t1772 = t1246*t146;
  t1044 = t17*t1002*t263;
  t1057 = t449*t166;
  t1070 = t702*t1002*t725;
  t1077 = t1057 + t1070;
  t1138 = t394*t1077;
  t1142 = t1044 + t1138;
  t1870 = t37*t91;
  t1993 = t131*t146;
  t2105 = t1870 + t1993;
  t2489 = -0.21935*t91;
  t2494 = -1.*t91*t1246;
  t2499 = t131*t1347;
  t2503 = t2489 + t2494 + t2499;
  t2326 = -1.*t131;
  t2339 = 1. + t2326;
  t2369 = -0.21935*t2339;
  t2419 = t131*t1246;
  t2451 = t91*t1347;
  t2475 = t2369 + t2419 + t2451;
  t2567 = -1.*t91*t1581;
  t2568 = t131*t1489;
  t2571 = t2567 + t2568;
  t2542 = t131*t1581;
  t2547 = t91*t1489;
  t2549 = t2542 + t2547;
  t1857 = t17*t511*t263;
  t2128 = t449*t2105;
  t2135 = t702*t511*t725;
  t2161 = t2128 + t2135;
  t2176 = t394*t2161;
  t2208 = t1857 + t2176;
  t2484 = -1.*t2475*t2105;
  t3265 = 0.036619*t702;
  t3266 = t17*t2503;
  t3267 = t3265 + t3266;
  t3388 = -1.*t17;
  t3406 = 1. + t3388;
  t3415 = 0.0875*t3406;
  t3423 = 0.124119*t17;
  t3431 = -1.*t702*t2503;
  t3518 = t3415 + t3423 + t3431;
  t2531 = t2475*t511;
  t2550 = -1.*t2549*t2105;
  t2566 = -1.*t2475*t511;
  t2604 = t2475*t166;
  t3844 = Power(t17,2);
  t3880 = Power(t702,2);
  t2619 = t2549*t511;
  t2936 = t702*t263;
  t2939 = -1.*t17*t394*t725;
  t2948 = t2936 + t2939;
  t3765 = -1.*t17*t3267*t166;
  t3805 = t702*t3518*t166;
  t3631 = t17*t3267*t166;
  t3634 = -1.*t702*t3518*t166;
  t4717 = t702*t3267;
  t4828 = t17*t3518;
  t4873 = t4717 + t4828;
  t5693 = -1.*t702*t3267;
  t5717 = -1.*t17*t3518;
  t5769 = t5693 + t5717;
  t7139 = Sin(var1[3]);
  t7151 = -1.*t449*t702*t166;
  t7279 = t511*t725;
  t7359 = t7151 + t7279;
  t7375 = t7139*t7359;
  t7383 = Cos(var1[3]);
  t7404 = t17*t394*t166;
  t7461 = -1.*t263*t757;
  t7507 = t7404 + t7461;
  t7509 = t7383*t7507;
  t7512 = t7375 + t7509;
  t8135 = t7383*t7359;
  t8143 = -1.*t7139*t7507;
  t8182 = t8135 + t8143;
  t7569 = -1.*t449*t702*t511;
  t7595 = t2105*t725;
  t7603 = t7569 + t7595;
  t7630 = t17*t394*t511;
  t7648 = -1.*t263*t2161;
  t7666 = t7630 + t7648;
  t7819 = -1.*t449*t702*t1002;
  t7851 = t166*t725;
  t7916 = t7819 + t7851;
  t7927 = t17*t394*t1002;
  t7930 = -1.*t263*t1077;
  t7953 = t7927 + t7930;
  t8415 = t449*t2475;
  t8453 = -1.*t3518*t725;
  t8514 = t8415 + t8453;
  t8550 = t449*t3518;
  t8565 = t2475*t725;
  t8567 = t8550 + t8565;
  t6482 = t17*t3267*t511;
  t8799 = t17*t725*t8514;
  t8866 = -1.*t17*t449*t8567;
  t8883 = t5693 + t8799 + t8866;
  t5821 = t3844*t2571*t511;
  t10224 = -1.*t449*t702*t2571;
  t10228 = t2549*t725;
  t10345 = t10224 + t10228;
  t9011 = t449*t2549;
  t9023 = t702*t2571*t725;
  t9384 = t9011 + t9023;
  t8540 = -1.*t17*t725*t8514;
  t8576 = t17*t449*t8567;
  t8580 = t4717 + t8540 + t8576;
  t5957 = -1.*t3844*t2571*t166;
  t6079 = -1.*t17*t3267*t1002;
  t10791 = t8514*t757;
  t10831 = t8567*t7359;
  t3280 = -1.*t17*t3267*t511;
  t3863 = -1.*t3844*t2571*t511;
  t8600 = -1.*t8514*t757;
  t8628 = -1.*t8567*t7359;
  t4188 = t3844*t2571*t166;
  t4260 = t17*t3267*t1002;
  t18344 = t3267*t263;
  t18351 = t394*t8514;
  t18384 = t18344 + t18351;
  t18491 = t394*t3267;
  t18506 = -1.*t263*t8514;
  t18507 = t18491 + t18506;
  t18412 = t394*t702;
  t18415 = t17*t263*t725;
  t18475 = t18412 + t18415;
  t8922 = t8567*t7603;
  t18566 = -1.*t2948*t18384;
  t18577 = -1.*t18475*t18507;
  t18583 = t8866 + t18566 + t18577;
  t10495 = -1.*t17*t449*t10345;
  t10807 = t10345*t7603;
  t18621 = t17*t2571*t263;
  t18659 = t394*t9384;
  t18661 = t18621 + t18659;
  t18669 = t17*t394*t2571;
  t18673 = -1.*t263*t9384;
  t18678 = t18669 + t18673;
  t18394 = t2948*t18384;
  t18509 = t18475*t18507;
  t18511 = t8576 + t18394 + t18509;
  t12555 = t17*t449*t10345;
  t13029 = -1.*t8567*t7916;
  t13907 = -1.*t10345*t7359;
  t18753 = t18384*t828;
  t18760 = t18507*t7507;
  t17289 = -1.*t8567*t7603;
  t17588 = -1.*t10345*t7603;
  t18529 = -1.*t18384*t828;
  t18548 = -1.*t18507*t7507;
  t17804 = t8567*t7916;
  t18038 = t10345*t7359;
  t8334 = t7383*t7916;
  t8360 = -1.*t7139*t7953;
  t8399 = t8334 + t8360;
  t1189 = -0.21935*t37;
  t1265 = -1.*t37*t1246;
  t1379 = t1347*t146;
  t1390 = t1189 + t1265 + t1379;
  t1403 = 0.21935*t37;
  t1425 = t37*t1246;
  t1495 = t37*t1489;
  t1573 = -1.*t1347*t146;
  t1619 = t1581*t146;
  t1650 = t1403 + t1425 + t1495 + t1573 + t1619;
  t1733 = -1.*t37*t1581;
  t1801 = t1489*t146;
  t1854 = t1710 + t1733 + t1746 + t1772 + t1801;
  t8221 = t7383*t7603;
  t8231 = -1.*t7139*t7666;
  t8299 = t8221 + t8231;
  t2238 = t1710 + t1746 + t1772;
  t2509 = -1.*t2503*t511;
  t2521 = t2484 + t2509;
  t2527 = t166*t2521;
  t2530 = t2503*t166;
  t2533 = t2530 + t2531;
  t2534 = t511*t2533;
  t2535 = -1.*t2503*t166;
  t2572 = -1.*t2571*t511;
  t2587 = t2535 + t2550 + t2566 + t2572;
  t2594 = t511*t2587;
  t2606 = t2571*t166;
  t2620 = t2503*t1002;
  t2651 = t2604 + t2606 + t2619 + t2620;
  t2661 = t2105*t2651;
  t2673 = t2527 + t2534 + t2594 + t2661;
  t2993 = -0.124119*t511;
  t3026 = -0.0875*t1002;
  t3072 = t2993 + t3026;
  t3131 = -0.0875*t166;
  t3185 = -0.124119*t2105;
  t3198 = t3131 + t3185;
  t3521 = t702*t3518*t511;
  t3522 = t2484 + t3280 + t3521;
  t3620 = t17*t1002*t3522;
  t3641 = t3631 + t3634 + t2531;
  t3642 = t17*t166*t3641;
  t3903 = -1.*t3880*t2571*t511;
  t3952 = t3765 + t3805 + t2550 + t2566 + t3863 + t3903;
  t4070 = t17*t166*t3952;
  t4209 = t3880*t2571*t166;
  t4272 = -1.*t702*t3518*t1002;
  t4293 = t2604 + t4188 + t4209 + t2619 + t4260 + t4272;
  t4488 = t17*t511*t4293;
  t4584 = t3620 + t3642 + t4070 + t4488;
  t19082 = t17*t7383*t449;
  t19086 = -1.*t7139*t18475;
  t19089 = t19082 + t19086;
  t5046 = t17*t4873*t166;
  t5160 = t3765 + t3805 + t2566;
  t5269 = t702*t5160;
  t5419 = t5046 + t5269;
  t5773 = t17*t5769*t166;
  t5802 = t2549*t2105;
  t5846 = t3880*t2571*t511;
  t5883 = t3631 + t3634 + t5802 + t2531 + t5821 + t5846;
  t5887 = t702*t5883;
  t5913 = t5773 + t5887;
  t5950 = t17*t4873*t1002;
  t5955 = -1.*t2475*t166;
  t5991 = -1.*t3880*t2571*t166;
  t6024 = -1.*t2549*t511;
  t6091 = t702*t3518*t1002;
  t6096 = t5955 + t5957 + t5991 + t6024 + t6079 + t6091;
  t6118 = t702*t6096;
  t6154 = t5950 + t6118;
  t6312 = t17*t5769*t511;
  t6340 = t2475*t2105;
  t6486 = -1.*t702*t3518*t511;
  t6568 = t6340 + t6482 + t6486;
  t6593 = t702*t6568;
  t6595 = t6312 + t6593;
  t8193 = 0.241*t2208*t8182;
  t8215 = 0.241*t1142*t8182;
  t8302 = 0.241*t828*t8299;
  t8410 = 0.241*t828*t8399;
  t8413 = t8193 + t8215 + t8302 + t8410;
  t7621 = t7139*t7603;
  t7732 = t7383*t7666;
  t7737 = t7621 + t7732;
  t7924 = t7139*t7916;
  t7979 = t7383*t7953;
  t7982 = t7924 + t7979;
  t8581 = t7359*t8580;
  t8648 = t3765 + t8600 + t8628;
  t8719 = t17*t449*t8648;
  t8738 = t8581 + t8719;
  t8994 = t7359*t8883;
  t9000 = -1.*t17*t702*t2571;
  t9453 = t17*t725*t9384;
  t10541 = t9000 + t9453 + t10495;
  t10646 = t7603*t10541;
  t10849 = t9384*t2161;
  t10883 = t3631 + t5821 + t10791 + t10807 + t10831 + t10849;
  t10981 = t17*t449*t10883;
  t11602 = t8994 + t10646 + t10981;
  t8912 = t7603*t8883;
  t8928 = t8514*t2161;
  t8929 = t6482 + t8922 + t8928;
  t8948 = t17*t449*t8929;
  t8968 = t8912 + t8948;
  t12074 = t7916*t8580;
  t12252 = t17*t702*t2571;
  t12369 = -1.*t17*t725*t9384;
  t12612 = t12252 + t12369 + t12555;
  t13021 = t7359*t12612;
  t13830 = -1.*t9384*t757;
  t14149 = -1.*t8514*t1077;
  t14154 = t5957 + t6079 + t13029 + t13830 + t13907 + t14149;
  t14790 = t17*t449*t14154;
  t16861 = t12074 + t13021 + t14790;
  t17090 = t3631 + t10791 + t10831;
  t17271 = t7359*t17090;
  t17330 = -1.*t8514*t2161;
  t17570 = t3280 + t17289 + t17330;
  t17587 = t7916*t17570;
  t17606 = -1.*t9384*t2161;
  t17766 = t3765 + t3863 + t8600 + t17588 + t8628 + t17606;
  t17767 = t7359*t17766;
  t17822 = t9384*t757;
  t18069 = t8514*t1077;
  t18078 = t4188 + t4260 + t17804 + t17822 + t18038 + t18069;
  t18214 = t7603*t18078;
  t18270 = t17271 + t17587 + t17767 + t18214;
  t18518 = t828*t18511;
  t18559 = t8628 + t18529 + t18548;
  t18561 = t2948*t18559;
  t18562 = t18518 + t18561;
  t18592 = t2208*t18583;
  t18597 = t18384*t2208;
  t18598 = t18507*t7666;
  t18600 = t8922 + t18597 + t18598;
  t18604 = t2948*t18600;
  t18606 = t18592 + t18604;
  t18618 = t828*t18583;
  t18667 = -1.*t2948*t18661;
  t18710 = -1.*t18475*t18678;
  t18714 = t10495 + t18667 + t18710;
  t18752 = t2208*t18714;
  t18762 = t18661*t2208;
  t18772 = t18678*t7666;
  t18799 = t10807 + t10831 + t18753 + t18760 + t18762 + t18772;
  t18807 = t2948*t18799;
  t18809 = t18618 + t18752 + t18807;
  t18813 = t1142*t18511;
  t18818 = t2948*t18661;
  t18822 = t18475*t18678;
  t18823 = t12555 + t18818 + t18822;
  t18827 = t828*t18823;
  t18832 = -1.*t18661*t828;
  t18843 = -1.*t18678*t7507;
  t18855 = -1.*t18384*t1142;
  t18863 = -1.*t18507*t7953;
  t18867 = t13029 + t13907 + t18832 + t18843 + t18855 + t18863;
  t18872 = t2948*t18867;
  t18876 = t18813 + t18827 + t18872;
  t18887 = t10831 + t18753 + t18760;
  t18895 = t828*t18887;
  t18905 = -1.*t18384*t2208;
  t18908 = -1.*t18507*t7666;
  t18910 = t17289 + t18905 + t18908;
  t18911 = t1142*t18910;
  t18914 = -1.*t18661*t2208;
  t18942 = -1.*t18678*t7666;
  t18962 = t17588 + t8628 + t18529 + t18548 + t18914 + t18942;
  t18966 = t828*t18962;
  t18970 = t18661*t828;
  t18974 = t18678*t7507;
  t18983 = t18384*t1142;
  t18997 = t18507*t7953;
  t19003 = t17804 + t18038 + t18970 + t18974 + t18983 + t18997;
  t19011 = t2208*t19003;
  t19030 = t18895 + t18911 + t18966 + t19011;
  t19253 = t17*t449*t7139;
  t19257 = t7383*t18475;
  t19263 = t19253 + t19257;
  t7513 = 0.241*t2208*t7512;
  t7561 = 0.241*t1142*t7512;
  t7774 = 0.241*t828*t7737;
  t8036 = 0.241*t828*t7982;
  t8051 = t7513 + t7561 + t7774 + t8036;
  t19141 = 0.241*t8182*t7737;
  t19143 = 0.241*t7512*t8299;
  t19146 = 0.241*t8182*t7982;
  t19149 = 0.241*t7512*t8399;
  t19151 = t19141 + t19143 + t19146 + t19149;
  t19362 = 5.e-6*t828;
  t19403 = -3.e-6*t828;
  t19382 = 0.006182*t828;
  t19383 = -3.e-6*t2208;
  t19397 = t19382 + t19383;
  t19401 = 5.e-6*t2948;
  t19408 = 0.000035*t2208;
  t19412 = t19401 + t19403 + t19408;
  t19425 = 0.000035*t828;
  t19429 = -3.e-6*t1142;
  t19437 = t19425 + t19429;
  t19450 = 0.006182*t1142;
  t19453 = t19403 + t19450;
  t19470 = t2208*t18887;
  t19471 = t828*t18910;
  t19473 = t19470 + t19471;
  t18565 = 0.241*t828*t18562;
  t18608 = 0.241*t1142*t18606;
  t18812 = 0.241*t828*t18809;
  t18879 = 0.241*t2208*t18876;
  t19043 = 0.241*t2948*t19030;
  t19047 = t18565 + t18608 + t18812 + t18879 + t19043;
  t19350 = 0.241*t7512*t18562;
  t19351 = 0.241*t7982*t18606;
  t19353 = 0.241*t7512*t18809;
  t19354 = 0.241*t7737*t18876;
  t19355 = 0.241*t19263*t19030;
  t19358 = t19350 + t19351 + t19353 + t19354 + t19355;
  t19203 = 0.241*t8182*t18562;
  t19204 = 0.241*t8399*t18606;
  t19205 = 0.241*t8182*t18809;
  t19209 = 0.241*t8299*t18876;
  t19216 = 0.241*t19089*t19030;
  t19217 = t19203 + t19204 + t19205 + t19209 + t19216;
  t19646 = 5.e-6*t7359;
  t19668 = -3.e-6*t7359;
  t19609 = t7603*t17090;
  t19610 = t7359*t17570;
  t19611 = t19609 + t19610;
  t19496 = t17*t166*t3522;
  t19503 = t17*t511*t3641;
  t19504 = t19496 + t19503;
  t19666 = 0.006182*t7916;
  t19669 = t19666 + t19668;
  t19681 = 5.e-6*t17*t449;
  t19682 = 0.000035*t7603;
  t19683 = t19681 + t19682 + t19668;
  t19689 = -3.e-6*t7916;
  t19690 = 0.000035*t7359;
  t19691 = t19689 + t19690;
  t19694 = -3.e-6*t7603;
  t19696 = 0.006182*t7359;
  t19697 = t19694 + t19696;
  t19549 = t511*t2521;
  t19557 = t2105*t2533;
  t19559 = t19549 + t19557;
  t8761 = 0.241*t828*t8738;
  t8983 = 0.241*t1142*t8968;
  t11789 = 0.241*t828*t11602;
  t17043 = 0.241*t2208*t16861;
  t18287 = 0.241*t2948*t18270;
  t18295 = t8761 + t8983 + t11789 + t17043 + t18287;
  t19336 = 0.241*t7512*t8738;
  t19338 = 0.241*t7512*t11602;
  t19339 = 0.241*t8968*t7982;
  t19340 = 0.241*t7737*t16861;
  t19342 = 0.241*t19263*t18270;
  t19345 = t19336 + t19338 + t19339 + t19340 + t19342;
  t19186 = 0.241*t8182*t8738;
  t19190 = 0.241*t8182*t11602;
  t19195 = 0.241*t8968*t8399;
  t19196 = 0.241*t8299*t16861;
  t19197 = 0.241*t19089*t18270;
  t19198 = t19186 + t19190 + t19195 + t19196 + t19197;
  t19585 = 0.241*t16861*t18562;
  t19588 = 0.241*t18270*t19473;
  t19603 = 0.241*t11602*t18606;
  t19606 = 0.241*t8968*t18809;
  t19608 = 0.241*t8738*t18876;
  t19615 = 0.241*t19611*t19030;
  t19835 = 5.e-6*t17*t166;
  t19892 = -3.e-6*t17*t166;
  t19874 = 0.006182*t17*t166;
  t19877 = -3.e-6*t17*t511;
  t19883 = t19874 + t19877;
  t19886 = 5.e-6*t702;
  t19893 = 0.000035*t17*t511;
  t19898 = t19886 + t19892 + t19893;
  t19900 = 0.000035*t17*t166;
  t19901 = -3.e-6*t17*t1002;
  t19906 = t19900 + t19901;
  t19908 = 0.006182*t17*t1002;
  t19909 = t19892 + t19908;
  t4649 = 0.241*t4584*t2948;
  t5643 = 0.241*t5419*t828;
  t5945 = 0.241*t5913*t828;
  t6219 = 0.241*t6154*t2208;
  t6724 = 0.241*t6595*t1142;
  t6734 = t4649 + t5643 + t5945 + t6219 + t6724;
  t19291 = 0.241*t4584*t19263;
  t19292 = 0.241*t5419*t7512;
  t19297 = 0.241*t5913*t7512;
  t19298 = 0.241*t6154*t7737;
  t19303 = 0.241*t6595*t7982;
  t19309 = t19291 + t19292 + t19297 + t19298 + t19303;
  t19119 = 0.241*t4584*t19089;
  t19122 = 0.241*t5419*t8182;
  t19124 = 0.241*t5913*t8182;
  t19125 = 0.241*t6154*t8299;
  t19130 = 0.241*t6595*t8399;
  t19131 = t19119 + t19122 + t19124 + t19125 + t19130;
  t19703 = 0.241*t6154*t8738;
  t19704 = 0.241*t4584*t19611;
  t19709 = 0.241*t5913*t8968;
  t19711 = 0.241*t6595*t11602;
  t19713 = 0.241*t5419*t16861;
  t19717 = 0.241*t19504*t18270;
  t19467 = 0.241*t6154*t18562;
  t19475 = 0.241*t4584*t19473;
  t19478 = 0.241*t5913*t18606;
  t19481 = 0.241*t6595*t18809;
  t19491 = 0.241*t5419*t18876;
  t19505 = 0.241*t19504*t19030;
  t19975 = 5.e-6*t511;
  t20007 = -3.e-6*t511;
  t19932 = 0.241*t3072*t6595;
  t19937 = 0.008825179*t166*t5419;
  t19939 = 0.241*t3198*t5913;
  t19941 = 0.241*t19559*t4584;
  t19942 = 0.008825179*t511*t6154;
  t19943 = 0.241*t19504*t2673;
  t20006 = 0.006182*t166;
  t20009 = t20006 + t20007;
  t20013 = 0.000035*t2105;
  t20014 = t20013 + t20007;
  t20017 = -3.e-6*t166;
  t20020 = 0.000035*t511;
  t20021 = t20017 + t20020;
  t20023 = -3.e-6*t2105;
  t20024 = 0.006182*t511;
  t20025 = t20023 + t20024;
  t2955 = 0.241*t2673*t2948;
  t2970 = 0.008825179*t511*t828;
  t3109 = 0.241*t3072*t828;
  t3111 = 0.008825179*t166*t2208;
  t3260 = 0.241*t3198*t1142;
  t3261 = t2955 + t2970 + t3109 + t3111 + t3260;
  t19264 = 0.241*t2673*t19263;
  t19265 = 0.008825179*t511*t7512;
  t19282 = 0.241*t3072*t7512;
  t19286 = 0.008825179*t166*t7737;
  t19287 = 0.241*t3198*t7982;
  t19289 = t19264 + t19265 + t19282 + t19286 + t19287;
  t19090 = 0.241*t2673*t19089;
  t19095 = 0.008825179*t511*t8182;
  t19101 = 0.241*t3072*t8182;
  t19106 = 0.008825179*t166*t8299;
  t19115 = 0.241*t3198*t8399;
  t19117 = t19090 + t19095 + t19101 + t19106 + t19115;
  t19727 = 0.008825179*t166*t8738;
  t19730 = 0.241*t2673*t19611;
  t19743 = 0.241*t3072*t8968;
  t19744 = 0.241*t3198*t11602;
  t19750 = 0.008825179*t511*t16861;
  t19751 = 0.241*t19559*t18270;
  t19517 = 0.008825179*t166*t18562;
  t19523 = 0.241*t2673*t19473;
  t19533 = 0.241*t3072*t18606;
  t19546 = 0.241*t3198*t18809;
  t19547 = 0.008825179*t511*t18876;
  t19560 = 0.241*t19559*t19030;
  t19989 = 0.008825179*t166*t1390;
  t19990 = 0.008825179*t511*t1854;
  t19993 = 0.241*t1650*t3198;
  t19995 = 0.241*t2238*t3072;
  t19998 = t19975 + t19989 + t19990 + t19993 + t19995;
  t19859 = 0.241*t1650*t6595;
  t19862 = 0.241*t1854*t5419;
  t19865 = 0.241*t2238*t5913;
  t19867 = 0.241*t1390*t6154;
  t19868 = t19835 + t19859 + t19862 + t19865 + t19867;
  t1399 = 0.241*t1390*t828;
  t1703 = 0.241*t1650*t828;
  t2237 = 0.241*t1854*t2208;
  t2252 = 0.241*t2238*t1142;
  t2311 = t1399 + t1703 + t2237 + t2252;
  t19238 = 0.241*t1390*t7512;
  t19241 = 0.241*t1650*t7512;
  t19246 = 0.241*t1854*t7737;
  t19247 = 0.241*t2238*t7982;
  t19248 = t19238 + t19241 + t19246 + t19247;
  t19070 = 0.241*t1390*t8182;
  t19071 = 0.241*t1650*t8182;
  t19075 = 0.241*t1854*t8299;
  t19077 = 0.241*t2238*t8399;
  t19078 = t19070 + t19071 + t19075 + t19077;
  t19655 = 0.241*t1854*t8738;
  t19656 = 0.241*t1650*t8968;
  t19657 = 0.241*t2238*t11602;
  t19661 = 0.241*t1390*t16861;
  t19663 = t19646 + t19655 + t19656 + t19657 + t19661;
  t19369 = 0.241*t1854*t18562;
  t19372 = 0.241*t1650*t18606;
  t19376 = 0.241*t2238*t18809;
  t19377 = 0.241*t1390*t18876;
  t19378 = t19362 + t19369 + t19372 + t19376 + t19377;
  t20110 = -0.02973458*t1650;
  t20114 = 0.000529236*t1854;
  t20115 = t20110 + t20114;
  t19974 = 0.000019380093084*t166;
  t19977 = -0.02973458*t3072;
  t19980 = t19974 + t19975 + t19977;
  t19839 = -0.02973458*t5913;
  t19840 = 0.000529236*t6154;
  t19846 = t19835 + t19839 + t19840;
  t911 = 0.000529236*t828;
  t1157 = -0.02973458*t1142;
  t1164 = t911 + t1157;
  t19232 = 0.000529236*t7512;
  t19233 = -0.02973458*t7982;
  t19234 = t19232 + t19233;
  t19057 = 0.000529236*t8182;
  t19064 = -0.02973458*t8399;
  t19065 = t19057 + t19064;
  t19647 = -0.02973458*t11602;
  t19649 = 0.000529236*t16861;
  t19650 = t19646 + t19647 + t19649;
  t19364 = -0.02973458*t18809;
  t19366 = 0.000529236*t18876;
  t19367 = t19362 + t19364 + t19366;
  p_output1[0]=var2[17]*(-0.5*(0.482*t1142*t828 + 0.482*t2208*t828)*var2[0] - 0.5*t8413*var2[1] - 0.5*t8051*var2[2] - 0.5*t19047*var2[3] - 0.5*t18295*var2[4] - 0.5*t6734*var2[5] - 0.5*t3261*var2[15] - 0.5*t2311*var2[16] - 0.5*t1164*var2[17]);
  p_output1[1]=var2[17]*(-0.5*t8413*var2[0] - 0.5*(0.482*t8182*t8299 + 0.482*t8182*t8399)*var2[1] - 0.5*t19151*var2[2] - 0.5*t19217*var2[3] - 0.5*t19198*var2[4] - 0.5*t19131*var2[5] - 0.5*t19117*var2[15] - 0.5*t19078*var2[16] - 0.5*t19065*var2[17]);
  p_output1[2]=var2[17]*(-0.5*t8051*var2[0] - 0.5*t19151*var2[1] - 0.5*(0.482*t7512*t7737 + 0.482*t7512*t7982)*var2[2] - 0.5*t19358*var2[3] - 0.5*t19345*var2[4] - 0.5*t19309*var2[5] - 0.5*t19289*var2[15] - 0.5*t19248*var2[16] - 0.5*t19234*var2[17]);
  p_output1[3]=var2[17]*(-0.5*t19047*var2[0] - 0.5*t19217*var2[1] - 0.5*t19358*var2[2] - 0.5*(0.482*t18606*t18809 + 0.482*t18562*t18876 + t1142*t19397 + 0.482*t19030*t19473 + t19437*t2208 + t19412*t828 + t19453*t828 + 5.e-6*t2948*t828)*var2[3] - 0.5*(t19585 + t19588 + t19603 + t19606 + t19608 + t19615 + t19412*t7359 + t19453*t7359 + t19437*t7603 + t19397*t7916 + 5.e-6*t17*t449*t828)*var2[4] - 0.5*(t1002*t17*t19397 + t166*t17*t19412 + t166*t17*t19453 + t19467 + t19475 + t19478 + t19481 + t19491 + t19505 + t17*t19437*t511 + 5.e-6*t702*t828)*var2[5] - 0.5*(t166*t19397 + t19517 + t19523 + t19533 + t19546 + t19547 + t19560 + t19437*t2105 + t19412*t511 + t19453*t511)*var2[15] - 0.5*t19378*var2[16] - 0.5*t19367*var2[17]);
  p_output1[4]=var2[17]*(-0.5*t18295*var2[0] - 0.5*t19198*var2[1] - 0.5*t19345*var2[2] - 0.5*(t19585 + t19588 + t19603 + t19606 + t19608 + t19615 + t1142*t19697 + t19691*t2208 + 5.e-6*t2948*t7359 + t19669*t828 + t19683*t828)*var2[3] - 0.5*(0.482*t18270*t19611 + t19669*t7359 + t19683*t7359 + 5.e-6*t17*t449*t7359 + t19691*t7603 + t19697*t7916 + 0.482*t16861*t8738 + 0.482*t11602*t8968)*var2[4] - 0.5*(t166*t17*t19669 + t166*t17*t19683 + t1002*t17*t19697 + t19703 + t19704 + t19709 + t19711 + t19713 + t19717 + t17*t19691*t511 + 5.e-6*t702*t7359)*var2[5] - 0.5*(t166*t19697 + t19727 + t19730 + t19743 + t19744 + t19750 + t19751 + t19691*t2105 + t19669*t511 + t19683*t511)*var2[15] - 0.5*t19663*var2[16] - 0.5*t19650*var2[17]);
  p_output1[5]=var2[17]*(-0.5*t6734*var2[0] - 0.5*t19131*var2[1] - 0.5*t19309*var2[2] - 0.5*(t19467 + t19475 + t19478 + t19481 + t19491 + t19505 + t1142*t19883 + t19906*t2208 + 5.e-6*t166*t17*t2948 + t19898*t828 + t19909*t828)*var2[3] - 0.5*(t19703 + t19704 + t19709 + t19711 + t19713 + t19717 + 5.e-6*t166*t3844*t449 + t19898*t7359 + t19909*t7359 + t19906*t7603 + t19883*t7916)*var2[4] - 0.5*(t1002*t17*t19883 + t166*t17*t19898 + t166*t17*t19909 + 0.482*t19504*t4584 + t17*t19906*t511 + 0.482*t5419*t6154 + 0.482*t5913*t6595 + 5.e-6*t166*t17*t702)*var2[5] - 0.5*(t166*t19883 + t19932 + t19937 + t19939 + t19941 + t19942 + t19943 + t19906*t2105 + t19898*t511 + t19909*t511)*var2[15] - 0.5*t19868*var2[16] - 0.5*t19846*var2[17]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=var2[17]*(-0.5*t3261*var2[0] - 0.5*t19117*var2[1] - 0.5*t19289*var2[2] - 0.5*(t19517 + t19523 + t19533 + t19546 + t19547 + t19560 + t1142*t20025 + t20021*t2208 + 5.e-6*t2948*t511 + t20009*t828 + t20014*t828)*var2[3] - 0.5*(t19727 + t19730 + t19743 + t19744 + t19750 + t19751 + 5.e-6*t17*t449*t511 + t20009*t7359 + t20014*t7359 + t20021*t7603 + t20025*t7916)*var2[4] - 0.5*(t19932 + t19937 + t19939 + t19941 + t19942 + t19943 + t166*t17*t20009 + t166*t17*t20014 + t1002*t17*t20025 + t17*t20021*t511 + 5.e-6*t511*t702)*var2[5] - 0.5*(t166*t20025 + t20021*t2105 + 0.482*t19559*t2673 + 0.482*t3072*t3198 + 0.000646338459602*t166*t511 + t20009*t511 + t20014*t511)*var2[15] - 0.5*t19998*var2[16] - 0.5*t19980*var2[17]);
  p_output1[16]=var2[17]*(-0.5*t2311*var2[0] - 0.5*t19078*var2[1] - 0.5*t19248*var2[2] - 0.5*t19378*var2[3] - 0.5*t19663*var2[4] - 0.5*t19868*var2[5] - 0.5*t19998*var2[15] - 0.5*(0.482*t1390*t1854 + 0.482*t1650*t2238)*var2[16] - 0.5*t20115*var2[17]);
  p_output1[17]=(-0.5*t1164*var2[0] - 0.5*t19065*var2[1] - 0.5*t19234*var2[2] - 0.5*t19367*var2[3] - 0.5*t19650*var2[4] - 0.5*t19846*var2[5] - 0.5*t19980*var2[15] - 0.5*t20115*var2[16])*var2[17];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec18_laikago_description.hh"

namespace SymFunction
{

void Ce2_vec18_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
