/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:01:30 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t155;
  double t1036;
  double t394;
  double t488;
  double t751;
  double t1184;
  double t2864;
  double t3438;
  double t3518;
  double t3522;
  double t3523;
  double t3526;
  double t3601;
  double t3337;
  double t3354;
  double t3356;
  double t3415;
  double t3457;
  double t3498;
  double t3824;
  double t3942;
  double t4311;
  double t5109;
  double t5164;
  double t4781;
  double t4803;
  double t4827;
  double t4829;
  double t4918;
  double t4928;
  double t4929;
  double t3105;
  double t3517;
  double t3659;
  double t3738;
  double t4320;
  double t4380;
  double t4398;
  double t5944;
  double t5945;
  double t5946;
  double t5982;
  double t5991;
  double t5992;
  double t6168;
  double t6174;
  double t6178;
  double t6154;
  double t6161;
  double t6162;
  double t6163;
  double t6239;
  double t6243;
  double t6225;
  double t6226;
  double t6229;
  double t6001;
  double t6024;
  double t6039;
  double t6179;
  double t6181;
  double t6193;
  double t6194;
  double t6196;
  double t6198;
  double t6199;
  double t5847;
  double t5852;
  double t5869;
  double t1964;
  double t2027;
  double t2170;
  double t6410;
  double t754;
  double t1390;
  double t1477;
  double t6333;
  double t4986;
  double t5013;
  double t5045;
  double t4316;
  double t4499;
  double t4573;
  double t6091;
  double t5846;
  double t5880;
  double t5881;
  double t5909;
  double t5957;
  double t5964;
  double t5978;
  double t5993;
  double t5994;
  double t6000;
  double t6056;
  double t6072;
  double t6102;
  double t6103;
  double t6105;
  double t6657;
  double t6658;
  double t6662;
  double t6668;
  double t6673;
  double t6674;
  double t6750;
  double t6751;
  double t6754;
  double t6760;
  double t6217;
  double t6219;
  double t6235;
  double t6236;
  double t6252;
  double t6254;
  double t6256;
  double t6270;
  double t6273;
  double t6684;
  double t6714;
  double t6721;
  double t6761;
  double t6762;
  double t6767;
  double t6769;
  double t6772;
  double t6773;
  double t6775;
  double t6781;
  double t6784;
  double t6785;
  double t6511;
  double t6515;
  double t6518;
  double t6519;
  double t6520;
  double t6528;
  double t6534;
  double t6536;
  double t6552;
  double t6553;
  double t6563;
  double t6572;
  double t6574;
  double t6575;
  double t6582;
  double t6584;
  double t6585;
  double t6593;
  double t6602;
  double t6603;
  double t6622;
  double t6623;
  double t6624;
  double t6638;
  double t6642;
  double t6649;
  double t6742;
  double t6745;
  double t6746;
  double t6795;
  double t6797;
  double t6851;
  double t6732;
  double t6734;
  double t6735;
  double t7137;
  double t7139;
  double t7140;
  double t7141;
  double t7143;
  double t7144;
  double t7151;
  double t7153;
  double t7241;
  double t7248;
  double t7251;
  double t7252;
  double t7254;
  double t7255;
  double t7256;
  double t7258;
  double t7269;
  double t7203;
  double t7207;
  double t7213;
  double t7220;
  double t7231;
  double t7238;
  double t7284;
  double t7286;
  double t7293;
  double t7239;
  double t7272;
  double t7275;
  double t7325;
  double t7328;
  double t7330;
  double t7280;
  double t7281;
  double t7282;
  double t7300;
  double t7301;
  double t7303;
  double t7193;
  double t7194;
  double t7197;
  double t7331;
  double t7336;
  double t7337;
  double t7339;
  double t7340;
  double t7342;
  double t7307;
  double t7308;
  double t7311;
  double t6127;
  double t6144;
  double t6149;
  double t7460;
  double t7461;
  double t7462;
  double t7463;
  double t7464;
  double t7467;
  double t7468;
  double t7453;
  double t7455;
  double t7458;
  double t7494;
  double t7495;
  double t7497;
  double t7459;
  double t7485;
  double t7490;
  double t7512;
  double t7513;
  double t7515;
  double t7506;
  double t7507;
  double t7509;
  double t7516;
  double t7519;
  double t7523;
  double t7526;
  double t7527;
  double t7528;
  double t6275;
  double t6276;
  double t6298;
  double t5113;
  double t5210;
  double t5251;
  double t5781;
  double t5809;
  double t5821;
  double t7374;
  double t7375;
  double t7376;
  double t7378;
  double t7653;
  double t7655;
  double t7656;
  double t7658;
  double t7660;
  double t7662;
  double t7663;
  double t7664;
  double t7666;
  double t7667;
  double t7668;
  double t7632;
  double t7633;
  double t7635;
  double t7383;
  double t7384;
  double t7385;
  double t7386;
  double t5509;
  double t5727;
  double t5733;
  double t7404;
  double t7405;
  double t7410;
  double t7419;
  double t7675;
  double t7685;
  double t7686;
  double t7688;
  double t7443;
  double t7444;
  double t7445;
  double t7446;
  double t5767;
  double t5777;
  double t5778;
  double t7534;
  double t7535;
  double t7536;
  double t7537;
  double t7729;
  double t7730;
  double t7731;
  double t7733;
  double t7735;
  double t7736;
  double t7737;
  double t7739;
  double t7742;
  double t7746;
  double t7747;
  double t7559;
  double t7560;
  double t7561;
  double t7562;
  double t7595;
  double t7598;
  double t7599;
  double t7600;
  double t7616;
  double t7617;
  double t7620;
  double t7621;
  double t7802;
  double t7804;
  double t7805;
  double t7813;
  double t7814;
  double t7815;
  double t7850;
  double t7852;
  double t7853;
  double t7929;
  double t7931;
  double t7943;
  double t7959;
  double t7961;
  double t7962;
  double t7949;
  double t7950;
  double t7951;
  double t7956;
  double t7963;
  double t7964;
  double t7967;
  double t7969;
  double t7970;
  double t6117;
  double t6125;
  double t8048;
  double t8050;
  double t8051;
  double t8054;
  double t8069;
  double t8070;
  double t8071;
  double t8055;
  double t8056;
  double t8057;
  double t8064;
  double t8072;
  double t8078;
  double t8080;
  double t8081;
  double t8084;
  double t7927;
  double t8047;
  double t8166;
  double t8167;
  double t8169;
  double t8173;
  double t8174;
  double t8175;
  double t8182;
  double t8184;
  double t8185;
  double t8170;
  double t8176;
  double t8177;
  double t8096;
  double t8098;
  double t8099;
  double t8179;
  double t8186;
  double t8187;
  double t8191;
  double t8192;
  double t8193;
  double t8124;
  double t8134;
  double t8142;
  double t8143;
  double t7677;
  double t7679;
  double t7650;
  double t7657;
  double t7700;
  double t8274;
  double t7704;
  double t7714;
  double t7715;
  double t7732;
  double t7741;
  double t7754;
  double t7755;
  double t7768;
  double t7770;
  double t7778;
  double t7780;
  double t8260;
  double t8262;
  double t8263;
  double t7305;
  double t7356;
  double t7357;
  double t8296;
  double t8297;
  double t8304;
  double t8310;
  double t8311;
  double t8315;
  double t7396;
  double t8346;
  double t8349;
  double t8350;
  double t7426;
  double t7427;
  double t8359;
  double t8360;
  double t8361;
  double t7510;
  double t7541;
  double t7546;
  double t8395;
  double t8396;
  double t8401;
  double t8408;
  double t8409;
  double t8410;
  double t7569;
  double t8427;
  double t8428;
  double t8429;
  double t7603;
  double t7604;
  double t7954;
  double t7978;
  double t7979;
  double t7997;
  double t8512;
  double t8005;
  double t8006;
  double t8063;
  double t8095;
  double t8125;
  double t8137;
  double t8504;
  double t8548;
  double t8178;
  double t8550;
  double t8552;
  double t8198;
  double t8568;
  double t8215;
  double t8574;
  double t8223;
  double t8576;
  double t8317;
  double t8325;
  double t8334;
  double t8335;
  double t8283;
  double t8289;
  double t8272;
  double t8273;
  double t8414;
  double t8415;
  double t8420;
  double t8421;
  double t8367;
  double t8368;
  double t8379;
  double t8381;
  double t8714;
  double t8715;
  double t8513;
  double t8514;
  double t8669;
  double t8670;
  double t8735;
  double t8736;
  double t8534;
  double t8822;
  double t8751;
  double t8754;
  double t8551;
  double t8777;
  double t8779;
  double t8573;
  double t8850;
  double t8761;
  double t8763;
  double t8765;
  double t8796;
  double t8797;
  double t8801;
  double t8851;
  double t8854;
  double t8860;
  double t8633;
  double t8865;
  double t8871;
  double t8648;
  double t8873;
  double t8922;
  double t8924;
  double t8928;
  double t8929;
  double t8931;
  double t8932;
  t155 = Cos(var1[4]);
  t1036 = Cos(var1[13]);
  t394 = Cos(var1[5]);
  t488 = Sin(var1[12]);
  t751 = Sin(var1[13]);
  t1184 = Sin(var1[5]);
  t2864 = Cos(var1[14]);
  t3438 = Sin(var1[14]);
  t3518 = -1. + t2864;
  t3522 = 0.25*t3518;
  t3523 = -0.37338*t2864;
  t3526 = 0.002196*t3438;
  t3601 = t3522 + t3523 + t3526;
  t3337 = -1.*t2864;
  t3354 = 1. + t3337;
  t3356 = -0.21935*t3354;
  t3415 = -0.221546*t2864;
  t3457 = -0.12338*t3438;
  t3498 = t3356 + t3415 + t3457;
  t3824 = t1036*t2864;
  t3942 = -1.*t751*t3438;
  t4311 = t3824 + t3942;
  t5109 = Sin(var1[4]);
  t5164 = Cos(var1[12]);
  t4781 = t2864*t3601;
  t4803 = 0.21935*t3438;
  t4827 = t3498*t3438;
  t4829 = t4781 + t4803 + t4827;
  t4918 = -1.*t2864*t751;
  t4928 = -1.*t1036*t3438;
  t4929 = t4918 + t4928;
  t3105 = -0.21935*t2864;
  t3517 = -1.*t2864*t3498;
  t3659 = t3601*t3438;
  t3738 = t3105 + t3517 + t3659;
  t4320 = t2864*t751;
  t4380 = t1036*t3438;
  t4398 = t4320 + t4380;
  t5944 = t1036*t394;
  t5945 = -1.*t488*t751*t1184;
  t5946 = t5944 + t5945;
  t5982 = t394*t4311;
  t5991 = t488*t4929*t1184;
  t5992 = t5982 + t5991;
  t6168 = -1.*t1036*t2864;
  t6174 = t751*t3438;
  t6178 = t6168 + t6174;
  t6154 = t5164*t4929*t5109;
  t6161 = t155*t5992;
  t6162 = t6154 + t6161;
  t6163 = 0.241*t3738*t6162;
  t6239 = -0.12338*t2864;
  t6243 = t6239 + t3526;
  t6225 = 0.002196*t2864;
  t6226 = 0.12338*t3438;
  t6229 = t6225 + t6226;
  t6001 = t394*t4398;
  t6024 = t488*t4311*t1184;
  t6039 = t6001 + t6024;
  t6179 = t5164*t6178*t5109;
  t6181 = t394*t4929;
  t6193 = t488*t6178*t1184;
  t6194 = t6181 + t6193;
  t6196 = t155*t6194;
  t6198 = t6179 + t6196;
  t6199 = 0.241*t4829*t6198;
  t5847 = t394*t751;
  t5852 = t1036*t488*t1184;
  t5869 = t5847 + t5852;
  t1964 = t1036*t394*t488;
  t2027 = -1.*t751*t1184;
  t2170 = t1964 + t2027;
  t6410 = Sin(var1[3]);
  t754 = -1.*t394*t488*t751;
  t1390 = -1.*t1036*t1184;
  t1477 = t754 + t1390;
  t6333 = Cos(var1[3]);
  t4986 = t394*t488*t4929;
  t5013 = -1.*t4311*t1184;
  t5045 = t4986 + t5013;
  t4316 = t394*t488*t4311;
  t4499 = -1.*t4398*t1184;
  t4573 = t4316 + t4499;
  t6091 = -1.*t5164*t1036*t5109;
  t5846 = t5164*t1036*t155;
  t5880 = -1.*t5109*t5869;
  t5881 = t5846 + t5880;
  t5909 = -1.*t5164*t155*t751;
  t5957 = -1.*t5109*t5946;
  t5964 = t5909 + t5957;
  t5978 = t5164*t155*t4929;
  t5993 = -1.*t5109*t5992;
  t5994 = t5978 + t5993;
  t6000 = t5164*t155*t4311;
  t6056 = -1.*t5109*t6039;
  t6072 = t6000 + t6056;
  t6102 = -1.*t394*t751;
  t6103 = -1.*t1036*t488*t1184;
  t6105 = t6102 + t6103;
  t6657 = t394*t488*t751;
  t6658 = t1036*t1184;
  t6662 = t6657 + t6658;
  t6668 = -1.*t394*t488*t4929;
  t6673 = t4311*t1184;
  t6674 = t6668 + t6673;
  t6750 = t6333*t6674;
  t6751 = -1.*t6410*t5994;
  t6754 = t6750 + t6751;
  t6760 = 0.241*t3738*t6754;
  t6217 = 0.21935*t2864;
  t6219 = t2864*t3498;
  t6235 = t2864*t6229;
  t6236 = -1.*t3601*t3438;
  t6252 = t6243*t3438;
  t6254 = t6217 + t6219 + t6235 + t6236 + t6252;
  t6256 = -1.*t2864*t6243;
  t6270 = t6229*t3438;
  t6273 = t4781 + t6256 + t4803 + t4827 + t6270;
  t6684 = -1.*t394*t488*t4311;
  t6714 = t4398*t1184;
  t6721 = t6684 + t6714;
  t6761 = -1.*t394*t488*t6178;
  t6762 = t4929*t1184;
  t6767 = t6761 + t6762;
  t6769 = t6333*t6767;
  t6772 = t5164*t155*t6178;
  t6773 = -1.*t5109*t6194;
  t6775 = t6772 + t6773;
  t6781 = -1.*t6410*t6775;
  t6784 = t6769 + t6781;
  t6785 = 0.241*t4829*t6784;
  t6511 = -1.*t155*t5869;
  t6515 = t6091 + t6511;
  t6518 = t5164*t751*t5109;
  t6519 = -1.*t155*t5946;
  t6520 = t6518 + t6519;
  t6528 = -1.*t5164*t4929*t5109;
  t6534 = -1.*t155*t5992;
  t6536 = t6528 + t6534;
  t6552 = -1.*t5164*t4311*t5109;
  t6553 = -1.*t155*t6039;
  t6563 = t6552 + t6553;
  t6572 = -1.*t1036*t155*t488;
  t6574 = -1.*t5164*t1036*t5109*t1184;
  t6575 = t6572 + t6574;
  t6582 = t155*t488*t751;
  t6584 = t5164*t751*t5109*t1184;
  t6585 = t6582 + t6584;
  t6593 = -1.*t155*t488*t4929;
  t6602 = -1.*t5164*t4929*t5109*t1184;
  t6603 = t6593 + t6602;
  t6622 = -1.*t155*t488*t4311;
  t6623 = -1.*t5164*t4311*t5109*t1184;
  t6624 = t6622 + t6623;
  t6638 = -1.*t1036*t394*t488;
  t6642 = t751*t1184;
  t6649 = t6638 + t6642;
  t6742 = t6333*t6662;
  t6745 = -1.*t6410*t5964;
  t6746 = t6742 + t6745;
  t6795 = t6333*t6721;
  t6797 = -1.*t6410*t6072;
  t6851 = t6795 + t6797;
  t6732 = -1.*t5164*t1036*t155;
  t6734 = -1.*t5109*t6105;
  t6735 = t6732 + t6734;
  t7137 = t6410*t6674;
  t7139 = t6333*t5994;
  t7140 = t7137 + t7139;
  t7141 = 0.241*t3738*t7140;
  t7143 = t6410*t6767;
  t7144 = t6333*t6775;
  t7151 = t7143 + t7144;
  t7153 = 0.241*t4829*t7151;
  t7241 = -1.*t5164;
  t7248 = 1. + t7241;
  t7251 = -0.0875*t7248;
  t7252 = -0.14451*t5164;
  t7254 = -0.031996*t1036;
  t7255 = 0.000482*t751;
  t7256 = t7254 + t7255;
  t7258 = -1.*t488*t7256;
  t7269 = t7251 + t7252 + t7258;
  t7203 = -1.*t1036;
  t7207 = 1. + t7203;
  t7213 = -0.21935*t7207;
  t7220 = -0.219832*t1036;
  t7231 = -0.031996*t751;
  t7238 = t7213 + t7220 + t7231;
  t7284 = -1.*t394*t7269;
  t7286 = -1.*t7238*t1184;
  t7293 = t7284 + t7286;
  t7239 = t394*t7238;
  t7272 = -1.*t7269*t1184;
  t7275 = t7239 + t7272;
  t7325 = -0.05701*t488;
  t7328 = t5164*t7256;
  t7330 = t7325 + t7328;
  t7280 = t488*t5109;
  t7281 = -1.*t5164*t155*t1184;
  t7282 = t7280 + t7281;
  t7300 = t394*t7269;
  t7301 = t7238*t1184;
  t7303 = t7300 + t7301;
  t7193 = t5164*t1036*t5109;
  t7194 = t155*t5869;
  t7197 = t7193 + t7194;
  t7331 = t7330*t5109;
  t7336 = t155*t7275;
  t7337 = t7331 + t7336;
  t7339 = t155*t7330;
  t7340 = -1.*t5109*t7275;
  t7342 = t7339 + t7340;
  t7307 = t155*t488;
  t7308 = t5164*t5109*t1184;
  t7311 = t7307 + t7308;
  t6127 = -1.*t5164*t751*t5109;
  t6144 = t155*t5946;
  t6149 = t6127 + t6144;
  t7460 = -0.124881*t5164;
  t7461 = -0.21935*t751;
  t7462 = -1.*t751*t3498;
  t7463 = t1036*t3601;
  t7464 = t7461 + t7462 + t7463;
  t7467 = -1.*t488*t7464;
  t7468 = t7251 + t7460 + t7467;
  t7453 = t1036*t3498;
  t7455 = t751*t3601;
  t7458 = t7213 + t7453 + t7455;
  t7494 = -1.*t394*t7468;
  t7495 = -1.*t7458*t1184;
  t7497 = t7494 + t7495;
  t7459 = t394*t7458;
  t7485 = -1.*t7468*t1184;
  t7490 = t7459 + t7485;
  t7512 = -0.037381*t488;
  t7513 = t5164*t7464;
  t7515 = t7512 + t7513;
  t7506 = t394*t7468;
  t7507 = t7458*t1184;
  t7509 = t7506 + t7507;
  t7516 = t7515*t5109;
  t7519 = t155*t7490;
  t7523 = t7516 + t7519;
  t7526 = t155*t7515;
  t7527 = -1.*t5109*t7490;
  t7528 = t7526 + t7527;
  t6275 = t5164*t4311*t5109;
  t6276 = t155*t6039;
  t6298 = t6275 + t6276;
  t5113 = -1.*t1036*t488*t5109;
  t5210 = t5164*t1036*t155*t1184;
  t5251 = t5113 + t5210;
  t5781 = -1.*t488*t4311*t5109;
  t5809 = t5164*t155*t4311*t1184;
  t5821 = t5781 + t5809;
  t7374 = -1.*t5164*t394*t7303;
  t7375 = -1.*t7282*t7337;
  t7376 = -1.*t7311*t7342;
  t7378 = t7374 + t7375 + t7376;
  t7653 = 0.05701*t488;
  t7655 = -1.*t5164*t7256;
  t7656 = t7653 + t7655;
  t7658 = -0.05701*t5164;
  t7660 = t7658 + t7258;
  t7662 = t7660*t5109;
  t7663 = -1.*t155*t7656*t1184;
  t7664 = t7662 + t7663;
  t7666 = t155*t7660;
  t7667 = t7656*t5109*t1184;
  t7668 = t7666 + t7667;
  t7632 = t5164*t5109;
  t7633 = t155*t488*t1184;
  t7635 = t7632 + t7633;
  t7383 = t7303*t6649;
  t7384 = t7197*t7337;
  t7385 = t5881*t7342;
  t7386 = t7383 + t7384 + t7385;
  t5509 = t488*t751*t5109;
  t5727 = -1.*t5164*t155*t751*t1184;
  t5733 = t5509 + t5727;
  t7404 = t5164*t394*t7303;
  t7405 = t7282*t7337;
  t7410 = t7311*t7342;
  t7419 = t7404 + t7405 + t7410;
  t7675 = Power(t394,2);
  t7685 = t5164*t155;
  t7686 = -1.*t488*t5109*t1184;
  t7688 = t7685 + t7686;
  t7443 = -1.*t6662*t7303;
  t7444 = -1.*t7337*t6149;
  t7445 = -1.*t7342*t5964;
  t7446 = t7443 + t7444 + t7445;
  t5767 = -1.*t488*t4929*t5109;
  t5777 = t5164*t155*t4929*t1184;
  t5778 = t5767 + t5777;
  t7534 = t5164*t394*t7509;
  t7535 = t7282*t7523;
  t7536 = t7311*t7528;
  t7537 = t7534 + t7535 + t7536;
  t7729 = 0.037381*t488;
  t7730 = -1.*t5164*t7464;
  t7731 = t7729 + t7730;
  t7733 = -0.037381*t5164;
  t7735 = t7733 + t7467;
  t7736 = t7735*t5109;
  t7737 = -1.*t155*t7731*t1184;
  t7739 = t7736 + t7737;
  t7742 = t155*t7735;
  t7746 = t7731*t5109*t1184;
  t7747 = t7742 + t7746;
  t7559 = -1.*t7509*t6674;
  t7560 = -1.*t7523*t6162;
  t7561 = -1.*t7528*t5994;
  t7562 = t7559 + t7560 + t7561;
  t7595 = -1.*t5164*t394*t7509;
  t7598 = -1.*t7282*t7523;
  t7599 = -1.*t7311*t7528;
  t7600 = t7595 + t7598 + t7599;
  t7616 = t7509*t6721;
  t7617 = t7523*t6298;
  t7620 = t7528*t6072;
  t7621 = t7616 + t7617 + t7620;
  t7802 = -1.*t7330*t5109;
  t7804 = -1.*t155*t7275;
  t7805 = t7802 + t7804;
  t7813 = -1.*t488*t5109;
  t7814 = t5164*t155*t1184;
  t7815 = t7813 + t7814;
  t7850 = -1.*t7515*t5109;
  t7852 = -1.*t155*t7490;
  t7853 = t7850 + t7852;
  t7929 = 0.000482*t1036;
  t7931 = 0.031996*t751;
  t7943 = t7929 + t7931;
  t7959 = t394*t7256;
  t7961 = t488*t7943*t1184;
  t7962 = t7959 + t7961;
  t7949 = -1.*t394*t488*t7943;
  t7950 = t7256*t1184;
  t7951 = t7949 + t7950;
  t7956 = t5164*t7943*t5109;
  t7963 = t155*t7962;
  t7964 = t7956 + t7963;
  t7967 = t5164*t155*t7943;
  t7969 = -1.*t5109*t7962;
  t7970 = t7967 + t7969;
  t6117 = t155*t6105;
  t6125 = t6091 + t6117;
  t8048 = -0.21935*t1036;
  t8050 = -1.*t1036*t3498;
  t8051 = -1.*t751*t3601;
  t8054 = t8048 + t8050 + t8051;
  t8069 = t394*t7464;
  t8070 = t488*t8054*t1184;
  t8071 = t8069 + t8070;
  t8055 = -1.*t394*t488*t8054;
  t8056 = t7464*t1184;
  t8057 = t8055 + t8056;
  t8064 = t5164*t8054*t5109;
  t8072 = t155*t8071;
  t8078 = t8064 + t8072;
  t8080 = t5164*t155*t8054;
  t8081 = -1.*t5109*t8071;
  t8084 = t8080 + t8081;
  t7927 = 5.e-6*t6162;
  t8047 = t6162*t7600;
  t8166 = -1.*t751*t6243;
  t8167 = t1036*t6229;
  t8169 = t8166 + t8167;
  t8173 = t1036*t6243;
  t8174 = t751*t6229;
  t8175 = t8173 + t8174;
  t8182 = t394*t8175;
  t8184 = t488*t8169*t1184;
  t8185 = t8182 + t8184;
  t8170 = -1.*t394*t488*t8169;
  t8176 = t8175*t1184;
  t8177 = t8170 + t8176;
  t8096 = t7509*t6674;
  t8098 = t7523*t6162;
  t8099 = t7528*t5994;
  t8179 = t5164*t8169*t5109;
  t8186 = t155*t8185;
  t8187 = t8179 + t8186;
  t8191 = t5164*t155*t8169;
  t8192 = -1.*t5109*t8185;
  t8193 = t8191 + t8192;
  t8124 = t6198*t7537;
  t8134 = -1.*t7509*t6767;
  t8142 = -1.*t7523*t6198;
  t8143 = -1.*t7528*t6775;
  t7677 = -1.*t5164*t7675*t7656;
  t7679 = t394*t488*t7303;
  t7650 = -1.*t5164*t1036*t394*t7303;
  t7657 = t394*t7656*t6649;
  t7700 = t5164*t7675*t7656;
  t8274 = Power(t1184,2);
  t7704 = -1.*t394*t488*t7303;
  t7714 = -1.*t394*t7656*t6662;
  t7715 = -1.*t5164*t394*t751*t7303;
  t7732 = t5164*t7675*t7731;
  t7741 = -1.*t394*t488*t7509;
  t7754 = t5164*t394*t4929*t7509;
  t7755 = -1.*t394*t7731*t6674;
  t7768 = -1.*t5164*t7675*t7731;
  t7770 = t394*t488*t7509;
  t7778 = -1.*t5164*t394*t4311*t7509;
  t7780 = t394*t7731*t6721;
  t8260 = -1.*t488*t7330;
  t8262 = t5164*t1184*t7275;
  t8263 = t8260 + t8262 + t7374;
  t7305 = t5164*t1184*t7303;
  t7356 = t5869*t7303;
  t7357 = t7275*t6649;
  t8296 = t5164*t1036*t7330;
  t8297 = t5869*t7275;
  t8304 = t8296 + t8297 + t7383;
  t8310 = t488*t7330;
  t8311 = -1.*t5164*t1184*t7275;
  t8315 = t8310 + t8311 + t7404;
  t7396 = -1.*t5164*t1184*t7303;
  t8346 = t5164*t7330*t751;
  t8349 = -1.*t7275*t5946;
  t8350 = t8346 + t7443 + t8349;
  t7426 = -1.*t6662*t7275;
  t7427 = -1.*t7303*t5946;
  t8359 = t488*t7515;
  t8360 = -1.*t5164*t1184*t7490;
  t8361 = t8359 + t8360 + t7534;
  t7510 = -1.*t5164*t1184*t7509;
  t7541 = -1.*t7509*t5992;
  t7546 = -1.*t7490*t6674;
  t8395 = -1.*t5164*t7515*t4929;
  t8396 = -1.*t7490*t5992;
  t8401 = t8395 + t8396 + t7559;
  t8408 = -1.*t488*t7515;
  t8409 = t5164*t1184*t7490;
  t8410 = t8408 + t8409 + t7595;
  t7569 = t5164*t1184*t7509;
  t8427 = t5164*t7515*t4311;
  t8428 = t7490*t6039;
  t8429 = t8427 + t7616 + t8428;
  t7603 = t7490*t6721;
  t7604 = t7509*t6039;
  t7954 = -1.*t5164*t394*t7951;
  t7978 = t6662*t7303;
  t7979 = t7951*t6649;
  t7997 = t5164*t394*t7951;
  t8512 = Power(t5164,2);
  t8005 = -1.*t6662*t7951;
  t8006 = -1.*t7303*t2170;
  t8063 = -1.*t5164*t394*t8057;
  t8095 = t8057*t6721;
  t8125 = t5164*t394*t8057;
  t8137 = -1.*t8057*t6674;
  t8504 = 5.e-6*t6674;
  t8548 = t6674*t8410;
  t8178 = -1.*t5164*t394*t8177;
  t8550 = t5164*t7515*t4929;
  t8552 = t7490*t5992;
  t8198 = t8177*t6721;
  t8568 = t6767*t8361;
  t8215 = t5164*t394*t8177;
  t8574 = -1.*t5164*t7515*t6178;
  t8223 = -1.*t8177*t6674;
  t8576 = -1.*t7490*t6194;
  t8317 = t5164*t7330;
  t8325 = t488*t7660;
  t8334 = -1.*t488*t7330*t751;
  t8335 = t5164*t7660*t751;
  t8283 = -1.*t1036*t488*t7330;
  t8289 = t5164*t1036*t7660;
  t8272 = -1.*t5164*t7330;
  t8273 = -1.*t488*t7660;
  t8414 = -1.*t5164*t7515;
  t8415 = -1.*t488*t7735;
  t8420 = -1.*t488*t7515*t4311;
  t8421 = t5164*t7735*t4311;
  t8367 = t5164*t7515;
  t8368 = t488*t7735;
  t8379 = t488*t7515*t4929;
  t8381 = -1.*t5164*t7735*t4929;
  t8714 = -1.*t5164*t7269;
  t8715 = t8260 + t8714;
  t8513 = t8512*t1036*t7943;
  t8514 = -1.*t5164*t7330*t751;
  t8669 = t5164*t7269;
  t8670 = t8310 + t8669;
  t8735 = -1.*t1036*t488*t7269;
  t8736 = t7238*t751;
  t8534 = t8512*t7943*t751;
  t8822 = Power(t488,2);
  t8751 = -1.*t5164*t7468;
  t8754 = t8408 + t8751;
  t8551 = t8512*t8054*t4311;
  t8777 = t5164*t7468;
  t8779 = t8359 + t8777;
  t8573 = -1.*t8512*t8054*t4929;
  t8850 = 5.e-6*t5164*t4929;
  t8761 = t7458*t4398;
  t8763 = -1.*t488*t7468*t4311;
  t8765 = t8761 + t8427 + t8763;
  t8796 = t488*t7468*t4929;
  t8797 = -1.*t7458*t4311;
  t8801 = t8395 + t8796 + t8797;
  t8851 = t5164*t8754*t4929;
  t8854 = -1.*t488*t7468*t4929;
  t8860 = t7458*t4311;
  t8633 = t8512*t8169*t4311;
  t8865 = t5164*t8779*t6178;
  t8871 = -1.*t7458*t4929;
  t8648 = -1.*t8512*t8169*t4929;
  t8873 = t488*t7468*t6178;
  t8922 = 5.e-6*t4311;
  t8924 = -0.009008821*t4929*t3738;
  t8928 = 0.124881*t4311;
  t8929 = 0.0875*t6178;
  t8931 = t8928 + t8929;
  t8932 = 0.241*t4829*t8931;
  p_output1[0]=var2[13]*(-0.5*(0.000736496*t5881 - 0.048889888*t5964 + 0.241*t4829*t5994 + 0.241*t3738*t6072)*var2[4] - 0.5*(-0.048889888*t1477*t155 + 0.000736496*t155*t2170 + 0.241*t155*t3738*t4573 + 0.241*t155*t4829*t5045)*var2[5] - 0.5*(0.000736496*t5251 - 0.048889888*t5733 + 0.241*t4829*t5778 + 0.241*t3738*t5821)*var2[12] - 0.5*(-0.048889888*t6125 + 0.000736496*t6149 + t6163 + t6199)*var2[13] - 0.5*(t6163 + t6199 + 0.241*t6162*t6254 + 0.241*t6273*t6298)*var2[14]);
  p_output1[1]=var2[13]*(-0.5*(0.000736496*(-1.*t5881*t6333 - 1.*t6410*t6649) - 0.048889888*(-1.*t5964*t6333 - 1.*t6410*t6662) + 0.241*t4829*(-1.*t5994*t6333 - 1.*t6410*t6674) + 0.241*t3738*(-1.*t6072*t6333 - 1.*t6410*t6721))*var2[3] - 0.5*(-0.000736496*t6410*t6515 + 0.048889888*t6410*t6520 - 0.241*t4829*t6410*t6536 - 0.241*t3738*t6410*t6563)*var2[4] - 0.5*(-0.048889888*(t5946*t6333 + t1477*t5109*t6410) + 0.000736496*(t5869*t6333 + t2170*t5109*t6410) + 0.241*t3738*(t6039*t6333 + t4573*t5109*t6410) + 0.241*t4829*(t5992*t6333 + t5045*t5109*t6410))*var2[5] - 0.5*(0.000736496*(-1.*t1036*t394*t5164*t6333 - 1.*t6410*t6575) + 0.241*t4829*(-1.*t394*t4929*t5164*t6333 - 1.*t6410*t6603) + 0.241*t3738*(-1.*t394*t4311*t5164*t6333 - 1.*t6410*t6624) - 0.048889888*(-1.*t6410*t6585 + t394*t5164*t6333*t751))*var2[12] - 0.5*(-0.048889888*(t2170*t6333 - 1.*t6410*t6735) + 0.000736496*t6746 + t6760 + t6785)*var2[13] - 0.5*(0.241*t6254*t6754 + t6760 + t6785 + 0.241*t6273*t6851)*var2[14]);
  p_output1[2]=var2[13]*(-0.5*(0.000736496*(-1.*t5881*t6410 + t6333*t6649) - 0.048889888*t6746 + 0.241*t4829*t6754 + 0.241*t3738*t6851)*var2[3] - 0.5*(0.000736496*t6333*t6515 - 0.048889888*t6333*t6520 + 0.241*t4829*t6333*t6536 + 0.241*t3738*t6333*t6563)*var2[4] - 0.5*(0.000736496*(-1.*t2170*t5109*t6333 + t5869*t6410) - 0.048889888*(-1.*t1477*t5109*t6333 + t5946*t6410) + 0.241*t4829*(-1.*t5045*t5109*t6333 + t5992*t6410) + 0.241*t3738*(-1.*t4573*t5109*t6333 + t6039*t6410))*var2[5] - 0.5*(0.000736496*(-1.*t1036*t394*t5164*t6410 + t6333*t6575) + 0.241*t4829*(-1.*t394*t4929*t5164*t6410 + t6333*t6603) + 0.241*t3738*(-1.*t394*t4311*t5164*t6410 + t6333*t6624) - 0.048889888*(t6333*t6585 + t394*t5164*t6410*t751))*var2[12] - 0.5*(0.000736496*(t5964*t6333 + t6410*t6662) - 0.048889888*(t2170*t6410 + t6333*t6735) + t7141 + t7153)*var2[13] - 0.5*(0.241*t6273*(t6072*t6333 + t6410*t6721) + 0.241*t6254*t7140 + t7141 + t7153)*var2[14]);
  p_output1[3]=var2[13]*(-0.5*(0.000085*t5881 + 5.e-6*t6072 + 0.015477*t7311 + 1.e-5*(t5109*t5946 + t155*t5164*t751) - 0.048889888*(t5881*t7378 + t7311*t7386 + t7282*(t5881*t7337 + t6515*t7342 + t7197*t7342 + t5881*t7805) + t7197*(-1.*t7311*t7337 - 1.*t7282*t7342 - 1.*t7311*t7805 - 1.*t7342*t7815)) + 0.000736496*(t5964*t7419 + t7311*t7446 + t7282*(-1.*t5964*t7337 - 1.*t6149*t7342 - 1.*t6520*t7342 - 1.*t5964*t7805) + t6149*(t7311*t7337 + t7282*t7342 + t7311*t7805 + t7342*t7815)) + 0.241*t4829*(t6072*t7600 + t7311*t7621 + t7282*(t6072*t7523 + t6298*t7528 + t6563*t7528 + t6072*t7853) + t6298*(-1.*t7311*t7523 - 1.*t7282*t7528 - 1.*t7528*t7815 - 1.*t7311*t7853)) + 0.241*t3738*(t5994*t7537 + t7311*t7562 + t7282*(-1.*t5994*t7523 - 1.*t6162*t7528 - 1.*t6536*t7528 - 1.*t5994*t7853) + t6162*(t7311*t7523 + t7282*t7528 + t7528*t7815 + t7311*t7853)))*var2[4] - 0.5*(-1.e-5*t1477*t155 + 0.000085*t155*t2170 + 5.e-6*t155*t4573 - 0.015477*t155*t394*t5164 - 0.048889888*(t7197*(-1.*t394*t5164*t7275 - 1.*t155*t7282*t7293 + t7305 + t5109*t7293*t7311 + t155*t394*t5164*t7337 - 1.*t394*t5109*t5164*t7342) + t7282*(-1.*t5109*t5881*t7293 + t155*t7197*t7293 + t155*t2170*t7337 - 1.*t2170*t5109*t7342 + t7356 + t7357) + t155*t2170*t7378 - 1.*t155*t394*t5164*t7386) + 0.000736496*(t6149*(t394*t5164*t7275 + t155*t7282*t7293 - 1.*t5109*t7293*t7311 - 1.*t155*t394*t5164*t7337 + t394*t5109*t5164*t7342 + t7396) + t1477*t155*t7419 + t7282*(t5109*t5964*t7293 - 1.*t155*t6149*t7293 - 1.*t1477*t155*t7337 + t1477*t5109*t7342 + t7426 + t7427) - 1.*t155*t394*t5164*t7446) + 0.241*t3738*(t6162*(t394*t5164*t7490 + t155*t7282*t7497 - 1.*t5109*t7311*t7497 + t7510 - 1.*t155*t394*t5164*t7523 + t394*t5109*t5164*t7528) + t155*t5045*t7537 + t7282*(t5109*t5994*t7497 - 1.*t155*t6162*t7497 - 1.*t155*t5045*t7523 + t5045*t5109*t7528 + t7541 + t7546) - 1.*t155*t394*t5164*t7562) + 0.241*t4829*(t6298*(-1.*t394*t5164*t7490 - 1.*t155*t7282*t7497 + t5109*t7311*t7497 + t155*t394*t5164*t7523 - 1.*t394*t5109*t5164*t7528 + t7569) + t155*t4573*t7600 + t7282*(-1.*t5109*t6072*t7497 + t155*t6298*t7497 + t155*t4573*t7523 - 1.*t4573*t5109*t7528 + t7603 + t7604) - 1.*t155*t394*t5164*t7621))*var2[5] - 0.5*(0.000085*t5251 + 5.e-6*t5821 + 1.e-5*(-1.*t488*t5109*t751 + t1184*t155*t5164*t751) + 0.015477*t7635 - 0.048889888*(t5251*t7378 + t7386*t7635 + t7282*(t5251*t7337 + t6575*t7342 + t7650 + t7657 + t7197*t7664 + t5881*t7668) + t7197*(-1.*t7337*t7635 - 1.*t7282*t7664 - 1.*t7311*t7668 + t7677 + t7679 - 1.*t7342*t7688)) + 0.000736496*(t5733*t7419 + t7446*t7635 + t6149*(t7337*t7635 + t7282*t7664 + t7311*t7668 + t7342*t7688 + t7700 + t7704) + t7282*(-1.*t5733*t7337 - 1.*t6585*t7342 - 1.*t6149*t7664 - 1.*t5964*t7668 + t7714 + t7715)) + 0.241*t3738*(t5778*t7537 + t7562*t7635 + t6162*(t7523*t7635 + t7528*t7688 + t7732 + t7282*t7739 + t7741 + t7311*t7747) + t7282*(-1.*t5778*t7523 - 1.*t6603*t7528 - 1.*t6162*t7739 - 1.*t5994*t7747 + t7754 + t7755)) + 0.241*t4829*(t5821*t7600 + t7621*t7635 + t6298*(-1.*t7523*t7635 - 1.*t7528*t7688 - 1.*t7282*t7739 - 1.*t7311*t7747 + t7768 + t7770) + t7282*(t5821*t7523 + t6624*t7528 + t6298*t7739 + t6072*t7747 + t7778 + t7780)))*var2[12] - 0.5*(0.000085*t6149 + 1.e-5*(-1.*t155*t6105 + t7193) + t7927 - 0.048889888*(t6149*t7378 + t7197*(t7954 - 1.*t7282*t7964 - 1.*t7311*t7970) + t7282*(t6149*t7337 + t5964*t7342 + t7197*t7964 + t5881*t7970 + t7978 + t7979)) + 0.000736496*(t6125*t7419 + t6149*(t7282*t7964 + t7311*t7970 + t7997) + t7282*(-1.*t6125*t7337 - 1.*t6735*t7342 - 1.*t6149*t7964 - 1.*t5964*t7970 + t8005 + t8006)) + 0.241*t4829*(t8047 + t6298*(t8063 - 1.*t7282*t8078 - 1.*t7311*t8084) + t7282*(t6298*t8078 + t6072*t8084 + t8095 + t8096 + t8098 + t8099)) + 0.241*t3738*(t8124 + t6162*(t7282*t8078 + t7311*t8084 + t8125) + t7282*(-1.*t6162*t8078 - 1.*t5994*t8084 + t8134 + t8137 + t8142 + t8143)))*var2[13] - 0.5*(0.241*t6273*(t6162*t7537 + t7282*t7562) + 0.241*t6254*(t6298*t7600 + t7282*t7621) + t7927 + 0.241*t4829*(t8047 + t6298*(t8178 - 1.*t7282*t8187 - 1.*t7311*t8193) + t7282*(t8096 + t8098 + t8099 + t6298*t8187 + t6072*t8193 + t8198)) + 0.241*t3738*(t8124 + t6162*(t7282*t8187 + t7311*t8193 + t8215) + t7282*(t8134 + t8142 + t8143 - 1.*t6162*t8187 - 1.*t5994*t8193 + t8223)))*var2[14]);
  p_output1[4]=var2[13]*(-0.5*(-0.015477*t1184*t5164 + 0.000085*t5869 + 5.e-6*t6039 + 1.e-5*(-1.*t1036*t394 + t1184*t488*t751) - 0.048889888*(t6649*(t1184*t5164*t7293 + t7305) + t394*t5164*(t2170*t7275 + t5869*t7293 + t7356 + t7357) + t5869*t8263 - 1.*t1184*t5164*t8304) + 0.000736496*(t6662*(-1.*t1184*t5164*t7293 + t7396) + t394*t5164*(-1.*t1477*t7275 - 1.*t5946*t7293 + t7426 + t7427) + t5946*t8315 - 1.*t1184*t5164*t8350) + 0.241*t3738*(t6674*(-1.*t1184*t5164*t7497 + t7510) + t394*t5164*(-1.*t5045*t7490 - 1.*t5992*t7497 + t7541 + t7546) + t5992*t8361 - 1.*t1184*t5164*t8401) + 0.241*t4829*(t6721*(t1184*t5164*t7497 + t7569) + t394*t5164*(t4573*t7490 + t6039*t7497 + t7603 + t7604) + t6039*t8410 - 1.*t1184*t5164*t8429))*var2[5] - 0.5*(-0.015477*t394*t488 - 0.000085*t1036*t394*t5164 - 5.e-6*t394*t4311*t5164 - 1.e-5*t394*t5164*t751 - 0.048889888*(-1.*t1036*t394*t5164*t8263 + t6649*(-1.*t1184*t488*t7275 + t7677 + t7679 + t8272 + t8273 - 1.*t5164*t7656*t8274) + t394*t5164*(t1036*t1184*t5164*t7275 + t7650 - 1.*t1184*t5869*t7656 + t7657 + t8283 + t8289) - 1.*t394*t488*t8304) + 0.000736496*(t394*t5164*t751*t8315 + t6662*(t1184*t488*t7275 + t7700 + t7704 + t5164*t7656*t8274 + t8317 + t8325) + t394*t5164*(t1184*t5164*t7275*t751 + t1184*t5946*t7656 + t7714 + t7715 + t8334 + t8335) - 1.*t394*t488*t8350) + 0.241*t3738*(-1.*t394*t4929*t5164*t8361 + t6674*(t1184*t488*t7490 + t7732 + t7741 + t5164*t7731*t8274 + t8367 + t8368) + t394*t5164*(-1.*t1184*t4929*t5164*t7490 + t1184*t5992*t7731 + t7754 + t7755 + t8379 + t8381) - 1.*t394*t488*t8401) + 0.241*t4829*(-1.*t394*t4311*t5164*t8410 + t6721*(-1.*t1184*t488*t7490 + t7768 + t7770 - 1.*t5164*t7731*t8274 + t8414 + t8415) + t394*t5164*(t1184*t4311*t5164*t7490 - 1.*t1184*t6039*t7731 + t7778 + t7780 + t8420 + t8421) - 1.*t394*t488*t8429))*var2[12] - 0.5*(1.e-5*t6649 + 0.000085*t6662 + t8504 - 0.048889888*(t6649*(-1.*t488*t5164*t7943 + t7954 + t1184*t5164*t7962) + t6662*t8263 + t394*t5164*(t5946*t7275 + t5869*t7962 + t7978 + t7979 + t8513 + t8514)) + 0.000736496*(t6662*(t488*t5164*t7943 - 1.*t1184*t5164*t7962 + t7997) + t2170*t8315 + t394*t5164*(-1.*t6105*t7275 - 1.*t5946*t7962 + t8005 + t8006 + t8296 + t8534)) + 0.241*t4829*(t6721*(-1.*t488*t5164*t8054 + t8063 + t1184*t5164*t8071) + t8548 + t394*t5164*(t6039*t8071 + t8095 + t8096 + t8550 + t8551 + t8552)) + 0.241*t3738*(t6674*(t488*t5164*t8054 - 1.*t1184*t5164*t8071 + t8125) + t8568 + t394*t5164*(-1.*t5992*t8071 + t8134 + t8137 + t8573 + t8574 + t8576)))*var2[13] - 0.5*(0.241*t6273*(t6674*t8361 + t394*t5164*t8401) + 0.241*t6254*(t6721*t8410 + t394*t5164*t8429) + t8504 + 0.241*t4829*(t6721*(-1.*t488*t5164*t8169 + t8178 + t1184*t5164*t8185) + t8548 + t394*t5164*(t8096 + t6039*t8185 + t8198 + t8550 + t8552 + t8633)) + 0.241*t3738*(t6674*(t488*t5164*t8169 - 1.*t1184*t5164*t8185 + t8215) + t8568 + t394*t5164*(t8134 - 1.*t5992*t8185 + t8223 + t8574 + t8576 + t8648)))*var2[14]);
  p_output1[5]=var2[13]*(-0.5*(-0.000085*t1036*t488 - 5.e-6*t4311*t488 + 0.015477*t5164 - 1.e-5*t488*t751 + 0.000736496*(-1.*t5164*t751*(-1.*t488*t7269 + t5164*t7656 + t8317 + t8325) + t488*(-1.*t5164*t7269*t751 - 1.*t488*t751*t7656 + t8334 + t8335) + t5164*(-1.*t1036*t7238 - 1.*t488*t7269*t751 + t8346) + t488*t751*t8670) - 0.048889888*(t1036*t5164*(t488*t7269 - 1.*t5164*t7656 + t8272 + t8273) + t488*(-1.*t1036*t5164*t7269 - 1.*t1036*t488*t7656 + t8283 + t8289) - 1.*t1036*t488*t8715 + t5164*(t8296 + t8735 + t8736)) + 0.241*t4829*(t4311*t5164*(t488*t7468 - 1.*t5164*t7731 + t8414 + t8415) + t488*(-1.*t4311*t5164*t7468 - 1.*t4311*t488*t7731 + t8420 + t8421) - 1.*t4311*t488*t8754 + t5164*t8765) + 0.241*t3738*(t4929*t5164*(-1.*t488*t7468 + t5164*t7731 + t8367 + t8368) + t488*(t4929*t5164*t7468 + t488*t4929*t7731 + t8379 + t8381) - 1.*t488*t4929*t8779 + t5164*t8801))*var2[12] - 0.5*(1.e-5*t1036*t5164 - 0.000085*t5164*t751 - 0.048889888*(-1.*t5164*t751*t8715 + t488*(t1036*t7238 + t7256*t751 + t488*t7269*t751 + t8513 + t8514 + t1036*t7943*t8822)) + 0.000736496*(-1.*t1036*t5164*t8670 + t488*(-1.*t1036*t7256 + t8296 + t8534 + t8735 + t8736 + t751*t7943*t8822)) + t8850 + 0.241*t4829*(t8851 + t488*(t4398*t7464 + t8550 + t8551 + t4311*t8054*t8822 + t8854 + t8860)) + 0.241*t3738*(t8865 + t488*(-1.*t4311*t7464 + t8573 + t8574 - 1.*t4929*t8054*t8822 + t8871 + t8873)))*var2[13] - 0.5*(0.241*t6254*(t4311*t5164*t8754 + t488*t8765) + 0.241*t6273*(t4929*t5164*t8779 + t488*t8801) + t8850 + 0.241*t4829*(t8851 + t488*(t4398*t8175 + t8550 + t8633 + t4311*t8169*t8822 + t8854 + t8860)) + 0.241*t3738*(t8865 + t488*(-1.*t4311*t8175 + t8574 + t8648 - 1.*t4929*t8169*t8822 + t8871 + t8873)))*var2[14]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=var2[13]*(-0.5*(-0.00270221251488*t1036 + 0.00005198763696*t751 + t8922 + t8924 + t8932)*var2[13] - 0.5*(0.241*(0.124881*t4398 + 0.0875*t4929)*t6254 - 0.009008821*t4311*t6273 + t8922 + t8924 + t8932)*var2[14]);
  p_output1[13]=-0.5*(0.482*t4829*t6254 + 0.482*t3738*t6273)*var2[13]*var2[14];
  p_output1[14]=-0.5*(-0.02973458*t6254 + 0.000529236*t6273)*var2[13]*var2[14];
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec14_laikago_description.hh"

namespace SymFunction
{

void Ce1_vec14_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
