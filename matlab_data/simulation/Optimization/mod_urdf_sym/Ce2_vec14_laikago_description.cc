/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:02:08 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3991;
  double t2642;
  double t3262;
  double t4414;
  double t3810;
  double t4543;
  double t4657;
  double t2320;
  double t4679;
  double t6612;
  double t7340;
  double t8438;
  double t18792;
  double t19388;
  double t19441;
  double t15193;
  double t4859;
  double t7686;
  double t8157;
  double t8284;
  double t8402;
  double t17584;
  double t17585;
  double t17590;
  double t17878;
  double t21135;
  double t21222;
  double t21255;
  double t21303;
  double t21335;
  double t20822;
  double t20881;
  double t20895;
  double t20930;
  double t20971;
  double t20993;
  double t19634;
  double t19763;
  double t20040;
  double t20045;
  double t20117;
  double t20137;
  double t21581;
  double t21595;
  double t21637;
  double t21649;
  double t21674;
  double t21760;
  double t21895;
  double t21896;
  double t21897;
  double t21899;
  double t21831;
  double t21855;
  double t21889;
  double t23041;
  double t23042;
  double t23044;
  double t23065;
  double t22976;
  double t22977;
  double t22999;
  double t22940;
  double t22941;
  double t22943;
  double t23074;
  double t23075;
  double t23077;
  double t23106;
  double t22578;
  double t22758;
  double t22796;
  double t20324;
  double t20327;
  double t20328;
  double t20332;
  double t20333;
  double t20337;
  double t22034;
  double t23341;
  double t23346;
  double t23357;
  double t23371;
  double t23380;
  double t23422;
  double t23423;
  double t23424;
  double t23425;
  double t21763;
  double t22122;
  double t23432;
  double t23435;
  double t23441;
  double t23444;
  double t23006;
  double t23501;
  double t23503;
  double t23504;
  double t23506;
  double t23507;
  double t23508;
  double t23071;
  double t23139;
  double t23148;
  double t23190;
  double t23191;
  double t23566;
  double t23573;
  double t21898;
  double t23577;
  double t23198;
  double t23200;
  double t23204;
  double t23228;
  double t23253;
  double t23254;
  double t23598;
  double t23600;
  double t23602;
  double t23448;
  double t23449;
  double t20342;
  double t20343;
  double t20347;
  double t20349;
  double t20369;
  double t20503;
  double t23530;
  double t23536;
  double t23545;
  double t23363;
  double t23427;
  double t23512;
  double t23513;
  double t23518;
  double t23519;
  double t23690;
  double t23691;
  double t23693;
  double t23066;
  double t23297;
  double t23306;
  double t23307;
  double t23312;
  double t23315;
  double t23320;
  double t23700;
  double t23702;
  double t23703;
  double t23749;
  double t23773;
  double t23830;
  double t23831;
  double t23832;
  double t23833;
  double t23834;
  double t23837;
  double t23838;
  double t23842;
  double t23843;
  double t23849;
  double t23850;
  double t23851;
  double t23852;
  double t23853;
  double t23854;
  double t23855;
  double t23856;
  double t23857;
  double t23758;
  double t23762;
  double t23765;
  double t23774;
  double t23779;
  double t23784;
  double t23802;
  double t23803;
  double t23804;
  double t23809;
  double t23813;
  double t23818;
  double t23893;
  double t23894;
  double t23898;
  double t23907;
  double t23911;
  double t23915;
  double t23860;
  double t23861;
  double t23862;
  double t23867;
  double t23868;
  double t23869;
  double t23873;
  double t23874;
  double t23875;
  double t23877;
  double t23878;
  double t23879;
  double t23928;
  double t23929;
  double t23930;
  double t23932;
  double t23933;
  double t23934;
  double t23931;
  double t23935;
  double t23936;
  double t23683;
  double t23960;
  double t23961;
  double t23962;
  double t23956;
  double t23957;
  double t23958;
  double t23944;
  double t23945;
  double t23946;
  double t23605;
  double t23443;
  double t23948;
  double t23949;
  double t23966;
  double t23969;
  double t23454;
  double t24006;
  double t24007;
  double t24008;
  double t24010;
  double t24011;
  double t24012;
  double t23730;
  double t24022;
  double t24023;
  double t24024;
  double t23707;
  double t24033;
  double t24034;
  double t24035;
  double t24037;
  double t24038;
  double t24039;
  double t24009;
  double t24013;
  double t24014;
  double t23719;
  double t23722;
  double t24044;
  double t24046;
  double t23505;
  double t23514;
  double t24016;
  double t24017;
  double t23522;
  double t23524;
  double t23939;
  double t24086;
  double t24087;
  double t24088;
  double t24093;
  double t24094;
  double t24095;
  double t24090;
  double t24091;
  double t24092;
  double t24089;
  double t24096;
  double t24097;
  double t23959;
  double t23968;
  double t24116;
  double t24117;
  double t24118;
  double t24120;
  double t24121;
  double t24122;
  double t24105;
  double t24106;
  double t24107;
  double t23976;
  double t23981;
  double t23982;
  double t23989;
  double t23993;
  double t24109;
  double t24110;
  double t24128;
  double t24129;
  double t23999;
  double t24000;
  double t24165;
  double t24166;
  double t24167;
  double t24169;
  double t24170;
  double t24171;
  double t24026;
  double t24181;
  double t24182;
  double t24183;
  double t24036;
  double t24045;
  double t24192;
  double t24193;
  double t24194;
  double t24196;
  double t24197;
  double t24198;
  double t24168;
  double t24172;
  double t24173;
  double t24053;
  double t24058;
  double t24060;
  double t24202;
  double t24203;
  double t24068;
  double t24072;
  double t24175;
  double t24176;
  double t24076;
  double t24078;
  double t23922;
  double t23923;
  double t23924;
  double t23885;
  double t23886;
  double t23887;
  double t20705;
  double t21123;
  double t21351;
  double t21370;
  double t21380;
  double t21420;
  double t21437;
  double t21465;
  double t21891;
  double t21892;
  double t21893;
  double t21904;
  double t22009;
  double t22213;
  double t22295;
  double t22310;
  double t22337;
  double t22386;
  double t22433;
  double t23068;
  double t23069;
  double t23070;
  double t23115;
  double t23140;
  double t23142;
  double t23145;
  double t23161;
  double t23169;
  double t23189;
  double t23192;
  double t23193;
  double t23194;
  double t23195;
  double t24255;
  double t24256;
  double t24257;
  double t23889;
  double t23890;
  double t23891;
  double t23273;
  double t23283;
  double t23288;
  double t23918;
  double t23919;
  double t23920;
  double t23325;
  double t23326;
  double t23329;
  double t23429;
  double t23430;
  double t23437;
  double t23438;
  double t23446;
  double t23451;
  double t23452;
  double t23453;
  double t23456;
  double t23461;
  double t23496;
  double t23499;
  double t23509;
  double t23510;
  double t23511;
  double t23515;
  double t23516;
  double t23517;
  double t23520;
  double t23521;
  double t23523;
  double t23525;
  double t23526;
  double t23527;
  double t23528;
  double t23556;
  double t23586;
  double t23587;
  double t23591;
  double t23603;
  double t23607;
  double t23616;
  double t23622;
  double t23630;
  double t23640;
  double t23644;
  double t23650;
  double t23657;
  double t23682;
  double t23684;
  double t23685;
  double t23686;
  double t23687;
  double t23688;
  double t23694;
  double t23695;
  double t23696;
  double t23697;
  double t23704;
  double t23705;
  double t23708;
  double t23709;
  double t23711;
  double t23713;
  double t23717;
  double t23720;
  double t23721;
  double t23723;
  double t23724;
  double t23725;
  double t23726;
  double t23728;
  double t23729;
  double t23731;
  double t23732;
  double t23733;
  double t23734;
  double t23888;
  double t23892;
  double t23902;
  double t23906;
  double t23916;
  double t23917;
  double t23921;
  double t23925;
  double t23926;
  double t23769;
  double t23789;
  double t23792;
  double t23805;
  double t23823;
  double t23825;
  double t23863;
  double t23870;
  double t23871;
  double t23876;
  double t23880;
  double t23881;
  double t23937;
  double t23938;
  double t23940;
  double t23941;
  double t23942;
  double t23947;
  double t23950;
  double t23951;
  double t23952;
  double t23954;
  double t23955;
  double t23963;
  double t23964;
  double t23965;
  double t23967;
  double t23970;
  double t23971;
  double t23972;
  double t23974;
  double t23975;
  double t23977;
  double t23978;
  double t23979;
  double t23980;
  double t23983;
  double t23984;
  double t23985;
  double t23986;
  double t23988;
  double t23990;
  double t23991;
  double t23992;
  double t23994;
  double t23995;
  double t23996;
  double t23997;
  double t23998;
  double t24001;
  double t24002;
  double t24003;
  double t24004;
  double t24015;
  double t24018;
  double t24019;
  double t24020;
  double t24032;
  double t24040;
  double t24041;
  double t24042;
  double t24043;
  double t24047;
  double t24048;
  double t24049;
  double t24050;
  double t24025;
  double t24027;
  double t24028;
  double t24029;
  double t24030;
  double t24052;
  double t24054;
  double t24055;
  double t24056;
  double t24057;
  double t24059;
  double t24061;
  double t24062;
  double t24063;
  double t24064;
  double t24066;
  double t24067;
  double t24069;
  double t24070;
  double t24071;
  double t24073;
  double t24074;
  double t24075;
  double t24077;
  double t24079;
  double t24080;
  double t24081;
  double t24082;
  double t24098;
  double t24099;
  double t24100;
  double t24101;
  double t24102;
  double t24103;
  double t24108;
  double t24111;
  double t24112;
  double t24113;
  double t24115;
  double t24119;
  double t24123;
  double t24124;
  double t24125;
  double t24126;
  double t24127;
  double t24130;
  double t24131;
  double t24132;
  double t24134;
  double t24135;
  double t24136;
  double t24137;
  double t24138;
  double t24139;
  double t24140;
  double t24141;
  double t24142;
  double t24143;
  double t24144;
  double t24145;
  double t24147;
  double t24148;
  double t24149;
  double t24150;
  double t24151;
  double t24152;
  double t24153;
  double t24154;
  double t24155;
  double t24156;
  double t24157;
  double t24158;
  double t24159;
  double t24160;
  double t24161;
  double t24162;
  double t24163;
  double t24174;
  double t24177;
  double t24178;
  double t24179;
  double t24184;
  double t24185;
  double t24186;
  double t24187;
  double t24188;
  double t24189;
  double t24191;
  double t24195;
  double t24199;
  double t24200;
  double t24201;
  double t24204;
  double t24205;
  double t24206;
  double t24207;
  double t24208;
  double t24210;
  double t24211;
  double t24212;
  double t24213;
  double t24214;
  double t24215;
  double t24216;
  double t24217;
  double t24218;
  double t24219;
  double t24220;
  double t24221;
  double t24223;
  double t24224;
  double t24225;
  double t24226;
  double t24227;
  double t24228;
  double t24229;
  double t24230;
  double t24231;
  double t24232;
  double t24233;
  double t24234;
  double t24235;
  double t24236;
  double t24237;
  double t24238;
  double t24239;
  double t24333;
  double t24334;
  double t24335;
  double t23797;
  double t23829;
  double t23847;
  double t23848;
  double t23858;
  double t23859;
  double t23872;
  double t23882;
  double t23883;
  double t24281;
  double t24282;
  double t24283;
  double t24284;
  double t24285;
  double t24286;
  double t24287;
  double t24288;
  double t24289;
  double t24392;
  double t24397;
  double t24398;
  double t24399;
  double t24400;
  double t24411;
  double t24435;
  double t24410;
  double t24412;
  double t24414;
  double t24415;
  double t24416;
  double t24418;
  double t24419;
  double t24420;
  double t24422;
  double t24423;
  double t24424;
  double t24425;
  double t24426;
  double t24427;
  double t24428;
  double t24430;
  double t24431;
  double t24432;
  double t24434;
  double t24436;
  double t24437;
  double t24439;
  double t24440;
  double t24441;
  double t24443;
  double t24444;
  double t24448;
  double t24449;
  double t24450;
  double t24459;
  double t24460;
  double t24461;
  double t24104;
  double t24114;
  double t24133;
  double t24146;
  double t24164;
  double t24180;
  double t24190;
  double t24209;
  double t24222;
  double t24240;
  double t24241;
  double t24378;
  double t24379;
  double t24380;
  double t24381;
  double t24382;
  double t24383;
  double t24384;
  double t24385;
  double t24386;
  double t24387;
  double t24388;
  double t24309;
  double t24310;
  double t24311;
  double t24312;
  double t24313;
  double t24314;
  double t24315;
  double t24316;
  double t24317;
  double t24318;
  double t24319;
  double t24408;
  double t24553;
  double t24558;
  double t24559;
  double t24571;
  double t24587;
  double t24518;
  double t24519;
  double t24520;
  double t24454;
  double t24455;
  double t24456;
  double t24527;
  double t24528;
  double t24529;
  double t24466;
  double t24467;
  double t24468;
  double t24567;
  double t24568;
  double t24569;
  double t24572;
  double t24573;
  double t24577;
  double t24578;
  double t24579;
  double t24580;
  double t24582;
  double t24583;
  double t24584;
  double t24586;
  double t24588;
  double t24590;
  double t24591;
  double t24592;
  double t24594;
  double t24595;
  double t24596;
  double t24598;
  double t24599;
  double t24600;
  double t24485;
  double t24486;
  double t24487;
  double t24494;
  double t24495;
  double t24496;
  double t23943;
  double t23953;
  double t23973;
  double t23987;
  double t24005;
  double t24021;
  double t24031;
  double t24051;
  double t24065;
  double t24083;
  double t24084;
  double t24366;
  double t24367;
  double t24368;
  double t24369;
  double t24370;
  double t24371;
  double t24372;
  double t24373;
  double t24374;
  double t24375;
  double t24376;
  double t24297;
  double t24298;
  double t24299;
  double t24300;
  double t24301;
  double t24302;
  double t24303;
  double t24304;
  double t24305;
  double t24306;
  double t24307;
  double t24575;
  double t24513;
  double t24514;
  double t24515;
  double t24516;
  double t24517;
  double t24521;
  double t24522;
  double t24523;
  double t24524;
  double t24525;
  double t24526;
  double t24530;
  double t24673;
  double t24696;
  double t24678;
  double t24679;
  double t24714;
  double t24686;
  double t24687;
  double t24688;
  double t24689;
  double t24691;
  double t24692;
  double t24693;
  double t24695;
  double t24697;
  double t24699;
  double t24700;
  double t24701;
  double t24709;
  double t24710;
  double t24711;
  double t24713;
  double t24715;
  double t24716;
  double t24718;
  double t24719;
  double t24720;
  double t24722;
  double t24723;
  double t23500;
  double t23529;
  double t23595;
  double t23635;
  double t23681;
  double t23689;
  double t23698;
  double t23715;
  double t23727;
  double t23735;
  double t23736;
  double t24346;
  double t24347;
  double t24348;
  double t24349;
  double t24350;
  double t24351;
  double t24352;
  double t24353;
  double t24354;
  double t24355;
  double t24356;
  double t24268;
  double t24269;
  double t24270;
  double t24271;
  double t24272;
  double t24273;
  double t24274;
  double t24275;
  double t24276;
  double t24277;
  double t24278;
  double t24703;
  double t24602;
  double t24603;
  double t24604;
  double t24605;
  double t24606;
  double t24607;
  double t24608;
  double t24609;
  double t24610;
  double t24611;
  double t24612;
  double t24613;
  double t24446;
  double t24447;
  double t24451;
  double t24452;
  double t24453;
  double t24457;
  double t24458;
  double t24462;
  double t24463;
  double t24464;
  double t24465;
  double t24469;
  double t24782;
  double t24804;
  double t24734;
  double t24735;
  double t24736;
  double t24737;
  double t24738;
  double t24739;
  double t24813;
  double t24744;
  double t24745;
  double t24746;
  double t24747;
  double t24748;
  double t24749;
  double t24805;
  double t24806;
  double t24808;
  double t24809;
  double t24792;
  double t24793;
  double t24794;
  double t24800;
  double t24801;
  double t24802;
  double t24812;
  double t24814;
  double t24816;
  double t24817;
  double t24819;
  double t24820;
  double t24821;
  double t24823;
  double t24824;
  double t24825;
  double t22901;
  double t23196;
  double t23197;
  double t23255;
  double t23261;
  double t23292;
  double t23324;
  double t23330;
  double t23332;
  double t24336;
  double t24337;
  double t24338;
  double t24339;
  double t24340;
  double t24341;
  double t24342;
  double t24343;
  double t24344;
  double t24258;
  double t24259;
  double t24260;
  double t24261;
  double t24262;
  double t24263;
  double t24264;
  double t24265;
  double t24266;
  double t24796;
  double t24797;
  double t24798;
  double t24624;
  double t24625;
  double t24626;
  double t24627;
  double t24628;
  double t24629;
  double t24630;
  double t24631;
  double t24632;
  double t24633;
  double t24634;
  double t24635;
  double t24480;
  double t24481;
  double t24482;
  double t24483;
  double t24484;
  double t24488;
  double t24489;
  double t24490;
  double t24491;
  double t24492;
  double t24493;
  double t24497;
  double t24786;
  double t24787;
  double t24788;
  double t24789;
  double t24790;
  double t24680;
  double t24681;
  double t24682;
  double t24683;
  double t24684;
  double t20338;
  double t20615;
  double t21377;
  double t21509;
  double t21511;
  double t24327;
  double t24328;
  double t24329;
  double t24330;
  double t24331;
  double t24249;
  double t24250;
  double t24251;
  double t24252;
  double t24253;
  double t24560;
  double t24561;
  double t24562;
  double t24563;
  double t24564;
  double t24401;
  double t24402;
  double t24403;
  double t24404;
  double t24405;
  double t24781;
  double t24783;
  double t24784;
  double t24674;
  double t24675;
  double t24676;
  double t18513;
  double t20166;
  double t20230;
  double t24323;
  double t24324;
  double t24325;
  double t24245;
  double t24246;
  double t24247;
  double t24554;
  double t24555;
  double t24556;
  double t24393;
  double t24394;
  double t24395;
  t3991 = Cos(var1[13]);
  t2642 = Cos(var1[14]);
  t3262 = Sin(var1[13]);
  t4414 = Sin(var1[14]);
  t3810 = -1.*t2642*t3262;
  t4543 = -1.*t3991*t4414;
  t4657 = t3810 + t4543;
  t2320 = Cos(var1[12]);
  t4679 = Sin(var1[4]);
  t6612 = Cos(var1[4]);
  t7340 = Cos(var1[5]);
  t8438 = Sin(var1[12]);
  t18792 = -1.*t3991*t2642;
  t19388 = t3262*t4414;
  t19441 = t18792 + t19388;
  t15193 = Sin(var1[5]);
  t4859 = t2320*t4657*t4679;
  t7686 = t3991*t2642;
  t8157 = -1.*t3262*t4414;
  t8284 = t7686 + t8157;
  t8402 = t7340*t8284;
  t17584 = t8438*t4657*t15193;
  t17585 = t8402 + t17584;
  t17590 = t6612*t17585;
  t17878 = t4859 + t17590;
  t21135 = -1. + t2642;
  t21222 = 0.25*t21135;
  t21255 = -0.37338*t2642;
  t21303 = 0.002196*t4414;
  t21335 = t21222 + t21255 + t21303;
  t20822 = -1.*t2642;
  t20881 = 1. + t20822;
  t20895 = -0.21935*t20881;
  t20930 = -0.221546*t2642;
  t20971 = -0.12338*t4414;
  t20993 = t20895 + t20930 + t20971;
  t19634 = t2320*t19441*t4679;
  t19763 = t7340*t4657;
  t20040 = t8438*t19441*t15193;
  t20045 = t19763 + t20040;
  t20117 = t6612*t20045;
  t20137 = t19634 + t20117;
  t21581 = -1.*t3991;
  t21595 = 1. + t21581;
  t21637 = -0.21935*t21595;
  t21649 = -0.219832*t3991;
  t21674 = -0.031996*t3262;
  t21760 = t21637 + t21649 + t21674;
  t21895 = -0.031996*t3991;
  t21896 = 0.000482*t3262;
  t21897 = t21895 + t21896;
  t21899 = -1.*t21760*t3262;
  t21831 = 0.000482*t3991;
  t21855 = 0.031996*t3262;
  t21889 = t21831 + t21855;
  t23041 = -0.21935*t3262;
  t23042 = -1.*t3262*t20993;
  t23044 = t3991*t21335;
  t23065 = t23041 + t23042 + t23044;
  t22976 = t2642*t3262;
  t22977 = t3991*t4414;
  t22999 = t22976 + t22977;
  t22940 = t3991*t20993;
  t22941 = t3262*t21335;
  t22943 = t21637 + t22940 + t22941;
  t23074 = -0.21935*t3991;
  t23075 = -1.*t3991*t20993;
  t23077 = -1.*t3262*t21335;
  t23106 = t23074 + t23075 + t23077;
  t22578 = t8438*t4679;
  t22758 = -1.*t2320*t6612*t15193;
  t22796 = t22578 + t22758;
  t20324 = -1.*t2320*t3991*t4679;
  t20327 = -1.*t7340*t3262;
  t20328 = -1.*t3991*t8438*t15193;
  t20332 = t20327 + t20328;
  t20333 = t6612*t20332;
  t20337 = t20324 + t20333;
  t22034 = t3991*t21760;
  t23341 = -0.05701*t8438;
  t23346 = t2320*t21897;
  t23357 = t23341 + t23346;
  t23371 = -1.*t2320;
  t23380 = 1. + t23371;
  t23422 = -0.0875*t23380;
  t23423 = -0.14451*t2320;
  t23424 = -1.*t8438*t21897;
  t23425 = t23422 + t23423 + t23424;
  t21763 = -1.*t3991*t21760;
  t22122 = -1.*t21897*t3262;
  t23432 = -1.*t2320*t3991*t23357;
  t23435 = t3991*t8438*t23425;
  t23441 = Power(t2320,2);
  t23444 = Power(t8438,2);
  t23006 = -1.*t22943*t22999;
  t23501 = -0.037381*t8438;
  t23503 = t2320*t23065;
  t23504 = t23501 + t23503;
  t23506 = -0.124881*t2320;
  t23507 = -1.*t8438*t23065;
  t23508 = t23422 + t23506 + t23507;
  t23071 = -1.*t23065*t22999;
  t23139 = -1.*t22943*t8284;
  t23148 = t22943*t8284;
  t23190 = t22943*t4657;
  t23191 = t23065*t8284;
  t23566 = t2320*t3991*t23357;
  t23573 = -1.*t3991*t8438*t23425;
  t21898 = -1.*t3991*t21897;
  t23577 = t21760*t3262;
  t23198 = t2320*t3991*t4679;
  t23200 = t7340*t3262;
  t23204 = t3991*t8438*t15193;
  t23228 = t23200 + t23204;
  t23253 = t6612*t23228;
  t23254 = t23198 + t23253;
  t23598 = t8438*t23357;
  t23600 = t2320*t23425;
  t23602 = t23598 + t23600;
  t23448 = t2320*t23357*t3262;
  t23449 = -1.*t8438*t23425*t3262;
  t20342 = -1.*t2320*t3262*t4679;
  t20343 = t3991*t7340;
  t20347 = -1.*t8438*t3262*t15193;
  t20349 = t20343 + t20347;
  t20369 = t6612*t20349;
  t20503 = t20342 + t20369;
  t23530 = -1.*t8438*t23357;
  t23536 = -1.*t2320*t23425;
  t23545 = t23530 + t23536;
  t23363 = -1.*t2320*t23357*t3262;
  t23427 = t8438*t23425*t3262;
  t23512 = -1.*t2320*t23504*t4657;
  t23513 = t8438*t23508*t4657;
  t23518 = t2320*t23504*t4657;
  t23519 = -1.*t8438*t23508*t4657;
  t23690 = t8438*t23504;
  t23691 = t2320*t23508;
  t23693 = t23690 + t23691;
  t23066 = -1.*t23065*t8284;
  t23297 = t2320*t8284*t4679;
  t23306 = t7340*t22999;
  t23307 = t8438*t8284*t15193;
  t23312 = t23306 + t23307;
  t23315 = t6612*t23312;
  t23320 = t23297 + t23315;
  t23700 = -1.*t8438*t23504;
  t23702 = -1.*t2320*t23508;
  t23703 = t23700 + t23702;
  t23749 = Sin(var1[3]);
  t23773 = Cos(var1[3]);
  t23830 = t7340*t8438*t3262;
  t23831 = t3991*t15193;
  t23832 = t23830 + t23831;
  t23833 = t23749*t23832;
  t23834 = -1.*t2320*t6612*t3262;
  t23837 = -1.*t4679*t20349;
  t23838 = t23834 + t23837;
  t23842 = t23773*t23838;
  t23843 = t23833 + t23842;
  t23849 = -1.*t7340*t8438*t4657;
  t23850 = t8284*t15193;
  t23851 = t23849 + t23850;
  t23852 = t23749*t23851;
  t23853 = t2320*t6612*t4657;
  t23854 = -1.*t4679*t17585;
  t23855 = t23853 + t23854;
  t23856 = t23773*t23855;
  t23857 = t23852 + t23856;
  t23758 = t3991*t7340*t8438;
  t23762 = -1.*t3262*t15193;
  t23765 = t23758 + t23762;
  t23774 = -1.*t2320*t3991*t6612;
  t23779 = -1.*t4679*t20332;
  t23784 = t23774 + t23779;
  t23802 = -1.*t3991*t7340*t8438;
  t23803 = t3262*t15193;
  t23804 = t23802 + t23803;
  t23809 = t2320*t3991*t6612;
  t23813 = -1.*t4679*t23228;
  t23818 = t23809 + t23813;
  t23893 = t23773*t23832;
  t23894 = -1.*t23749*t23838;
  t23898 = t23893 + t23894;
  t23907 = t23773*t23851;
  t23911 = -1.*t23749*t23855;
  t23915 = t23907 + t23911;
  t23860 = -1.*t7340*t8438*t8284;
  t23861 = t22999*t15193;
  t23862 = t23860 + t23861;
  t23867 = t2320*t6612*t8284;
  t23868 = -1.*t4679*t23312;
  t23869 = t23867 + t23868;
  t23873 = -1.*t7340*t8438*t19441;
  t23874 = t4657*t15193;
  t23875 = t23873 + t23874;
  t23877 = t2320*t6612*t19441;
  t23878 = -1.*t4679*t20045;
  t23879 = t23877 + t23878;
  t23928 = t7340*t21760;
  t23929 = -1.*t23425*t15193;
  t23930 = t23928 + t23929;
  t23932 = t7340*t23425;
  t23933 = t21760*t15193;
  t23934 = t23932 + t23933;
  t23931 = t2320*t15193*t23930;
  t23935 = -1.*t2320*t7340*t23934;
  t23936 = t23530 + t23931 + t23935;
  t23683 = t23441*t3991*t21889;
  t23960 = t7340*t21897;
  t23961 = t8438*t21889*t15193;
  t23962 = t23960 + t23961;
  t23956 = -1.*t7340*t8438*t21889;
  t23957 = t21897*t15193;
  t23958 = t23956 + t23957;
  t23944 = -1.*t2320*t15193*t23930;
  t23945 = t2320*t7340*t23934;
  t23946 = t23598 + t23944 + t23945;
  t23605 = t23441*t21889*t3262;
  t23443 = -1.*t23441*t3991*t21889;
  t23948 = -1.*t23832*t23934;
  t23949 = -1.*t23930*t20349;
  t23966 = t23832*t23934;
  t23969 = t23930*t20349;
  t23454 = -1.*t23441*t21889*t3262;
  t24006 = t7340*t22943;
  t24007 = -1.*t23508*t15193;
  t24008 = t24006 + t24007;
  t24010 = t7340*t23508;
  t24011 = t22943*t15193;
  t24012 = t24010 + t24011;
  t23730 = t2320*t23504*t8284;
  t24022 = t2320*t15193*t24008;
  t24023 = -1.*t2320*t7340*t24012;
  t24024 = t23700 + t24022 + t24023;
  t23707 = t23441*t23106*t8284;
  t24033 = -1.*t7340*t8438*t23106;
  t24034 = t23065*t15193;
  t24035 = t24033 + t24034;
  t24037 = t7340*t23065;
  t24038 = t8438*t23106*t15193;
  t24039 = t24037 + t24038;
  t24009 = -1.*t2320*t15193*t24008;
  t24013 = t2320*t7340*t24012;
  t24014 = t23690 + t24009 + t24013;
  t23719 = -1.*t23441*t23106*t4657;
  t23722 = -1.*t2320*t23504*t19441;
  t24044 = t24008*t17585;
  t24046 = t24012*t23851;
  t23505 = -1.*t2320*t23504*t8284;
  t23514 = -1.*t23441*t23106*t8284;
  t24016 = -1.*t24008*t17585;
  t24017 = -1.*t24012*t23851;
  t23522 = t23441*t23106*t4657;
  t23524 = t2320*t23504*t19441;
  t23939 = t23934*t23804;
  t24086 = t23357*t4679;
  t24087 = t6612*t23930;
  t24088 = t24086 + t24087;
  t24093 = t6612*t23357;
  t24094 = -1.*t4679*t23930;
  t24095 = t24093 + t24094;
  t24090 = t6612*t8438;
  t24091 = t2320*t4679*t15193;
  t24092 = t24090 + t24091;
  t24089 = -1.*t22796*t24088;
  t24096 = -1.*t24092*t24095;
  t24097 = t23935 + t24089 + t24096;
  t23959 = -1.*t2320*t7340*t23958;
  t23968 = t23958*t23804;
  t24116 = t2320*t21889*t4679;
  t24117 = t6612*t23962;
  t24118 = t24116 + t24117;
  t24120 = t2320*t6612*t21889;
  t24121 = -1.*t4679*t23962;
  t24122 = t24120 + t24121;
  t24105 = t22796*t24088;
  t24106 = t24092*t24095;
  t24107 = t23945 + t24105 + t24106;
  t23976 = t2320*t7340*t23958;
  t23981 = -1.*t23832*t23958;
  t23982 = -1.*t23934*t23765;
  t23989 = -1.*t23934*t23804;
  t23993 = -1.*t23958*t23804;
  t24109 = -1.*t24088*t20503;
  t24110 = -1.*t24095*t23838;
  t24128 = t24088*t20503;
  t24129 = t24095*t23838;
  t23999 = t23832*t23958;
  t24000 = t23934*t23765;
  t24165 = t23504*t4679;
  t24166 = t6612*t24008;
  t24167 = t24165 + t24166;
  t24169 = t6612*t23504;
  t24170 = -1.*t4679*t24008;
  t24171 = t24169 + t24170;
  t24026 = t24012*t23862;
  t24181 = -1.*t22796*t24167;
  t24182 = -1.*t24092*t24171;
  t24183 = t24023 + t24181 + t24182;
  t24036 = -1.*t2320*t7340*t24035;
  t24045 = t24035*t23862;
  t24192 = t2320*t23106*t4679;
  t24193 = t6612*t24039;
  t24194 = t24192 + t24193;
  t24196 = t2320*t6612*t23106;
  t24197 = -1.*t4679*t24039;
  t24198 = t24196 + t24197;
  t24168 = t22796*t24167;
  t24172 = t24092*t24171;
  t24173 = t24013 + t24168 + t24172;
  t24053 = t2320*t7340*t24035;
  t24058 = -1.*t24012*t23875;
  t24060 = -1.*t24035*t23851;
  t24202 = t24167*t17878;
  t24203 = t24171*t23855;
  t24068 = -1.*t24012*t23862;
  t24072 = -1.*t24035*t23862;
  t24175 = -1.*t24167*t17878;
  t24176 = -1.*t24171*t23855;
  t24076 = t24012*t23875;
  t24078 = t24035*t23851;
  t23922 = t23773*t23875;
  t23923 = -1.*t23749*t23879;
  t23924 = t23922 + t23923;
  t23885 = t23773*t23765;
  t23886 = -1.*t23749*t23784;
  t23887 = t23885 + t23886;
  t20705 = -0.21935*t2642;
  t21123 = -1.*t2642*t20993;
  t21351 = t21335*t4414;
  t21370 = t20705 + t21123 + t21351;
  t21380 = t2642*t21335;
  t21420 = 0.21935*t4414;
  t21437 = t20993*t4414;
  t21465 = t21380 + t21420 + t21437;
  t21891 = -1.*t3991*t21889;
  t21892 = t21763 + t21891;
  t21893 = t3991*t21892;
  t21904 = t21898 + t21899;
  t22009 = -1.*t3262*t21904;
  t22213 = t22034 + t22122;
  t22295 = t3991*t22213;
  t22310 = -1.*t21889*t3262;
  t22337 = t21899 + t22310;
  t22386 = t3262*t22337;
  t22433 = t21893 + t22009 + t22295 + t22386;
  t23068 = t23006 + t23066;
  t23069 = t4657*t23068;
  t23070 = -1.*t23065*t4657;
  t23115 = -1.*t23106*t8284;
  t23140 = t23070 + t23071 + t23115 + t23139;
  t23142 = t8284*t23140;
  t23145 = t23065*t4657;
  t23161 = t23145 + t23148;
  t23169 = t8284*t23161;
  t23189 = t23106*t4657;
  t23192 = t23065*t19441;
  t23193 = t23189 + t23190 + t23191 + t23192;
  t23194 = t22999*t23193;
  t23195 = t23069 + t23142 + t23169 + t23194;
  t24255 = t2320*t23773*t7340;
  t24256 = -1.*t23749*t24092;
  t24257 = t24255 + t24256;
  t23889 = t23773*t23804;
  t23890 = -1.*t23749*t23818;
  t23891 = t23889 + t23890;
  t23273 = 0.124881*t8284;
  t23283 = 0.0875*t19441;
  t23288 = t23273 + t23283;
  t23918 = t23773*t23862;
  t23919 = -1.*t23749*t23869;
  t23920 = t23918 + t23919;
  t23325 = 0.0875*t4657;
  t23326 = 0.124881*t22999;
  t23329 = t23325 + t23326;
  t23429 = t22034 + t23363 + t23427;
  t23430 = -1.*t2320*t3262*t23429;
  t23437 = t23432 + t23435 + t21899;
  t23438 = -1.*t2320*t3991*t23437;
  t23446 = -1.*t3991*t23444*t21889;
  t23451 = t21763 + t23443 + t23446 + t23448 + t23449 + t22122;
  t23452 = -1.*t2320*t3262*t23451;
  t23453 = t3991*t21897;
  t23456 = -1.*t23444*t21889*t3262;
  t23461 = t23432 + t23435 + t23453 + t21899 + t23454 + t23456;
  t23496 = t2320*t3991*t23461;
  t23499 = t23430 + t23438 + t23452 + t23496;
  t23509 = t8438*t23508*t8284;
  t23510 = t23006 + t23505 + t23509;
  t23511 = t2320*t19441*t23510;
  t23515 = -1.*t23444*t23106*t8284;
  t23516 = t23512 + t23513 + t23071 + t23514 + t23515 + t23139;
  t23517 = t2320*t4657*t23516;
  t23520 = t23518 + t23519 + t23148;
  t23521 = t2320*t4657*t23520;
  t23523 = t23444*t23106*t4657;
  t23525 = -1.*t8438*t23508*t19441;
  t23526 = t23522 + t23523 + t23190 + t23191 + t23524 + t23525;
  t23527 = t2320*t8284*t23526;
  t23528 = t23511 + t23517 + t23521 + t23527;
  t23556 = t2320*t3991*t23545;
  t23586 = t23566 + t23573 + t23577;
  t23587 = t8438*t23586;
  t23591 = t23556 + t23587;
  t23603 = -1.*t2320*t3991*t23602;
  t23607 = t23444*t21889*t3262;
  t23616 = t23566 + t23573 + t21898 + t23577 + t23605 + t23607;
  t23622 = t8438*t23616;
  t23630 = t23603 + t23622;
  t23640 = -1.*t2320*t23602*t3262;
  t23644 = t21763 + t23448 + t23449;
  t23650 = t8438*t23644;
  t23657 = t23640 + t23650;
  t23682 = -1.*t2320*t23545*t3262;
  t23684 = t3991*t23444*t21889;
  t23685 = t21897*t3262;
  t23686 = t22034 + t23683 + t23684 + t23363 + t23427 + t23685;
  t23687 = t8438*t23686;
  t23688 = t23682 + t23687;
  t23694 = t2320*t23693*t4657;
  t23695 = t23512 + t23513 + t23139;
  t23696 = t8438*t23695;
  t23697 = t23694 + t23696;
  t23704 = t2320*t23703*t4657;
  t23705 = t23065*t22999;
  t23708 = t23444*t23106*t8284;
  t23709 = t23518 + t23519 + t23705 + t23707 + t23708 + t23148;
  t23711 = t8438*t23709;
  t23713 = t23704 + t23711;
  t23717 = t2320*t23693*t19441;
  t23720 = -1.*t23444*t23106*t4657;
  t23721 = -1.*t22943*t4657;
  t23723 = t8438*t23508*t19441;
  t23724 = t23719 + t23720 + t23721 + t23066 + t23722 + t23723;
  t23725 = t8438*t23724;
  t23726 = t23717 + t23725;
  t23728 = t2320*t23703*t8284;
  t23729 = t22943*t22999;
  t23731 = -1.*t8438*t23508*t8284;
  t23732 = t23729 + t23730 + t23731;
  t23733 = t8438*t23732;
  t23734 = t23728 + t23733;
  t23888 = 1.528*t20503*t23887;
  t23892 = 1.528*t20503*t23891;
  t23902 = 1.528*t20337*t23898;
  t23906 = 1.528*t23254*t23898;
  t23916 = 0.241*t23320*t23915;
  t23917 = 0.241*t20137*t23915;
  t23921 = 0.241*t17878*t23920;
  t23925 = 0.241*t17878*t23924;
  t23926 = t23888 + t23892 + t23902 + t23906 + t23916 + t23917 + t23921 + t23925;
  t23769 = t23749*t23765;
  t23789 = t23773*t23784;
  t23792 = t23769 + t23789;
  t23805 = t23749*t23804;
  t23823 = t23773*t23818;
  t23825 = t23805 + t23823;
  t23863 = t23749*t23862;
  t23870 = t23773*t23869;
  t23871 = t23863 + t23870;
  t23876 = t23749*t23875;
  t23880 = t23773*t23879;
  t23881 = t23876 + t23880;
  t23937 = t23804*t23936;
  t23938 = t23228*t23930;
  t23940 = t23566 + t23938 + t23939;
  t23941 = t2320*t7340*t23940;
  t23942 = t23937 + t23941;
  t23947 = t23832*t23946;
  t23950 = t23448 + t23948 + t23949;
  t23951 = t2320*t7340*t23950;
  t23952 = t23947 + t23951;
  t23954 = t23832*t23936;
  t23955 = -1.*t2320*t8438*t21889;
  t23963 = t2320*t15193*t23962;
  t23964 = t23955 + t23959 + t23963;
  t23965 = t23804*t23964;
  t23967 = t23228*t23962;
  t23970 = t23683 + t23363 + t23966 + t23967 + t23968 + t23969;
  t23971 = t2320*t7340*t23970;
  t23972 = t23954 + t23965 + t23971;
  t23974 = t23765*t23946;
  t23975 = t2320*t8438*t21889;
  t23977 = -1.*t2320*t15193*t23962;
  t23978 = t23975 + t23976 + t23977;
  t23979 = t23832*t23978;
  t23980 = -1.*t20332*t23930;
  t23983 = -1.*t23962*t20349;
  t23984 = t23566 + t23605 + t23980 + t23981 + t23982 + t23983;
  t23985 = t2320*t7340*t23984;
  t23986 = t23974 + t23979 + t23985;
  t23988 = -1.*t23228*t23930;
  t23990 = t23432 + t23988 + t23989;
  t23991 = t23765*t23990;
  t23992 = -1.*t23228*t23962;
  t23994 = t23443 + t23448 + t23948 + t23992 + t23993 + t23949;
  t23995 = t23832*t23994;
  t23996 = t23363 + t23966 + t23969;
  t23997 = t23832*t23996;
  t23998 = t20332*t23930;
  t24001 = t23962*t20349;
  t24002 = t23432 + t23454 + t23998 + t23999 + t24000 + t24001;
  t24003 = t23804*t24002;
  t24004 = t23991 + t23995 + t23997 + t24003;
  t24015 = t23851*t24014;
  t24018 = t23512 + t24016 + t24017;
  t24019 = t2320*t7340*t24018;
  t24020 = t24015 + t24019;
  t24032 = -1.*t2320*t8438*t23106;
  t24040 = t2320*t15193*t24039;
  t24041 = t24032 + t24036 + t24040;
  t24042 = t23862*t24041;
  t24043 = t23851*t24024;
  t24047 = t24039*t23312;
  t24048 = t23518 + t23707 + t24044 + t24045 + t24046 + t24047;
  t24049 = t2320*t7340*t24048;
  t24050 = t24042 + t24043 + t24049;
  t24025 = t23862*t24024;
  t24027 = t24008*t23312;
  t24028 = t23730 + t24026 + t24027;
  t24029 = t2320*t7340*t24028;
  t24030 = t24025 + t24029;
  t24052 = t2320*t8438*t23106;
  t24054 = -1.*t2320*t15193*t24039;
  t24055 = t24052 + t24053 + t24054;
  t24056 = t23851*t24055;
  t24057 = t23875*t24014;
  t24059 = -1.*t24039*t17585;
  t24061 = -1.*t24008*t20045;
  t24062 = t23719 + t23722 + t24058 + t24059 + t24060 + t24061;
  t24063 = t2320*t7340*t24062;
  t24064 = t24056 + t24057 + t24063;
  t24066 = t23518 + t24044 + t24046;
  t24067 = t23851*t24066;
  t24069 = -1.*t24008*t23312;
  t24070 = t23505 + t24068 + t24069;
  t24071 = t23875*t24070;
  t24073 = -1.*t24039*t23312;
  t24074 = t23512 + t23514 + t24016 + t24072 + t24017 + t24073;
  t24075 = t23851*t24074;
  t24077 = t24039*t17585;
  t24079 = t24008*t20045;
  t24080 = t23522 + t23524 + t24076 + t24077 + t24078 + t24079;
  t24081 = t23862*t24080;
  t24082 = t24067 + t24071 + t24075 + t24081;
  t24098 = t23254*t24097;
  t24099 = t23254*t24088;
  t24100 = t23818*t24095;
  t24101 = t23939 + t24099 + t24100;
  t24102 = t22796*t24101;
  t24103 = t24098 + t24102;
  t24108 = t20503*t24107;
  t24111 = t23948 + t24109 + t24110;
  t24112 = t22796*t24111;
  t24113 = t24108 + t24112;
  t24115 = t20503*t24097;
  t24119 = -1.*t22796*t24118;
  t24123 = -1.*t24092*t24122;
  t24124 = t23959 + t24119 + t24123;
  t24125 = t23254*t24124;
  t24126 = t23254*t24118;
  t24127 = t23818*t24122;
  t24130 = t23966 + t23968 + t24126 + t24127 + t24128 + t24129;
  t24131 = t22796*t24130;
  t24132 = t24115 + t24125 + t24131;
  t24134 = t20337*t24107;
  t24135 = t22796*t24118;
  t24136 = t24092*t24122;
  t24137 = t23976 + t24135 + t24136;
  t24138 = t20503*t24137;
  t24139 = -1.*t20337*t24088;
  t24140 = -1.*t23784*t24095;
  t24141 = -1.*t24118*t20503;
  t24142 = -1.*t24122*t23838;
  t24143 = t23981 + t23982 + t24139 + t24140 + t24141 + t24142;
  t24144 = t22796*t24143;
  t24145 = t24134 + t24138 + t24144;
  t24147 = -1.*t23254*t24088;
  t24148 = -1.*t23818*t24095;
  t24149 = t23989 + t24147 + t24148;
  t24150 = t20337*t24149;
  t24151 = -1.*t23254*t24118;
  t24152 = -1.*t23818*t24122;
  t24153 = t23948 + t23993 + t24151 + t24152 + t24109 + t24110;
  t24154 = t20503*t24153;
  t24155 = t23966 + t24128 + t24129;
  t24156 = t20503*t24155;
  t24157 = t20337*t24088;
  t24158 = t23784*t24095;
  t24159 = t24118*t20503;
  t24160 = t24122*t23838;
  t24161 = t23999 + t24000 + t24157 + t24158 + t24159 + t24160;
  t24162 = t23254*t24161;
  t24163 = t24150 + t24154 + t24156 + t24162;
  t24174 = t17878*t24173;
  t24177 = t24017 + t24175 + t24176;
  t24178 = t22796*t24177;
  t24179 = t24174 + t24178;
  t24184 = t23320*t24183;
  t24185 = t24167*t23320;
  t24186 = t24171*t23869;
  t24187 = t24026 + t24185 + t24186;
  t24188 = t22796*t24187;
  t24189 = t24184 + t24188;
  t24191 = t17878*t24183;
  t24195 = -1.*t22796*t24194;
  t24199 = -1.*t24092*t24198;
  t24200 = t24036 + t24195 + t24199;
  t24201 = t23320*t24200;
  t24204 = t24194*t23320;
  t24205 = t24198*t23869;
  t24206 = t24045 + t24046 + t24202 + t24203 + t24204 + t24205;
  t24207 = t22796*t24206;
  t24208 = t24191 + t24201 + t24207;
  t24210 = t20137*t24173;
  t24211 = t22796*t24194;
  t24212 = t24092*t24198;
  t24213 = t24053 + t24211 + t24212;
  t24214 = t17878*t24213;
  t24215 = -1.*t24194*t17878;
  t24216 = -1.*t24198*t23855;
  t24217 = -1.*t24167*t20137;
  t24218 = -1.*t24171*t23879;
  t24219 = t24058 + t24060 + t24215 + t24216 + t24217 + t24218;
  t24220 = t22796*t24219;
  t24221 = t24210 + t24214 + t24220;
  t24223 = t24046 + t24202 + t24203;
  t24224 = t17878*t24223;
  t24225 = -1.*t24167*t23320;
  t24226 = -1.*t24171*t23869;
  t24227 = t24068 + t24225 + t24226;
  t24228 = t20137*t24227;
  t24229 = -1.*t24194*t23320;
  t24230 = -1.*t24198*t23869;
  t24231 = t24072 + t24017 + t24175 + t24176 + t24229 + t24230;
  t24232 = t17878*t24231;
  t24233 = t24194*t17878;
  t24234 = t24198*t23855;
  t24235 = t24167*t20137;
  t24236 = t24171*t23879;
  t24237 = t24076 + t24078 + t24233 + t24234 + t24235 + t24236;
  t24238 = t23320*t24237;
  t24239 = t24224 + t24228 + t24232 + t24238;
  t24333 = t2320*t7340*t23749;
  t24334 = t23773*t24092;
  t24335 = t24333 + t24334;
  t23797 = 1.528*t20503*t23792;
  t23829 = 1.528*t20503*t23825;
  t23847 = 1.528*t20337*t23843;
  t23848 = 1.528*t23254*t23843;
  t23858 = 0.241*t23320*t23857;
  t23859 = 0.241*t20137*t23857;
  t23872 = 0.241*t17878*t23871;
  t23882 = 0.241*t17878*t23881;
  t23883 = t23797 + t23829 + t23847 + t23848 + t23858 + t23859 + t23872 + t23882;
  t24281 = 1.528*t23887*t23843;
  t24282 = 1.528*t23891*t23843;
  t24283 = 1.528*t23792*t23898;
  t24284 = 1.528*t23825*t23898;
  t24285 = 0.241*t23915*t23871;
  t24286 = 0.241*t23857*t23920;
  t24287 = 0.241*t23915*t23881;
  t24288 = 0.241*t23857*t23924;
  t24289 = t24281 + t24282 + t24283 + t24284 + t24285 + t24286 + t24287 + t24288;
  t24392 = 5.e-6*t17878;
  t24397 = -1.*t6612*t20332;
  t24398 = t23198 + t24397;
  t24399 = 1.e-5*t24398;
  t24400 = 0.000085*t20503;
  t24411 = 0.00025*t20503;
  t24435 = -3.e-6*t17878;
  t24410 = 0.009916*t20337;
  t24412 = t24410 + t24411;
  t24414 = 0.000085*t22796;
  t24415 = 0.001783*t23254;
  t24416 = t24414 + t24415 + t24411;
  t24418 = 0.00025*t20337;
  t24419 = 0.001783*t20503;
  t24420 = t24418 + t24419;
  t24422 = -1.*t8438*t4679;
  t24423 = t2320*t6612*t15193;
  t24424 = t24422 + t24423;
  t24425 = 1.e-5*t24424;
  t24426 = 0.00025*t23254;
  t24427 = 0.009916*t20503;
  t24428 = t24425 + t24426 + t24427;
  t24430 = 0.006182*t17878;
  t24431 = -3.e-6*t23320;
  t24432 = t24430 + t24431;
  t24434 = 5.e-6*t22796;
  t24436 = 0.000035*t23320;
  t24437 = t24434 + t24435 + t24436;
  t24439 = 0.000035*t17878;
  t24440 = -3.e-6*t20137;
  t24441 = t24439 + t24440;
  t24443 = 0.006182*t20137;
  t24444 = t24435 + t24443;
  t24448 = t20503*t24149;
  t24449 = t23254*t24155;
  t24450 = t24448 + t24449;
  t24459 = t23320*t24223;
  t24460 = t17878*t24227;
  t24461 = t24459 + t24460;
  t24104 = 1.528*t20337*t24103;
  t24114 = 1.528*t20503*t24113;
  t24133 = 1.528*t20503*t24132;
  t24146 = 1.528*t23254*t24145;
  t24164 = 1.528*t22796*t24163;
  t24180 = 0.241*t17878*t24179;
  t24190 = 0.241*t20137*t24189;
  t24209 = 0.241*t17878*t24208;
  t24222 = 0.241*t23320*t24221;
  t24240 = 0.241*t22796*t24239;
  t24241 = t24104 + t24114 + t24133 + t24146 + t24164 + t24180 + t24190 + t24209 + t24222 + t24240;
  t24378 = 1.528*t23792*t24103;
  t24379 = 1.528*t23843*t24113;
  t24380 = 1.528*t23843*t24132;
  t24381 = 1.528*t23825*t24145;
  t24382 = 1.528*t24335*t24163;
  t24383 = 0.241*t23857*t24179;
  t24384 = 0.241*t23881*t24189;
  t24385 = 0.241*t23857*t24208;
  t24386 = 0.241*t23871*t24221;
  t24387 = 0.241*t24335*t24239;
  t24388 = t24378 + t24379 + t24380 + t24381 + t24382 + t24383 + t24384 + t24385 + t24386 + t24387;
  t24309 = 1.528*t23887*t24103;
  t24310 = 1.528*t23898*t24113;
  t24311 = 1.528*t23898*t24132;
  t24312 = 1.528*t23891*t24145;
  t24313 = 1.528*t24257*t24163;
  t24314 = 0.241*t23915*t24179;
  t24315 = 0.241*t23924*t24189;
  t24316 = 0.241*t23915*t24208;
  t24317 = 0.241*t23920*t24221;
  t24318 = 0.241*t24257*t24239;
  t24319 = t24309 + t24310 + t24311 + t24312 + t24313 + t24314 + t24315 + t24316 + t24317 + t24318;
  t24408 = t24399 + t24400;
  t24553 = 5.e-6*t23851;
  t24558 = 0.000085*t23832;
  t24559 = 1.e-5*t23804;
  t24571 = 0.00025*t23832;
  t24587 = -3.e-6*t23851;
  t24518 = t23832*t23990;
  t24519 = t23804*t23996;
  t24520 = t24518 + t24519;
  t24454 = t2320*t3991*t23429;
  t24455 = -1.*t2320*t3262*t23437;
  t24456 = t24454 + t24455;
  t24527 = t23862*t24066;
  t24528 = t23851*t24070;
  t24529 = t24527 + t24528;
  t24466 = t2320*t4657*t23510;
  t24467 = t2320*t8284*t23520;
  t24468 = t24466 + t24467;
  t24567 = 0.001783*t23832;
  t24568 = 0.00025*t23765;
  t24569 = t24567 + t24568;
  t24572 = 0.009916*t23765;
  t24573 = t24571 + t24572;
  t24577 = -1.e-5*t2320*t7340;
  t24578 = 0.009916*t23832;
  t24579 = 0.00025*t23804;
  t24580 = t24577 + t24578 + t24579;
  t24582 = 0.000085*t2320*t7340;
  t24583 = 0.001783*t23804;
  t24584 = t24582 + t24571 + t24583;
  t24586 = 0.006182*t23875;
  t24588 = t24586 + t24587;
  t24590 = 5.e-6*t2320*t7340;
  t24591 = 0.000035*t23862;
  t24592 = t24590 + t24591 + t24587;
  t24594 = -3.e-6*t23875;
  t24595 = 0.000035*t23851;
  t24596 = t24594 + t24595;
  t24598 = -3.e-6*t23862;
  t24599 = 0.006182*t23851;
  t24600 = t24598 + t24599;
  t24485 = t3991*t21904;
  t24486 = t3262*t22213;
  t24487 = t24485 + t24486;
  t24494 = t8284*t23068;
  t24495 = t22999*t23161;
  t24496 = t24494 + t24495;
  t23943 = 1.528*t20337*t23942;
  t23953 = 1.528*t20503*t23952;
  t23973 = 1.528*t20503*t23972;
  t23987 = 1.528*t23254*t23986;
  t24005 = 1.528*t22796*t24004;
  t24021 = 0.241*t17878*t24020;
  t24031 = 0.241*t20137*t24030;
  t24051 = 0.241*t17878*t24050;
  t24065 = 0.241*t23320*t24064;
  t24083 = 0.241*t22796*t24082;
  t24084 = t23943 + t23953 + t23973 + t23987 + t24005 + t24021 + t24031 + t24051 + t24065 + t24083;
  t24366 = 1.528*t23792*t23942;
  t24367 = 1.528*t23843*t23952;
  t24368 = 1.528*t23843*t23972;
  t24369 = 1.528*t23825*t23986;
  t24370 = 1.528*t24335*t24004;
  t24371 = 0.241*t23857*t24020;
  t24372 = 0.241*t23857*t24050;
  t24373 = 0.241*t24030*t23881;
  t24374 = 0.241*t23871*t24064;
  t24375 = 0.241*t24335*t24082;
  t24376 = t24366 + t24367 + t24368 + t24369 + t24370 + t24371 + t24372 + t24373 + t24374 + t24375;
  t24297 = 1.528*t23887*t23942;
  t24298 = 1.528*t23898*t23952;
  t24299 = 1.528*t23898*t23972;
  t24300 = 1.528*t23891*t23986;
  t24301 = 1.528*t24257*t24004;
  t24302 = 0.241*t23915*t24020;
  t24303 = 0.241*t23915*t24050;
  t24304 = 0.241*t24030*t23924;
  t24305 = 0.241*t23920*t24064;
  t24306 = 0.241*t24257*t24082;
  t24307 = t24297 + t24298 + t24299 + t24300 + t24301 + t24302 + t24303 + t24304 + t24305 + t24306;
  t24575 = t24558 + t24559;
  t24513 = 1.528*t23972*t24103;
  t24514 = 1.528*t23986*t24113;
  t24515 = 1.528*t24004*t24450;
  t24516 = 1.528*t23942*t24132;
  t24517 = 1.528*t23952*t24145;
  t24521 = 1.528*t24520*t24163;
  t24522 = 0.241*t24064*t24179;
  t24523 = 0.241*t24082*t24461;
  t24524 = 0.241*t24050*t24189;
  t24525 = 0.241*t24030*t24208;
  t24526 = 0.241*t24020*t24221;
  t24530 = 0.241*t24529*t24239;
  t24673 = 5.e-6*t2320*t4657;
  t24696 = -0.00025*t2320*t3262;
  t24678 = 1.e-5*t2320*t3991;
  t24679 = -0.000085*t2320*t3262;
  t24714 = -3.e-6*t2320*t4657;
  t24686 = 0.00025*t2320*t3991;
  t24687 = -1.e-5*t8438;
  t24688 = -0.009916*t2320*t3262;
  t24689 = t24686 + t24687 + t24688;
  t24691 = -0.00025*t2320*t3991;
  t24692 = -0.001783*t2320*t3262;
  t24693 = t24691 + t24692;
  t24695 = -0.009916*t2320*t3991;
  t24697 = t24695 + t24696;
  t24699 = 0.001783*t2320*t3991;
  t24700 = 0.000085*t8438;
  t24701 = t24699 + t24700 + t24696;
  t24709 = 0.006182*t2320*t4657;
  t24710 = -3.e-6*t2320*t8284;
  t24711 = t24709 + t24710;
  t24713 = 5.e-6*t8438;
  t24715 = 0.000035*t2320*t8284;
  t24716 = t24713 + t24714 + t24715;
  t24718 = 0.000035*t2320*t4657;
  t24719 = -3.e-6*t2320*t19441;
  t24720 = t24718 + t24719;
  t24722 = 0.006182*t2320*t19441;
  t24723 = t24714 + t24722;
  t23500 = 1.528*t23499*t22796;
  t23529 = 0.241*t23528*t22796;
  t23595 = 1.528*t23591*t20337;
  t23635 = 1.528*t23630*t23254;
  t23681 = 1.528*t23657*t20503;
  t23689 = 1.528*t23688*t20503;
  t23698 = 0.241*t23697*t17878;
  t23715 = 0.241*t23713*t17878;
  t23727 = 0.241*t23726*t23320;
  t23735 = 0.241*t23734*t20137;
  t23736 = t23500 + t23529 + t23595 + t23635 + t23681 + t23689 + t23698 + t23715 + t23727 + t23735;
  t24346 = 1.528*t23499*t24335;
  t24347 = 0.241*t23528*t24335;
  t24348 = 1.528*t23591*t23792;
  t24349 = 1.528*t23630*t23825;
  t24350 = 1.528*t23657*t23843;
  t24351 = 1.528*t23688*t23843;
  t24352 = 0.241*t23697*t23857;
  t24353 = 0.241*t23713*t23857;
  t24354 = 0.241*t23726*t23871;
  t24355 = 0.241*t23734*t23881;
  t24356 = t24346 + t24347 + t24348 + t24349 + t24350 + t24351 + t24352 + t24353 + t24354 + t24355;
  t24268 = 1.528*t23499*t24257;
  t24269 = 0.241*t23528*t24257;
  t24270 = 1.528*t23591*t23887;
  t24271 = 1.528*t23630*t23891;
  t24272 = 1.528*t23657*t23898;
  t24273 = 1.528*t23688*t23898;
  t24274 = 0.241*t23697*t23915;
  t24275 = 0.241*t23713*t23915;
  t24276 = 0.241*t23726*t23920;
  t24277 = 0.241*t23734*t23924;
  t24278 = t24268 + t24269 + t24270 + t24271 + t24272 + t24273 + t24274 + t24275 + t24276 + t24277;
  t24703 = t24678 + t24679;
  t24602 = 1.528*t23688*t23942;
  t24603 = 1.528*t23630*t23952;
  t24604 = 1.528*t23499*t24520;
  t24605 = 1.528*t23591*t23972;
  t24606 = 1.528*t23657*t23986;
  t24607 = 1.528*t24456*t24004;
  t24608 = 0.241*t23726*t24020;
  t24609 = 0.241*t23528*t24529;
  t24610 = 0.241*t23713*t24030;
  t24611 = 0.241*t23734*t24050;
  t24612 = 0.241*t23697*t24064;
  t24613 = 0.241*t24468*t24082;
  t24446 = 1.528*t23688*t24103;
  t24447 = 1.528*t23630*t24113;
  t24451 = 1.528*t23499*t24450;
  t24452 = 1.528*t23591*t24132;
  t24453 = 1.528*t23657*t24145;
  t24457 = 1.528*t24456*t24163;
  t24458 = 0.241*t23726*t24179;
  t24462 = 0.241*t23528*t24461;
  t24463 = 0.241*t23713*t24189;
  t24464 = 0.241*t23734*t24208;
  t24465 = 0.241*t23697*t24221;
  t24469 = 0.241*t24468*t24239;
  t24782 = 5.e-6*t8284;
  t24804 = 0.00025*t3991;
  t24734 = 0.08711128*t3262*t23657;
  t24735 = 0.08711128*t3991*t23591;
  t24736 = 0.08711128*t3262*t23688;
  t24737 = 1.528*t24456*t22433;
  t24738 = 1.528*t24487*t23499;
  t24739 = -0.08711128*t3991*t23630;
  t24813 = -3.e-6*t8284;
  t24744 = 0.241*t23288*t23734;
  t24745 = -0.009008821*t4657*t23697;
  t24746 = 0.241*t23329*t23713;
  t24747 = 0.241*t24496*t23528;
  t24748 = -0.009008821*t8284*t23726;
  t24749 = 0.241*t24468*t23195;
  t24805 = -0.009916*t3262;
  t24806 = t24804 + t24805;
  t24808 = 0.001783*t3262;
  t24809 = t24804 + t24808;
  t24792 = 0.001783*t3991;
  t24793 = -0.00025*t3262;
  t24794 = t24792 + t24793;
  t24800 = 0.009916*t3991;
  t24801 = 0.00025*t3262;
  t24802 = t24800 + t24801;
  t24812 = 0.006182*t4657;
  t24814 = t24812 + t24813;
  t24816 = 0.000035*t22999;
  t24817 = t24816 + t24813;
  t24819 = -3.e-6*t4657;
  t24820 = 0.000035*t8284;
  t24821 = t24819 + t24820;
  t24823 = -3.e-6*t22999;
  t24824 = 0.006182*t8284;
  t24825 = t24823 + t24824;
  t22901 = 1.528*t22433*t22796;
  t23196 = 0.241*t23195*t22796;
  t23197 = 0.08711128*t3262*t20337;
  t23255 = 0.08711128*t3262*t23254;
  t23261 = -0.009008821*t8284*t17878;
  t23292 = 0.241*t23288*t17878;
  t23324 = -0.009008821*t4657*t23320;
  t23330 = 0.241*t23329*t20137;
  t23332 = t22901 + t23196 + t23197 + t23255 + t23261 + t23292 + t23324 + t23330;
  t24336 = 1.528*t22433*t24335;
  t24337 = 0.241*t23195*t24335;
  t24338 = 0.08711128*t3262*t23792;
  t24339 = 0.08711128*t3262*t23825;
  t24340 = -0.009008821*t8284*t23857;
  t24341 = 0.241*t23288*t23857;
  t24342 = -0.009008821*t4657*t23871;
  t24343 = 0.241*t23329*t23881;
  t24344 = t24336 + t24337 + t24338 + t24339 + t24340 + t24341 + t24342 + t24343;
  t24258 = 1.528*t22433*t24257;
  t24259 = 0.241*t23195*t24257;
  t24260 = 0.08711128*t3262*t23887;
  t24261 = 0.08711128*t3262*t23891;
  t24262 = -0.009008821*t8284*t23915;
  t24263 = 0.241*t23288*t23915;
  t24264 = -0.009008821*t4657*t23920;
  t24265 = 0.241*t23329*t23924;
  t24266 = t24258 + t24259 + t24260 + t24261 + t24262 + t24263 + t24264 + t24265;
  t24796 = 0.000085*t3991;
  t24797 = 1.e-5*t3262;
  t24798 = t24796 + t24797;
  t24624 = 0.08711128*t3991*t23942;
  t24625 = 0.08711128*t3262*t23952;
  t24626 = 1.528*t22433*t24520;
  t24627 = 0.08711128*t3262*t23972;
  t24628 = -0.08711128*t3991*t23986;
  t24629 = 1.528*t24487*t24004;
  t24630 = -0.009008821*t4657*t24020;
  t24631 = 0.241*t23195*t24529;
  t24632 = 0.241*t23288*t24030;
  t24633 = 0.241*t23329*t24050;
  t24634 = -0.009008821*t8284*t24064;
  t24635 = 0.241*t24496*t24082;
  t24480 = 0.08711128*t3991*t24103;
  t24481 = 0.08711128*t3262*t24113;
  t24482 = 1.528*t22433*t24450;
  t24483 = 0.08711128*t3262*t24132;
  t24484 = -0.08711128*t3991*t24145;
  t24488 = 1.528*t24487*t24163;
  t24489 = -0.009008821*t4657*t24179;
  t24490 = 0.241*t23195*t24461;
  t24491 = 0.241*t23288*t24189;
  t24492 = 0.241*t23329*t24208;
  t24493 = -0.009008821*t8284*t24221;
  t24497 = 0.241*t24496*t24239;
  t24786 = -0.00270221251488*t3991;
  t24787 = 0.00005198763696*t3262;
  t24788 = -0.009008821*t4657*t21370;
  t24789 = 0.241*t21465*t23288;
  t24790 = t24786 + t24787 + t24782 + t24788 + t24789;
  t24680 = -0.048889888*t23688;
  t24681 = 0.000736496*t23630;
  t24682 = 0.241*t21465*t23713;
  t24683 = 0.241*t21370*t23726;
  t24684 = t24678 + t24679 + t24680 + t24681 + t24673 + t24682 + t24683;
  t20338 = -0.048889888*t20337;
  t20615 = 0.000736496*t20503;
  t21377 = 0.241*t21370*t17878;
  t21509 = 0.241*t21465*t20137;
  t21511 = t20338 + t20615 + t21377 + t21509;
  t24327 = -0.048889888*t23792;
  t24328 = 0.000736496*t23843;
  t24329 = 0.241*t21370*t23857;
  t24330 = 0.241*t21465*t23881;
  t24331 = t24327 + t24328 + t24329 + t24330;
  t24249 = -0.048889888*t23887;
  t24250 = 0.000736496*t23898;
  t24251 = 0.241*t21370*t23915;
  t24252 = 0.241*t21465*t23924;
  t24253 = t24249 + t24250 + t24251 + t24252;
  t24560 = -0.048889888*t23972;
  t24561 = 0.000736496*t23986;
  t24562 = 0.241*t21465*t24050;
  t24563 = 0.241*t21370*t24064;
  t24564 = t24558 + t24559 + t24553 + t24560 + t24561 + t24562 + t24563;
  t24401 = -0.048889888*t24132;
  t24402 = 0.000736496*t24145;
  t24403 = 0.241*t21465*t24208;
  t24404 = 0.241*t21370*t24221;
  t24405 = t24399 + t24400 + t24392 + t24401 + t24402 + t24403 + t24404;
  t24781 = -0.000019783370916*t4657;
  t24783 = -0.02973458*t23288;
  t24784 = t24781 + t24782 + t24783;
  t24674 = -0.02973458*t23713;
  t24675 = 0.000529236*t23726;
  t24676 = t24673 + t24674 + t24675;
  t18513 = 0.000529236*t17878;
  t20166 = -0.02973458*t20137;
  t20230 = t18513 + t20166;
  t24323 = 0.000529236*t23857;
  t24324 = -0.02973458*t23881;
  t24325 = t24323 + t24324;
  t24245 = 0.000529236*t23915;
  t24246 = -0.02973458*t23924;
  t24247 = t24245 + t24246;
  t24554 = -0.02973458*t24050;
  t24555 = 0.000529236*t24064;
  t24556 = t24553 + t24554 + t24555;
  t24393 = -0.02973458*t24208;
  t24394 = 0.000529236*t24221;
  t24395 = t24392 + t24393 + t24394;
  p_output1[0]=var2[13]*(-0.5*(0.482*t17878*t20137 + 3.056*t20337*t20503 + 3.056*t20503*t23254 + 0.482*t17878*t23320)*var2[0] - 0.5*t23926*var2[1] - 0.5*t23883*var2[2] - 0.5*t24241*var2[3] - 0.5*t24084*var2[4] - 0.5*t23736*var2[5] - 0.5*t23332*var2[12] - 0.5*t21511*var2[13] - 0.5*t20230*var2[14]);
  p_output1[1]=var2[13]*(-0.5*t23926*var2[0] - 0.5*(3.056*t23887*t23898 + 3.056*t23891*t23898 + 0.482*t23915*t23920 + 0.482*t23915*t23924)*var2[1] - 0.5*t24289*var2[2] - 0.5*t24319*var2[3] - 0.5*t24307*var2[4] - 0.5*t24278*var2[5] - 0.5*t24266*var2[12] - 0.5*t24253*var2[13] - 0.5*t24247*var2[14]);
  p_output1[2]=var2[13]*(-0.5*t23883*var2[0] - 0.5*t24289*var2[1] - 0.5*(3.056*t23792*t23843 + 3.056*t23825*t23843 + 0.482*t23857*t23871 + 0.482*t23857*t23881)*var2[2] - 0.5*t24388*var2[3] - 0.5*t24376*var2[4] - 0.5*t24356*var2[5] - 0.5*t24344*var2[12] - 0.5*t24331*var2[13] - 0.5*t24325*var2[14]);
  p_output1[3]=var2[13]*(-0.5*t24241*var2[0] - 0.5*t24319*var2[1] - 0.5*t24388*var2[2] - 0.5*(5.e-6*t17878*t22796 + 3.056*t24103*t24132 + 3.056*t24113*t24145 + 0.482*t24189*t24208 + 0.482*t24179*t24221 + t22796*t24408 + t20503*t24412 + t20503*t24416 + t23254*t24420 + t20337*t24428 + t20137*t24432 + t17878*t24437 + t23320*t24441 + t17878*t24444 + 3.056*t24163*t24450 + 0.482*t24239*t24461)*var2[3] - 0.5*(t23832*t24412 + t23832*t24416 + t23804*t24420 + t23765*t24428 + t23875*t24432 + t23851*t24437 + t23862*t24441 + t23851*t24444 + t24513 + t24514 + t24515 + t24516 + t24517 + t24521 + t24522 + t24523 + t24524 + t24525 + t24526 + t24530 + 5.e-6*t17878*t2320*t7340 + t2320*t24408*t7340)*var2[4] - 0.5*(t19441*t2320*t24432 + t24446 + t24447 + t24451 + t24452 + t24453 + t24457 + t24458 + t24462 + t24463 + t24464 + t24465 + t24469 - 1.*t2320*t24412*t3262 - 1.*t2320*t24416*t3262 + t2320*t24420*t3991 - 1.*t2320*t24428*t3991 + t2320*t24437*t4657 + t2320*t24444*t4657 + t2320*t24441*t8284 + 5.e-6*t17878*t8438 + t24408*t8438)*var2[5] - 0.5*(t22999*t24441 + t24480 + t24481 + t24482 + t24483 + t24484 + t24488 + t24489 + t24490 + t24491 + t24492 + t24493 + t24497 + t24420*t3262 - 1.*t24428*t3262 + t24412*t3991 + t24416*t3991 + t24432*t4657 + t24437*t8284 + t24444*t8284)*var2[12] - 0.5*t24405*var2[13] - 0.5*t24395*var2[14]);
  p_output1[4]=var2[13]*(-0.5*t24084*var2[0] - 0.5*t24307*var2[1] - 0.5*t24376*var2[2] - 0.5*(5.e-6*t22796*t23851 + t24513 + t24514 + t24515 + t24516 + t24517 + t24521 + t24522 + t24523 + t24524 + t24525 + t24526 + t24530 + t23254*t24569 + t20503*t24573 + t22796*t24575 + t20337*t24580 + t20503*t24584 + t17878*t24588 + t17878*t24592 + t23320*t24596 + t20137*t24600)*var2[3] - 0.5*(3.056*t23942*t23972 + 3.056*t23952*t23986 + 0.482*t24030*t24050 + 0.482*t24020*t24064 + 3.056*t24004*t24520 + 0.482*t24082*t24529 + t23804*t24569 + t23832*t24573 + t23765*t24580 + t23832*t24584 + t23851*t24588 + t23851*t24592 + t23862*t24596 + t23875*t24600 + 5.e-6*t2320*t23851*t7340 + t2320*t24575*t7340)*var2[4] - 0.5*(t19441*t2320*t24600 + t24602 + t24603 + t24604 + t24605 + t24606 + t24607 + t24608 + t24609 + t24610 + t24611 + t24612 + t24613 - 1.*t2320*t24573*t3262 - 1.*t2320*t24584*t3262 + t2320*t24569*t3991 - 1.*t2320*t24580*t3991 + t2320*t24588*t4657 + t2320*t24592*t4657 + t2320*t24596*t8284 + 5.e-6*t23851*t8438 + t24575*t8438)*var2[5] - 0.5*(t22999*t24596 + t24624 + t24625 + t24626 + t24627 + t24628 + t24629 + t24630 + t24631 + t24632 + t24633 + t24634 + t24635 + t24569*t3262 - 1.*t24580*t3262 + t24573*t3991 + t24584*t3991 + t24600*t4657 + t24588*t8284 + t24592*t8284)*var2[12] - 0.5*t24564*var2[13] - 0.5*t24556*var2[14]);
  p_output1[5]=var2[13]*(-0.5*t23736*var2[0] - 0.5*t24278*var2[1] - 0.5*t24356*var2[2] - 0.5*(t24446 + t24447 + t24451 + t24452 + t24453 + t24457 + t24458 + t24462 + t24463 + t24464 + t24465 + t24469 + t20337*t24689 + t23254*t24693 + t20503*t24697 + t20503*t24701 + t22796*t24703 + t20137*t24711 + t17878*t24716 + t23320*t24720 + t17878*t24723 + 5.e-6*t22796*t2320*t4657)*var2[3] - 0.5*(t24602 + t24603 + t24604 + t24605 + t24606 + t24607 + t24608 + t24609 + t24610 + t24611 + t24612 + t24613 + t23765*t24689 + t23804*t24693 + t23832*t24697 + t23832*t24701 + t23875*t24711 + t23851*t24716 + t23862*t24720 + t23851*t24723 + t2320*t24703*t7340 + 5.e-6*t23441*t4657*t7340)*var2[4] - 0.5*(3.056*t23630*t23657 + 3.056*t23591*t23688 + 0.482*t23697*t23726 + 0.482*t23713*t23734 + 3.056*t23499*t24456 + 0.482*t23528*t24468 + t19441*t2320*t24711 - 1.*t2320*t24697*t3262 - 1.*t2320*t24701*t3262 - 1.*t2320*t24689*t3991 + t2320*t24693*t3991 + t2320*t24716*t4657 + t2320*t24723*t4657 + t2320*t24720*t8284 + t24703*t8438 + 5.e-6*t2320*t4657*t8438)*var2[5] - 0.5*(t22999*t24720 + t24734 + t24735 + t24736 + t24737 + t24738 + t24739 + t24744 + t24745 + t24746 + t24747 + t24748 + t24749 - 1.*t24689*t3262 + t24693*t3262 + t24697*t3991 + t24701*t3991 + t24711*t4657 + t24716*t8284 + t24723*t8284)*var2[12] - 0.5*t24684*var2[13] - 0.5*t24676*var2[14]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=var2[13]*(-0.5*t23332*var2[0] - 0.5*t24266*var2[1] - 0.5*t24344*var2[2] - 0.5*(t24480 + t24481 + t24482 + t24483 + t24484 + t24488 + t24489 + t24490 + t24491 + t24492 + t24493 + t24497 + t23254*t24794 + t22796*t24798 + t20337*t24802 + t20503*t24806 + t20503*t24809 + t17878*t24814 + t17878*t24817 + t23320*t24821 + t20137*t24825 + 5.e-6*t22796*t8284)*var2[3] - 0.5*(t24624 + t24625 + t24626 + t24627 + t24628 + t24629 + t24630 + t24631 + t24632 + t24633 + t24634 + t24635 + t23804*t24794 + t23765*t24802 + t23832*t24806 + t23832*t24809 + t23851*t24814 + t23851*t24817 + t23862*t24821 + t23875*t24825 + t2320*t24798*t7340 + 5.e-6*t2320*t7340*t8284)*var2[4] - 0.5*(t24734 + t24735 + t24736 + t24737 + t24738 + t24739 + t24744 + t24745 + t24746 + t24747 + t24748 + t24749 + t19441*t2320*t24825 - 1.*t2320*t24806*t3262 - 1.*t2320*t24809*t3262 + t2320*t24794*t3991 - 1.*t2320*t24802*t3991 + t2320*t24814*t4657 + t2320*t24817*t4657 + t2320*t24821*t8284 + t24798*t8438 + 5.e-6*t8284*t8438)*var2[5] - 0.5*(0.482*t23288*t23329 + 3.056*t22433*t24487 + 0.482*t23195*t24496 + t22999*t24821 + t24794*t3262 - 1.*t24802*t3262 + t24806*t3991 + t24809*t3991 + t24825*t4657 + t24814*t8284 + t24817*t8284 + 0.000673517475602*t4657*t8284)*var2[12] - 0.5*t24790*var2[13] - 0.5*t24784*var2[14]);
  p_output1[13]=(-0.5*t21511*var2[0] - 0.5*t24253*var2[1] - 0.5*t24331*var2[2] - 0.5*t24405*var2[3] - 0.5*t24564*var2[4] - 0.5*t24684*var2[5] - 0.5*t24790*var2[12])*var2[13];
  p_output1[14]=(-0.5*t20230*var2[0] - 0.5*t24247*var2[1] - 0.5*t24325*var2[2] - 0.5*t24395*var2[3] - 0.5*t24556*var2[4] - 0.5*t24676*var2[5] - 0.5*t24784*var2[12])*var2[13];
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec14_laikago_description.hh"

namespace SymFunction
{

void Ce2_vec14_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
