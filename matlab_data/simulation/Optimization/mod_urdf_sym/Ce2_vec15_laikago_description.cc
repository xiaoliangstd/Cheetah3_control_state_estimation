/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:02:10 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2091;
  double t555;
  double t601;
  double t2745;
  double t1535;
  double t3125;
  double t3133;
  double t222;
  double t3178;
  double t3367;
  double t3827;
  double t7150;
  double t19108;
  double t19370;
  double t20292;
  double t8173;
  double t3330;
  double t4398;
  double t4613;
  double t4853;
  double t5450;
  double t8184;
  double t8185;
  double t12933;
  double t18488;
  double t21673;
  double t21684;
  double t21714;
  double t21734;
  double t21832;
  double t22115;
  double t23008;
  double t23097;
  double t23105;
  double t23239;
  double t23333;
  double t23743;
  double t23884;
  double t23738;
  double t23739;
  double t23740;
  double t24243;
  double t24248;
  double t24254;
  double t20596;
  double t21287;
  double t21311;
  double t21322;
  double t21327;
  double t21336;
  double t24290;
  double t24291;
  double t24292;
  double t24363;
  double t24364;
  double t24365;
  double t24377;
  double t24345;
  double t24357;
  double t24358;
  double t24359;
  double t24360;
  double t24361;
  double t24442;
  double t24445;
  double t24470;
  double t24417;
  double t24421;
  double t24429;
  double t24280;
  double t24293;
  double t24294;
  double t24295;
  double t24296;
  double t24308;
  double t24362;
  double t24533;
  double t24534;
  double t24535;
  double t24537;
  double t24538;
  double t24539;
  double t24540;
  double t24541;
  double t24542;
  double t24406;
  double t24433;
  double t24438;
  double t24474;
  double t24552;
  double t24565;
  double t24476;
  double t24499;
  double t24500;
  double t24501;
  double t24550;
  double t24551;
  double t24546;
  double t24547;
  double t24615;
  double t24616;
  double t24617;
  double t24623;
  double t24636;
  double t24637;
  double t24671;
  double t24672;
  double t24677;
  double t24685;
  double t24690;
  double t24694;
  double t24698;
  double t24702;
  double t24704;
  double t24705;
  double t24706;
  double t24755;
  double t24756;
  double t24757;
  double t24712;
  double t24717;
  double t24721;
  double t24725;
  double t24726;
  double t24727;
  double t24731;
  double t24732;
  double t24733;
  double t24741;
  double t24742;
  double t24743;
  double t24770;
  double t24771;
  double t24772;
  double t24774;
  double t24775;
  double t24776;
  double t24659;
  double t24807;
  double t24810;
  double t24811;
  double t24640;
  double t24836;
  double t24837;
  double t24838;
  double t24832;
  double t24833;
  double t24834;
  double t24773;
  double t24777;
  double t24778;
  double t24648;
  double t24651;
  double t24842;
  double t24844;
  double t24536;
  double t24557;
  double t24780;
  double t24785;
  double t24576;
  double t24585;
  double t24884;
  double t24885;
  double t24886;
  double t24891;
  double t24892;
  double t24893;
  double t24888;
  double t24889;
  double t24890;
  double t24818;
  double t24903;
  double t24904;
  double t24905;
  double t24839;
  double t24843;
  double t24914;
  double t24915;
  double t24916;
  double t24918;
  double t24919;
  double t24920;
  double t24887;
  double t24894;
  double t24895;
  double t24853;
  double t24856;
  double t24858;
  double t24924;
  double t24925;
  double t24866;
  double t24870;
  double t24897;
  double t24898;
  double t24874;
  double t24876;
  double t24764;
  double t24765;
  double t24766;
  double t21618;
  double t22320;
  double t23350;
  double t23406;
  double t23447;
  double t23737;
  double t23741;
  double t23742;
  double t23927;
  double t24085;
  double t24244;
  double t24267;
  double t24279;
  double t24760;
  double t24761;
  double t24762;
  double t24321;
  double t24389;
  double t24390;
  double t24391;
  double t24396;
  double t24407;
  double t24409;
  double t24413;
  double t24471;
  double t24472;
  double t24473;
  double t24475;
  double t24477;
  double t24478;
  double t24479;
  double t24498;
  double t24504;
  double t24505;
  double t24506;
  double t24509;
  double t24510;
  double t24511;
  double t24543;
  double t24544;
  double t24545;
  double t24548;
  double t24549;
  double t24566;
  double t24570;
  double t24574;
  double t24581;
  double t24589;
  double t24593;
  double t24597;
  double t24601;
  double t24977;
  double t24978;
  double t24979;
  double t24618;
  double t24619;
  double t24620;
  double t24621;
  double t24638;
  double t24639;
  double t24641;
  double t24642;
  double t24643;
  double t24644;
  double t24646;
  double t24647;
  double t24649;
  double t24650;
  double t24652;
  double t24653;
  double t24654;
  double t24655;
  double t24657;
  double t24658;
  double t24660;
  double t24661;
  double t24662;
  double t24663;
  double t24758;
  double t24759;
  double t24763;
  double t24767;
  double t24768;
  double t24724;
  double t24728;
  double t24729;
  double t24740;
  double t24750;
  double t24751;
  double t24779;
  double t24791;
  double t24795;
  double t24799;
  double t24830;
  double t24831;
  double t24835;
  double t24840;
  double t24841;
  double t24845;
  double t24846;
  double t24847;
  double t24848;
  double t24815;
  double t24822;
  double t24826;
  double t24827;
  double t24828;
  double t24850;
  double t24851;
  double t24852;
  double t24854;
  double t24855;
  double t24857;
  double t24859;
  double t24860;
  double t24861;
  double t24862;
  double t24864;
  double t24865;
  double t24867;
  double t24868;
  double t24869;
  double t24871;
  double t24872;
  double t24873;
  double t24875;
  double t24877;
  double t24878;
  double t24879;
  double t24880;
  double t24896;
  double t24899;
  double t24900;
  double t24901;
  double t24906;
  double t24907;
  double t24908;
  double t24909;
  double t24910;
  double t24911;
  double t24913;
  double t24917;
  double t24921;
  double t24922;
  double t24923;
  double t24926;
  double t24927;
  double t24928;
  double t24929;
  double t24930;
  double t24932;
  double t24933;
  double t24934;
  double t24935;
  double t24936;
  double t24937;
  double t24938;
  double t24939;
  double t24940;
  double t24941;
  double t24942;
  double t24943;
  double t24945;
  double t24946;
  double t24947;
  double t24948;
  double t24949;
  double t24950;
  double t24951;
  double t24952;
  double t24953;
  double t24954;
  double t24955;
  double t24956;
  double t24957;
  double t24958;
  double t24959;
  double t24960;
  double t24961;
  double t25031;
  double t25032;
  double t25033;
  double t24707;
  double t24708;
  double t24730;
  double t24752;
  double t24753;
  double t24995;
  double t24996;
  double t24997;
  double t24998;
  double t24999;
  double t25070;
  double t25087;
  double t25082;
  double t25083;
  double t25084;
  double t25086;
  double t25088;
  double t25089;
  double t25091;
  double t25092;
  double t25093;
  double t25095;
  double t25096;
  double t25099;
  double t25100;
  double t25101;
  double t24902;
  double t24912;
  double t24931;
  double t24944;
  double t24962;
  double t24963;
  double t25061;
  double t25062;
  double t25063;
  double t25064;
  double t25065;
  double t25066;
  double t25012;
  double t25013;
  double t25014;
  double t25015;
  double t25016;
  double t25017;
  double t25158;
  double t25171;
  double t25140;
  double t25141;
  double t25142;
  double t25106;
  double t25107;
  double t25108;
  double t25170;
  double t25172;
  double t25174;
  double t25175;
  double t25176;
  double t25178;
  double t25179;
  double t25180;
  double t25182;
  double t25183;
  double t25184;
  double t25121;
  double t25122;
  double t25123;
  double t24803;
  double t24829;
  double t24849;
  double t24863;
  double t24881;
  double t24882;
  double t25054;
  double t25055;
  double t25056;
  double t25057;
  double t25058;
  double t25059;
  double t25005;
  double t25006;
  double t25007;
  double t25008;
  double t25009;
  double t25010;
  double t25135;
  double t25136;
  double t25137;
  double t25138;
  double t25139;
  double t25143;
  double t25228;
  double t25245;
  double t25240;
  double t25241;
  double t25242;
  double t25244;
  double t25246;
  double t25247;
  double t25249;
  double t25250;
  double t25251;
  double t25253;
  double t25254;
  double t24614;
  double t24622;
  double t24645;
  double t24656;
  double t24664;
  double t24665;
  double t25041;
  double t25042;
  double t25043;
  double t25044;
  double t25045;
  double t25046;
  double t24987;
  double t24988;
  double t24989;
  double t24990;
  double t24991;
  double t24992;
  double t25186;
  double t25187;
  double t25188;
  double t25189;
  double t25190;
  double t25191;
  double t25098;
  double t25102;
  double t25103;
  double t25104;
  double t25105;
  double t25109;
  double t25293;
  double t25305;
  double t25265;
  double t25266;
  double t25267;
  double t25268;
  double t25269;
  double t25270;
  double t25304;
  double t25306;
  double t25308;
  double t25309;
  double t25311;
  double t25312;
  double t25313;
  double t25315;
  double t25316;
  double t25317;
  double t24502;
  double t24503;
  double t24507;
  double t24508;
  double t24512;
  double t24531;
  double t25034;
  double t25035;
  double t25036;
  double t25037;
  double t25038;
  double t25039;
  double t24980;
  double t24981;
  double t24982;
  double t24983;
  double t24984;
  double t24985;
  double t25198;
  double t25199;
  double t25200;
  double t25201;
  double t25202;
  double t25203;
  double t25116;
  double t25117;
  double t25118;
  double t25119;
  double t25120;
  double t25124;
  double t25297;
  double t25298;
  double t25299;
  double t25300;
  double t25301;
  double t25233;
  double t25234;
  double t25235;
  double t25236;
  double t25237;
  double t23439;
  double t24242;
  double t24320;
  double t24322;
  double t24326;
  double t25025;
  double t25026;
  double t25027;
  double t25028;
  double t25029;
  double t24971;
  double t24972;
  double t24973;
  double t24974;
  double t24975;
  double t25163;
  double t25164;
  double t25165;
  double t25166;
  double t25167;
  double t25075;
  double t25076;
  double t25077;
  double t25078;
  double t25079;
  double t25349;
  double t25350;
  double t25351;
  double t25292;
  double t25294;
  double t25295;
  double t25229;
  double t25230;
  double t25231;
  double t18996;
  double t21375;
  double t21485;
  double t25021;
  double t25022;
  double t25023;
  double t24967;
  double t24968;
  double t24969;
  double t25159;
  double t25160;
  double t25161;
  double t25071;
  double t25072;
  double t25073;
  t2091 = Cos(var1[13]);
  t555 = Cos(var1[14]);
  t601 = Sin(var1[13]);
  t2745 = Sin(var1[14]);
  t1535 = -1.*t555*t601;
  t3125 = -1.*t2091*t2745;
  t3133 = t1535 + t3125;
  t222 = Cos(var1[12]);
  t3178 = Sin(var1[4]);
  t3367 = Cos(var1[4]);
  t3827 = Cos(var1[5]);
  t7150 = Sin(var1[12]);
  t19108 = -1.*t2091*t555;
  t19370 = t601*t2745;
  t20292 = t19108 + t19370;
  t8173 = Sin(var1[5]);
  t3330 = t222*t3133*t3178;
  t4398 = t2091*t555;
  t4613 = -1.*t601*t2745;
  t4853 = t4398 + t4613;
  t5450 = t3827*t4853;
  t8184 = t7150*t3133*t8173;
  t8185 = t5450 + t8184;
  t12933 = t3367*t8185;
  t18488 = t3330 + t12933;
  t21673 = -1.*t555;
  t21684 = 1. + t21673;
  t21714 = -0.21935*t21684;
  t21734 = -0.221546*t555;
  t21832 = -0.12338*t2745;
  t22115 = t21714 + t21734 + t21832;
  t23008 = -1. + t555;
  t23097 = 0.25*t23008;
  t23105 = -0.37338*t555;
  t23239 = 0.002196*t2745;
  t23333 = t23097 + t23105 + t23239;
  t23743 = -0.12338*t555;
  t23884 = t23743 + t23239;
  t23738 = 0.002196*t555;
  t23739 = 0.12338*t2745;
  t23740 = t23738 + t23739;
  t24243 = t555*t23333;
  t24248 = 0.21935*t2745;
  t24254 = t22115*t2745;
  t20596 = t222*t20292*t3178;
  t21287 = t3827*t3133;
  t21311 = t7150*t20292*t8173;
  t21322 = t21287 + t21311;
  t21327 = t3367*t21322;
  t21336 = t20596 + t21327;
  t24290 = t555*t601;
  t24291 = t2091*t2745;
  t24292 = t24290 + t24291;
  t24363 = -0.21935*t601;
  t24364 = -1.*t601*t22115;
  t24365 = t2091*t23333;
  t24377 = t24363 + t24364 + t24365;
  t24345 = -1.*t2091;
  t24357 = 1. + t24345;
  t24358 = -0.21935*t24357;
  t24359 = t2091*t22115;
  t24360 = t601*t23333;
  t24361 = t24358 + t24359 + t24360;
  t24442 = -1.*t601*t23884;
  t24445 = t2091*t23740;
  t24470 = t24442 + t24445;
  t24417 = t2091*t23884;
  t24421 = t601*t23740;
  t24429 = t24417 + t24421;
  t24280 = t222*t4853*t3178;
  t24293 = t3827*t24292;
  t24294 = t7150*t4853*t8173;
  t24295 = t24293 + t24294;
  t24296 = t3367*t24295;
  t24308 = t24280 + t24296;
  t24362 = -1.*t24361*t24292;
  t24533 = -0.037381*t7150;
  t24534 = t222*t24377;
  t24535 = t24533 + t24534;
  t24537 = -1.*t222;
  t24538 = 1. + t24537;
  t24539 = -0.0875*t24538;
  t24540 = -0.124881*t222;
  t24541 = -1.*t7150*t24377;
  t24542 = t24539 + t24540 + t24541;
  t24406 = t24361*t4853;
  t24433 = -1.*t24429*t24292;
  t24438 = -1.*t24361*t4853;
  t24474 = t24361*t3133;
  t24552 = Power(t222,2);
  t24565 = Power(t7150,2);
  t24476 = t24429*t4853;
  t24499 = t7150*t3178;
  t24500 = -1.*t222*t3367*t8173;
  t24501 = t24499 + t24500;
  t24550 = -1.*t222*t24535*t3133;
  t24551 = t7150*t24542*t3133;
  t24546 = t222*t24535*t3133;
  t24547 = -1.*t7150*t24542*t3133;
  t24615 = t7150*t24535;
  t24616 = t222*t24542;
  t24617 = t24615 + t24616;
  t24623 = -1.*t7150*t24535;
  t24636 = -1.*t222*t24542;
  t24637 = t24623 + t24636;
  t24671 = Sin(var1[3]);
  t24672 = -1.*t3827*t7150*t3133;
  t24677 = t4853*t8173;
  t24685 = t24672 + t24677;
  t24690 = t24671*t24685;
  t24694 = Cos(var1[3]);
  t24698 = t222*t3367*t3133;
  t24702 = -1.*t3178*t8185;
  t24704 = t24698 + t24702;
  t24705 = t24694*t24704;
  t24706 = t24690 + t24705;
  t24755 = t24694*t24685;
  t24756 = -1.*t24671*t24704;
  t24757 = t24755 + t24756;
  t24712 = -1.*t3827*t7150*t4853;
  t24717 = t24292*t8173;
  t24721 = t24712 + t24717;
  t24725 = t222*t3367*t4853;
  t24726 = -1.*t3178*t24295;
  t24727 = t24725 + t24726;
  t24731 = -1.*t3827*t7150*t20292;
  t24732 = t3133*t8173;
  t24733 = t24731 + t24732;
  t24741 = t222*t3367*t20292;
  t24742 = -1.*t3178*t21322;
  t24743 = t24741 + t24742;
  t24770 = t3827*t24361;
  t24771 = -1.*t24542*t8173;
  t24772 = t24770 + t24771;
  t24774 = t3827*t24542;
  t24775 = t24361*t8173;
  t24776 = t24774 + t24775;
  t24659 = t222*t24535*t4853;
  t24807 = t222*t8173*t24772;
  t24810 = -1.*t222*t3827*t24776;
  t24811 = t24623 + t24807 + t24810;
  t24640 = t24552*t24470*t4853;
  t24836 = -1.*t3827*t7150*t24470;
  t24837 = t24429*t8173;
  t24838 = t24836 + t24837;
  t24832 = t3827*t24429;
  t24833 = t7150*t24470*t8173;
  t24834 = t24832 + t24833;
  t24773 = -1.*t222*t8173*t24772;
  t24777 = t222*t3827*t24776;
  t24778 = t24615 + t24773 + t24777;
  t24648 = -1.*t24552*t24470*t3133;
  t24651 = -1.*t222*t24535*t20292;
  t24842 = t24772*t8185;
  t24844 = t24776*t24685;
  t24536 = -1.*t222*t24535*t4853;
  t24557 = -1.*t24552*t24470*t4853;
  t24780 = -1.*t24772*t8185;
  t24785 = -1.*t24776*t24685;
  t24576 = t24552*t24470*t3133;
  t24585 = t222*t24535*t20292;
  t24884 = t24535*t3178;
  t24885 = t3367*t24772;
  t24886 = t24884 + t24885;
  t24891 = t3367*t24535;
  t24892 = -1.*t3178*t24772;
  t24893 = t24891 + t24892;
  t24888 = t3367*t7150;
  t24889 = t222*t3178*t8173;
  t24890 = t24888 + t24889;
  t24818 = t24776*t24721;
  t24903 = -1.*t24501*t24886;
  t24904 = -1.*t24890*t24893;
  t24905 = t24810 + t24903 + t24904;
  t24839 = -1.*t222*t3827*t24838;
  t24843 = t24838*t24721;
  t24914 = t222*t24470*t3178;
  t24915 = t3367*t24834;
  t24916 = t24914 + t24915;
  t24918 = t222*t3367*t24470;
  t24919 = -1.*t3178*t24834;
  t24920 = t24918 + t24919;
  t24887 = t24501*t24886;
  t24894 = t24890*t24893;
  t24895 = t24777 + t24887 + t24894;
  t24853 = t222*t3827*t24838;
  t24856 = -1.*t24776*t24733;
  t24858 = -1.*t24838*t24685;
  t24924 = t24886*t18488;
  t24925 = t24893*t24704;
  t24866 = -1.*t24776*t24721;
  t24870 = -1.*t24838*t24721;
  t24897 = -1.*t24886*t18488;
  t24898 = -1.*t24893*t24704;
  t24874 = t24776*t24733;
  t24876 = t24838*t24685;
  t24764 = t24694*t24733;
  t24765 = -1.*t24671*t24743;
  t24766 = t24764 + t24765;
  t21618 = -0.21935*t555;
  t22320 = -1.*t555*t22115;
  t23350 = t23333*t2745;
  t23406 = t21618 + t22320 + t23350;
  t23447 = 0.21935*t555;
  t23737 = t555*t22115;
  t23741 = t555*t23740;
  t23742 = -1.*t23333*t2745;
  t23927 = t23884*t2745;
  t24085 = t23447 + t23737 + t23741 + t23742 + t23927;
  t24244 = -1.*t555*t23884;
  t24267 = t23740*t2745;
  t24279 = t24243 + t24244 + t24248 + t24254 + t24267;
  t24760 = t24694*t24721;
  t24761 = -1.*t24671*t24727;
  t24762 = t24760 + t24761;
  t24321 = t24243 + t24248 + t24254;
  t24389 = -1.*t24377*t4853;
  t24390 = t24362 + t24389;
  t24391 = t3133*t24390;
  t24396 = t24377*t3133;
  t24407 = t24396 + t24406;
  t24409 = t4853*t24407;
  t24413 = -1.*t24377*t3133;
  t24471 = -1.*t24470*t4853;
  t24472 = t24413 + t24433 + t24438 + t24471;
  t24473 = t4853*t24472;
  t24475 = t24470*t3133;
  t24477 = t24377*t20292;
  t24478 = t24474 + t24475 + t24476 + t24477;
  t24479 = t24292*t24478;
  t24498 = t24391 + t24409 + t24473 + t24479;
  t24504 = 0.124881*t4853;
  t24505 = 0.0875*t20292;
  t24506 = t24504 + t24505;
  t24509 = 0.0875*t3133;
  t24510 = 0.124881*t24292;
  t24511 = t24509 + t24510;
  t24543 = t7150*t24542*t4853;
  t24544 = t24362 + t24536 + t24543;
  t24545 = t222*t20292*t24544;
  t24548 = t24546 + t24547 + t24406;
  t24549 = t222*t3133*t24548;
  t24566 = -1.*t24565*t24470*t4853;
  t24570 = t24550 + t24551 + t24433 + t24438 + t24557 + t24566;
  t24574 = t222*t3133*t24570;
  t24581 = t24565*t24470*t3133;
  t24589 = -1.*t7150*t24542*t20292;
  t24593 = t24474 + t24576 + t24581 + t24476 + t24585 + t24589;
  t24597 = t222*t4853*t24593;
  t24601 = t24545 + t24549 + t24574 + t24597;
  t24977 = t222*t24694*t3827;
  t24978 = -1.*t24671*t24890;
  t24979 = t24977 + t24978;
  t24618 = t222*t24617*t3133;
  t24619 = t24550 + t24551 + t24438;
  t24620 = t7150*t24619;
  t24621 = t24618 + t24620;
  t24638 = t222*t24637*t3133;
  t24639 = t24429*t24292;
  t24641 = t24565*t24470*t4853;
  t24642 = t24546 + t24547 + t24639 + t24406 + t24640 + t24641;
  t24643 = t7150*t24642;
  t24644 = t24638 + t24643;
  t24646 = t222*t24617*t20292;
  t24647 = -1.*t24361*t3133;
  t24649 = -1.*t24565*t24470*t3133;
  t24650 = -1.*t24429*t4853;
  t24652 = t7150*t24542*t20292;
  t24653 = t24647 + t24648 + t24649 + t24650 + t24651 + t24652;
  t24654 = t7150*t24653;
  t24655 = t24646 + t24654;
  t24657 = t222*t24637*t4853;
  t24658 = t24361*t24292;
  t24660 = -1.*t7150*t24542*t4853;
  t24661 = t24658 + t24659 + t24660;
  t24662 = t7150*t24661;
  t24663 = t24657 + t24662;
  t24758 = 0.241*t24308*t24757;
  t24759 = 0.241*t21336*t24757;
  t24763 = 0.241*t18488*t24762;
  t24767 = 0.241*t18488*t24766;
  t24768 = t24758 + t24759 + t24763 + t24767;
  t24724 = t24671*t24721;
  t24728 = t24694*t24727;
  t24729 = t24724 + t24728;
  t24740 = t24671*t24733;
  t24750 = t24694*t24743;
  t24751 = t24740 + t24750;
  t24779 = t24685*t24778;
  t24791 = t24550 + t24780 + t24785;
  t24795 = t222*t3827*t24791;
  t24799 = t24779 + t24795;
  t24830 = t24685*t24811;
  t24831 = -1.*t222*t7150*t24470;
  t24835 = t222*t8173*t24834;
  t24840 = t24831 + t24835 + t24839;
  t24841 = t24721*t24840;
  t24845 = t24834*t24295;
  t24846 = t24546 + t24640 + t24842 + t24843 + t24844 + t24845;
  t24847 = t222*t3827*t24846;
  t24848 = t24830 + t24841 + t24847;
  t24815 = t24721*t24811;
  t24822 = t24772*t24295;
  t24826 = t24659 + t24818 + t24822;
  t24827 = t222*t3827*t24826;
  t24828 = t24815 + t24827;
  t24850 = t24733*t24778;
  t24851 = t222*t7150*t24470;
  t24852 = -1.*t222*t8173*t24834;
  t24854 = t24851 + t24852 + t24853;
  t24855 = t24685*t24854;
  t24857 = -1.*t24834*t8185;
  t24859 = -1.*t24772*t21322;
  t24860 = t24648 + t24651 + t24856 + t24857 + t24858 + t24859;
  t24861 = t222*t3827*t24860;
  t24862 = t24850 + t24855 + t24861;
  t24864 = t24546 + t24842 + t24844;
  t24865 = t24685*t24864;
  t24867 = -1.*t24772*t24295;
  t24868 = t24536 + t24866 + t24867;
  t24869 = t24733*t24868;
  t24871 = -1.*t24834*t24295;
  t24872 = t24550 + t24557 + t24780 + t24870 + t24785 + t24871;
  t24873 = t24685*t24872;
  t24875 = t24834*t8185;
  t24877 = t24772*t21322;
  t24878 = t24576 + t24585 + t24874 + t24875 + t24876 + t24877;
  t24879 = t24721*t24878;
  t24880 = t24865 + t24869 + t24873 + t24879;
  t24896 = t18488*t24895;
  t24899 = t24785 + t24897 + t24898;
  t24900 = t24501*t24899;
  t24901 = t24896 + t24900;
  t24906 = t24308*t24905;
  t24907 = t24886*t24308;
  t24908 = t24893*t24727;
  t24909 = t24818 + t24907 + t24908;
  t24910 = t24501*t24909;
  t24911 = t24906 + t24910;
  t24913 = t18488*t24905;
  t24917 = -1.*t24501*t24916;
  t24921 = -1.*t24890*t24920;
  t24922 = t24839 + t24917 + t24921;
  t24923 = t24308*t24922;
  t24926 = t24916*t24308;
  t24927 = t24920*t24727;
  t24928 = t24843 + t24844 + t24924 + t24925 + t24926 + t24927;
  t24929 = t24501*t24928;
  t24930 = t24913 + t24923 + t24929;
  t24932 = t21336*t24895;
  t24933 = t24501*t24916;
  t24934 = t24890*t24920;
  t24935 = t24853 + t24933 + t24934;
  t24936 = t18488*t24935;
  t24937 = -1.*t24916*t18488;
  t24938 = -1.*t24920*t24704;
  t24939 = -1.*t24886*t21336;
  t24940 = -1.*t24893*t24743;
  t24941 = t24856 + t24858 + t24937 + t24938 + t24939 + t24940;
  t24942 = t24501*t24941;
  t24943 = t24932 + t24936 + t24942;
  t24945 = t24844 + t24924 + t24925;
  t24946 = t18488*t24945;
  t24947 = -1.*t24886*t24308;
  t24948 = -1.*t24893*t24727;
  t24949 = t24866 + t24947 + t24948;
  t24950 = t21336*t24949;
  t24951 = -1.*t24916*t24308;
  t24952 = -1.*t24920*t24727;
  t24953 = t24870 + t24785 + t24897 + t24898 + t24951 + t24952;
  t24954 = t18488*t24953;
  t24955 = t24916*t18488;
  t24956 = t24920*t24704;
  t24957 = t24886*t21336;
  t24958 = t24893*t24743;
  t24959 = t24874 + t24876 + t24955 + t24956 + t24957 + t24958;
  t24960 = t24308*t24959;
  t24961 = t24946 + t24950 + t24954 + t24960;
  t25031 = t222*t3827*t24671;
  t25032 = t24694*t24890;
  t25033 = t25031 + t25032;
  t24707 = 0.241*t24308*t24706;
  t24708 = 0.241*t21336*t24706;
  t24730 = 0.241*t18488*t24729;
  t24752 = 0.241*t18488*t24751;
  t24753 = t24707 + t24708 + t24730 + t24752;
  t24995 = 0.241*t24757*t24729;
  t24996 = 0.241*t24706*t24762;
  t24997 = 0.241*t24757*t24751;
  t24998 = 0.241*t24706*t24766;
  t24999 = t24995 + t24996 + t24997 + t24998;
  t25070 = 5.e-6*t18488;
  t25087 = -3.e-6*t18488;
  t25082 = 0.006182*t18488;
  t25083 = -3.e-6*t24308;
  t25084 = t25082 + t25083;
  t25086 = 5.e-6*t24501;
  t25088 = 0.000035*t24308;
  t25089 = t25086 + t25087 + t25088;
  t25091 = 0.000035*t18488;
  t25092 = -3.e-6*t21336;
  t25093 = t25091 + t25092;
  t25095 = 0.006182*t21336;
  t25096 = t25087 + t25095;
  t25099 = t24308*t24945;
  t25100 = t18488*t24949;
  t25101 = t25099 + t25100;
  t24902 = 0.241*t18488*t24901;
  t24912 = 0.241*t21336*t24911;
  t24931 = 0.241*t18488*t24930;
  t24944 = 0.241*t24308*t24943;
  t24962 = 0.241*t24501*t24961;
  t24963 = t24902 + t24912 + t24931 + t24944 + t24962;
  t25061 = 0.241*t24706*t24901;
  t25062 = 0.241*t24751*t24911;
  t25063 = 0.241*t24706*t24930;
  t25064 = 0.241*t24729*t24943;
  t25065 = 0.241*t25033*t24961;
  t25066 = t25061 + t25062 + t25063 + t25064 + t25065;
  t25012 = 0.241*t24757*t24901;
  t25013 = 0.241*t24766*t24911;
  t25014 = 0.241*t24757*t24930;
  t25015 = 0.241*t24762*t24943;
  t25016 = 0.241*t24979*t24961;
  t25017 = t25012 + t25013 + t25014 + t25015 + t25016;
  t25158 = 5.e-6*t24685;
  t25171 = -3.e-6*t24685;
  t25140 = t24721*t24864;
  t25141 = t24685*t24868;
  t25142 = t25140 + t25141;
  t25106 = t222*t3133*t24544;
  t25107 = t222*t4853*t24548;
  t25108 = t25106 + t25107;
  t25170 = 0.006182*t24733;
  t25172 = t25170 + t25171;
  t25174 = 5.e-6*t222*t3827;
  t25175 = 0.000035*t24721;
  t25176 = t25174 + t25175 + t25171;
  t25178 = -3.e-6*t24733;
  t25179 = 0.000035*t24685;
  t25180 = t25178 + t25179;
  t25182 = -3.e-6*t24721;
  t25183 = 0.006182*t24685;
  t25184 = t25182 + t25183;
  t25121 = t4853*t24390;
  t25122 = t24292*t24407;
  t25123 = t25121 + t25122;
  t24803 = 0.241*t18488*t24799;
  t24829 = 0.241*t21336*t24828;
  t24849 = 0.241*t18488*t24848;
  t24863 = 0.241*t24308*t24862;
  t24881 = 0.241*t24501*t24880;
  t24882 = t24803 + t24829 + t24849 + t24863 + t24881;
  t25054 = 0.241*t24706*t24799;
  t25055 = 0.241*t24706*t24848;
  t25056 = 0.241*t24828*t24751;
  t25057 = 0.241*t24729*t24862;
  t25058 = 0.241*t25033*t24880;
  t25059 = t25054 + t25055 + t25056 + t25057 + t25058;
  t25005 = 0.241*t24757*t24799;
  t25006 = 0.241*t24757*t24848;
  t25007 = 0.241*t24828*t24766;
  t25008 = 0.241*t24762*t24862;
  t25009 = 0.241*t24979*t24880;
  t25010 = t25005 + t25006 + t25007 + t25008 + t25009;
  t25135 = 0.241*t24862*t24901;
  t25136 = 0.241*t24880*t25101;
  t25137 = 0.241*t24848*t24911;
  t25138 = 0.241*t24828*t24930;
  t25139 = 0.241*t24799*t24943;
  t25143 = 0.241*t25142*t24961;
  t25228 = 5.e-6*t222*t3133;
  t25245 = -3.e-6*t222*t3133;
  t25240 = 0.006182*t222*t3133;
  t25241 = -3.e-6*t222*t4853;
  t25242 = t25240 + t25241;
  t25244 = 5.e-6*t7150;
  t25246 = 0.000035*t222*t4853;
  t25247 = t25244 + t25245 + t25246;
  t25249 = 0.000035*t222*t3133;
  t25250 = -3.e-6*t222*t20292;
  t25251 = t25249 + t25250;
  t25253 = 0.006182*t222*t20292;
  t25254 = t25245 + t25253;
  t24614 = 0.241*t24601*t24501;
  t24622 = 0.241*t24621*t18488;
  t24645 = 0.241*t24644*t18488;
  t24656 = 0.241*t24655*t24308;
  t24664 = 0.241*t24663*t21336;
  t24665 = t24614 + t24622 + t24645 + t24656 + t24664;
  t25041 = 0.241*t24601*t25033;
  t25042 = 0.241*t24621*t24706;
  t25043 = 0.241*t24644*t24706;
  t25044 = 0.241*t24655*t24729;
  t25045 = 0.241*t24663*t24751;
  t25046 = t25041 + t25042 + t25043 + t25044 + t25045;
  t24987 = 0.241*t24601*t24979;
  t24988 = 0.241*t24621*t24757;
  t24989 = 0.241*t24644*t24757;
  t24990 = 0.241*t24655*t24762;
  t24991 = 0.241*t24663*t24766;
  t24992 = t24987 + t24988 + t24989 + t24990 + t24991;
  t25186 = 0.241*t24655*t24799;
  t25187 = 0.241*t24601*t25142;
  t25188 = 0.241*t24644*t24828;
  t25189 = 0.241*t24663*t24848;
  t25190 = 0.241*t24621*t24862;
  t25191 = 0.241*t25108*t24880;
  t25098 = 0.241*t24655*t24901;
  t25102 = 0.241*t24601*t25101;
  t25103 = 0.241*t24644*t24911;
  t25104 = 0.241*t24663*t24930;
  t25105 = 0.241*t24621*t24943;
  t25109 = 0.241*t25108*t24961;
  t25293 = 5.e-6*t4853;
  t25305 = -3.e-6*t4853;
  t25265 = 0.241*t24506*t24663;
  t25266 = -0.009008821*t3133*t24621;
  t25267 = 0.241*t24511*t24644;
  t25268 = 0.241*t25123*t24601;
  t25269 = -0.009008821*t4853*t24655;
  t25270 = 0.241*t25108*t24498;
  t25304 = 0.006182*t3133;
  t25306 = t25304 + t25305;
  t25308 = 0.000035*t24292;
  t25309 = t25308 + t25305;
  t25311 = -3.e-6*t3133;
  t25312 = 0.000035*t4853;
  t25313 = t25311 + t25312;
  t25315 = -3.e-6*t24292;
  t25316 = 0.006182*t4853;
  t25317 = t25315 + t25316;
  t24502 = 0.241*t24498*t24501;
  t24503 = -0.009008821*t4853*t18488;
  t24507 = 0.241*t24506*t18488;
  t24508 = -0.009008821*t3133*t24308;
  t24512 = 0.241*t24511*t21336;
  t24531 = t24502 + t24503 + t24507 + t24508 + t24512;
  t25034 = 0.241*t24498*t25033;
  t25035 = -0.009008821*t4853*t24706;
  t25036 = 0.241*t24506*t24706;
  t25037 = -0.009008821*t3133*t24729;
  t25038 = 0.241*t24511*t24751;
  t25039 = t25034 + t25035 + t25036 + t25037 + t25038;
  t24980 = 0.241*t24498*t24979;
  t24981 = -0.009008821*t4853*t24757;
  t24982 = 0.241*t24506*t24757;
  t24983 = -0.009008821*t3133*t24762;
  t24984 = 0.241*t24511*t24766;
  t24985 = t24980 + t24981 + t24982 + t24983 + t24984;
  t25198 = -0.009008821*t3133*t24799;
  t25199 = 0.241*t24498*t25142;
  t25200 = 0.241*t24506*t24828;
  t25201 = 0.241*t24511*t24848;
  t25202 = -0.009008821*t4853*t24862;
  t25203 = 0.241*t25123*t24880;
  t25116 = -0.009008821*t3133*t24901;
  t25117 = 0.241*t24498*t25101;
  t25118 = 0.241*t24506*t24911;
  t25119 = 0.241*t24511*t24930;
  t25120 = -0.009008821*t4853*t24943;
  t25124 = 0.241*t25123*t24961;
  t25297 = -0.009008821*t3133*t23406;
  t25298 = -0.009008821*t4853*t24279;
  t25299 = 0.241*t24085*t24511;
  t25300 = 0.241*t24321*t24506;
  t25301 = t25293 + t25297 + t25298 + t25299 + t25300;
  t25233 = 0.241*t24085*t24663;
  t25234 = 0.241*t24279*t24621;
  t25235 = 0.241*t24321*t24644;
  t25236 = 0.241*t23406*t24655;
  t25237 = t25228 + t25233 + t25234 + t25235 + t25236;
  t23439 = 0.241*t23406*t18488;
  t24242 = 0.241*t24085*t18488;
  t24320 = 0.241*t24279*t24308;
  t24322 = 0.241*t24321*t21336;
  t24326 = t23439 + t24242 + t24320 + t24322;
  t25025 = 0.241*t23406*t24706;
  t25026 = 0.241*t24085*t24706;
  t25027 = 0.241*t24279*t24729;
  t25028 = 0.241*t24321*t24751;
  t25029 = t25025 + t25026 + t25027 + t25028;
  t24971 = 0.241*t23406*t24757;
  t24972 = 0.241*t24085*t24757;
  t24973 = 0.241*t24279*t24762;
  t24974 = 0.241*t24321*t24766;
  t24975 = t24971 + t24972 + t24973 + t24974;
  t25163 = 0.241*t24279*t24799;
  t25164 = 0.241*t24085*t24828;
  t25165 = 0.241*t24321*t24848;
  t25166 = 0.241*t23406*t24862;
  t25167 = t25158 + t25163 + t25164 + t25165 + t25166;
  t25075 = 0.241*t24279*t24901;
  t25076 = 0.241*t24085*t24911;
  t25077 = 0.241*t24321*t24930;
  t25078 = 0.241*t23406*t24943;
  t25079 = t25070 + t25075 + t25076 + t25077 + t25078;
  t25349 = -0.02973458*t24085;
  t25350 = 0.000529236*t24279;
  t25351 = t25349 + t25350;
  t25292 = -0.000019783370916*t3133;
  t25294 = -0.02973458*t24506;
  t25295 = t25292 + t25293 + t25294;
  t25229 = -0.02973458*t24644;
  t25230 = 0.000529236*t24655;
  t25231 = t25228 + t25229 + t25230;
  t18996 = 0.000529236*t18488;
  t21375 = -0.02973458*t21336;
  t21485 = t18996 + t21375;
  t25021 = 0.000529236*t24706;
  t25022 = -0.02973458*t24751;
  t25023 = t25021 + t25022;
  t24967 = 0.000529236*t24757;
  t24968 = -0.02973458*t24766;
  t24969 = t24967 + t24968;
  t25159 = -0.02973458*t24848;
  t25160 = 0.000529236*t24862;
  t25161 = t25158 + t25159 + t25160;
  t25071 = -0.02973458*t24930;
  t25072 = 0.000529236*t24943;
  t25073 = t25070 + t25071 + t25072;
  p_output1[0]=var2[14]*(-0.5*(0.482*t18488*t21336 + 0.482*t18488*t24308)*var2[0] - 0.5*t24768*var2[1] - 0.5*t24753*var2[2] - 0.5*t24963*var2[3] - 0.5*t24882*var2[4] - 0.5*t24665*var2[5] - 0.5*t24531*var2[12] - 0.5*t24326*var2[13] - 0.5*t21485*var2[14]);
  p_output1[1]=var2[14]*(-0.5*t24768*var2[0] - 0.5*(0.482*t24757*t24762 + 0.482*t24757*t24766)*var2[1] - 0.5*t24999*var2[2] - 0.5*t25017*var2[3] - 0.5*t25010*var2[4] - 0.5*t24992*var2[5] - 0.5*t24985*var2[12] - 0.5*t24975*var2[13] - 0.5*t24969*var2[14]);
  p_output1[2]=var2[14]*(-0.5*t24753*var2[0] - 0.5*t24999*var2[1] - 0.5*(0.482*t24706*t24729 + 0.482*t24706*t24751)*var2[2] - 0.5*t25066*var2[3] - 0.5*t25059*var2[4] - 0.5*t25046*var2[5] - 0.5*t25039*var2[12] - 0.5*t25029*var2[13] - 0.5*t25023*var2[14]);
  p_output1[3]=var2[14]*(-0.5*t24963*var2[0] - 0.5*t25017*var2[1] - 0.5*t25066*var2[2] - 0.5*(5.e-6*t18488*t24501 + 0.482*t24911*t24930 + 0.482*t24901*t24943 + t21336*t25084 + t18488*t25089 + t24308*t25093 + t18488*t25096 + 0.482*t24961*t25101)*var2[3] - 0.5*(t24733*t25084 + t24685*t25089 + t24721*t25093 + t24685*t25096 + t25135 + t25136 + t25137 + t25138 + t25139 + t25143 + 5.e-6*t18488*t222*t3827)*var2[4] - 0.5*(t20292*t222*t25084 + t25098 + t25102 + t25103 + t25104 + t25105 + t25109 + t222*t25089*t3133 + t222*t25096*t3133 + t222*t25093*t4853 + 5.e-6*t18488*t7150)*var2[5] - 0.5*(t24292*t25093 + t25116 + t25117 + t25118 + t25119 + t25120 + t25124 + t25084*t3133 + t25089*t4853 + t25096*t4853)*var2[12] - 0.5*t25079*var2[13] - 0.5*t25073*var2[14]);
  p_output1[4]=var2[14]*(-0.5*t24882*var2[0] - 0.5*t25010*var2[1] - 0.5*t25059*var2[2] - 0.5*(5.e-6*t24501*t24685 + t25135 + t25136 + t25137 + t25138 + t25139 + t25143 + t18488*t25172 + t18488*t25176 + t24308*t25180 + t21336*t25184)*var2[3] - 0.5*(0.482*t24828*t24848 + 0.482*t24799*t24862 + 0.482*t24880*t25142 + t24685*t25172 + t24685*t25176 + t24721*t25180 + t24733*t25184 + 5.e-6*t222*t24685*t3827)*var2[4] - 0.5*(t20292*t222*t25184 + t25186 + t25187 + t25188 + t25189 + t25190 + t25191 + t222*t25172*t3133 + t222*t25176*t3133 + t222*t25180*t4853 + 5.e-6*t24685*t7150)*var2[5] - 0.5*(t24292*t25180 + t25198 + t25199 + t25200 + t25201 + t25202 + t25203 + t25184*t3133 + t25172*t4853 + t25176*t4853)*var2[12] - 0.5*t25167*var2[13] - 0.5*t25161*var2[14]);
  p_output1[5]=var2[14]*(-0.5*t24665*var2[0] - 0.5*t24992*var2[1] - 0.5*t25046*var2[2] - 0.5*(t25098 + t25102 + t25103 + t25104 + t25105 + t25109 + t21336*t25242 + t18488*t25247 + t24308*t25251 + t18488*t25254 + 5.e-6*t222*t24501*t3133)*var2[3] - 0.5*(t25186 + t25187 + t25188 + t25189 + t25190 + t25191 + t24733*t25242 + t24685*t25247 + t24721*t25251 + t24685*t25254 + 5.e-6*t24552*t3133*t3827)*var2[4] - 0.5*(0.482*t24621*t24655 + 0.482*t24644*t24663 + 0.482*t24601*t25108 + t20292*t222*t25242 + t222*t25247*t3133 + t222*t25254*t3133 + t222*t25251*t4853 + 5.e-6*t222*t3133*t7150)*var2[5] - 0.5*(t24292*t25251 + t25265 + t25266 + t25267 + t25268 + t25269 + t25270 + t25242*t3133 + t25247*t4853 + t25254*t4853)*var2[12] - 0.5*t25237*var2[13] - 0.5*t25231*var2[14]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=var2[14]*(-0.5*t24531*var2[0] - 0.5*t24985*var2[1] - 0.5*t25039*var2[2] - 0.5*(t25116 + t25117 + t25118 + t25119 + t25120 + t25124 + t18488*t25306 + t18488*t25309 + t24308*t25313 + t21336*t25317 + 5.e-6*t24501*t4853)*var2[3] - 0.5*(t25198 + t25199 + t25200 + t25201 + t25202 + t25203 + t24685*t25306 + t24685*t25309 + t24721*t25313 + t24733*t25317 + 5.e-6*t222*t3827*t4853)*var2[4] - 0.5*(t25265 + t25266 + t25267 + t25268 + t25269 + t25270 + t20292*t222*t25317 + t222*t25306*t3133 + t222*t25309*t3133 + t222*t25313*t4853 + 5.e-6*t4853*t7150)*var2[5] - 0.5*(0.482*t24506*t24511 + 0.482*t24498*t25123 + t24292*t25313 + t25317*t3133 + t25306*t4853 + t25309*t4853 + 0.000673517475602*t3133*t4853)*var2[12] - 0.5*t25301*var2[13] - 0.5*t25295*var2[14]);
  p_output1[13]=var2[14]*(-0.5*t24326*var2[0] - 0.5*t24975*var2[1] - 0.5*t25029*var2[2] - 0.5*t25079*var2[3] - 0.5*t25167*var2[4] - 0.5*t25237*var2[5] - 0.5*t25301*var2[12] - 0.5*(0.482*t23406*t24279 + 0.482*t24085*t24321)*var2[13] - 0.5*t25351*var2[14]);
  p_output1[14]=(-0.5*t21485*var2[0] - 0.5*t24969*var2[1] - 0.5*t25023*var2[2] - 0.5*t25073*var2[3] - 0.5*t25161*var2[4] - 0.5*t25231*var2[5] - 0.5*t25295*var2[12] - 0.5*t25351*var2[13])*var2[14];
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec15_laikago_description.hh"

namespace SymFunction
{

void Ce2_vec15_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
