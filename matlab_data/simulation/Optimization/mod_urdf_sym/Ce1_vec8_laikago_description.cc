/*
 * Automatically Generated from Mathematica.
 * Tue 10 Dec 2019 16:01:17 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t87;
  double t99;
  double t112;
  double t97;
  double t103;
  double t146;
  double t299;
  double t373;
  double t506;
  double t518;
  double t526;
  double t567;
  double t595;
  double t616;
  double t321;
  double t347;
  double t367;
  double t449;
  double t466;
  double t703;
  double t714;
  double t721;
  double t978;
  double t985;
  double t478;
  double t480;
  double t618;
  double t659;
  double t686;
  double t687;
  double t691;
  double t750;
  double t761;
  double t764;
  double t769;
  double t772;
  double t773;
  double t781;
  double t1086;
  double t1087;
  double t1090;
  double t1106;
  double t1107;
  double t1121;
  double t1315;
  double t1324;
  double t1325;
  double t1300;
  double t1308;
  double t1312;
  double t1314;
  double t1393;
  double t1394;
  double t1363;
  double t1364;
  double t1367;
  double t1169;
  double t1171;
  double t1172;
  double t1326;
  double t1329;
  double t1330;
  double t1331;
  double t1339;
  double t1340;
  double t1341;
  double t1435;
  double t1444;
  double t1070;
  double t1071;
  double t1075;
  double t104;
  double t159;
  double t161;
  double t178;
  double t239;
  double t242;
  double t693;
  double t724;
  double t735;
  double t790;
  double t795;
  double t862;
  double t1212;
  double t1067;
  double t1076;
  double t1080;
  double t1083;
  double t1091;
  double t1101;
  double t1105;
  double t1128;
  double t1138;
  double t1159;
  double t1173;
  double t1178;
  double t1235;
  double t1236;
  double t1241;
  double t1666;
  double t1670;
  double t1672;
  double t1682;
  double t1685;
  double t1686;
  double t1764;
  double t1767;
  double t1771;
  double t1772;
  double t1347;
  double t1357;
  double t1384;
  double t1387;
  double t1397;
  double t1399;
  double t1411;
  double t1413;
  double t1414;
  double t1696;
  double t1698;
  double t1701;
  double t1777;
  double t1779;
  double t1783;
  double t1850;
  double t1867;
  double t1872;
  double t1873;
  double t1880;
  double t1881;
  double t1883;
  double t1450;
  double t1453;
  double t1454;
  double t1521;
  double t1524;
  double t1525;
  double t1545;
  double t1546;
  double t1547;
  double t1554;
  double t1555;
  double t1557;
  double t1604;
  double t1605;
  double t1608;
  double t1609;
  double t1610;
  double t1616;
  double t1617;
  double t1618;
  double t1621;
  double t1622;
  double t1634;
  double t1643;
  double t1644;
  double t1649;
  double t1737;
  double t1741;
  double t1760;
  double t1890;
  double t1903;
  double t1906;
  double t1724;
  double t1725;
  double t1731;
  double t2247;
  double t2250;
  double t2252;
  double t2256;
  double t2257;
  double t2272;
  double t2275;
  double t2279;
  double t2397;
  double t2399;
  double t2412;
  double t2380;
  double t2389;
  double t2393;
  double t2396;
  double t2416;
  double t2417;
  double t2419;
  double t2420;
  double t2424;
  double t2450;
  double t2451;
  double t2452;
  double t2459;
  double t2460;
  double t2461;
  double t2464;
  double t2465;
  double t2480;
  double t2481;
  double t2484;
  double t2493;
  double t2331;
  double t2338;
  double t2339;
  double t2503;
  double t2505;
  double t2506;
  double t2534;
  double t2536;
  double t2538;
  double t2573;
  double t2578;
  double t2588;
  double t2558;
  double t2567;
  double t2568;
  double t2508;
  double t2528;
  double t2530;
  double t2354;
  double t2360;
  double t2371;
  double t1278;
  double t1289;
  double t1298;
  double t2778;
  double t2779;
  double t2780;
  double t2786;
  double t2771;
  double t2792;
  double t2796;
  double t2799;
  double t2801;
  double t2802;
  double t2803;
  double t2804;
  double t2810;
  double t2814;
  double t2844;
  double t2859;
  double t2899;
  double t2903;
  double t2904;
  double t2880;
  double t2882;
  double t2897;
  double t2797;
  double t2872;
  double t2873;
  double t2923;
  double t2924;
  double t2925;
  double t1415;
  double t1417;
  double t1423;
  double t983;
  double t1012;
  double t1022;
  double t2571;
  double t2572;
  double t2591;
  double t2592;
  double t3123;
  double t3145;
  double t3146;
  double t3208;
  double t3212;
  double t3221;
  double t3231;
  double t3238;
  double t2595;
  double t2601;
  double t2603;
  double t2604;
  double t3248;
  double t3250;
  double t3256;
  double t3223;
  double t3241;
  double t3246;
  double t2705;
  double t2707;
  double t2708;
  double t2718;
  double t1028;
  double t1029;
  double t1031;
  double t3182;
  double t3188;
  double t3194;
  double t3259;
  double t2728;
  double t2730;
  double t2735;
  double t2739;
  double t1058;
  double t1060;
  double t1062;
  double t2915;
  double t2918;
  double t2930;
  double t2932;
  double t1051;
  double t1054;
  double t1055;
  double t3371;
  double t3377;
  double t3378;
  double t3383;
  double t3388;
  double t3406;
  double t3409;
  double t3416;
  double t3379;
  double t3389;
  double t3403;
  double t2951;
  double t2954;
  double t2958;
  double t2969;
  double t3015;
  double t3016;
  double t3017;
  double t3019;
  double t3038;
  double t3047;
  double t3080;
  double t3090;
  double t3549;
  double t3550;
  double t3552;
  double t3676;
  double t3678;
  double t3682;
  double t3794;
  double t3795;
  double t3801;
  double t3793;
  double t3803;
  double t3806;
  double t3831;
  double t3837;
  double t3839;
  double t3817;
  double t3818;
  double t3823;
  double t3811;
  double t3812;
  double t3815;
  double t1261;
  double t1262;
  double t3911;
  double t3912;
  double t3913;
  double t3914;
  double t3909;
  double t3915;
  double t3921;
  double t3965;
  double t3970;
  double t3971;
  double t3955;
  double t3958;
  double t3959;
  double t3933;
  double t3943;
  double t3951;
  double t3907;
  double t3908;
  double t4214;
  double t4220;
  double t4221;
  double t4222;
  double t4224;
  double t4230;
  double t4232;
  double t4235;
  double t4236;
  double t3984;
  double t4273;
  double t4275;
  double t4282;
  double t3988;
  double t3994;
  double t4250;
  double t4255;
  double t4271;
  double t4240;
  double t4241;
  double t4247;
  double t4028;
  double t4031;
  double t4043;
  double t4044;
  double t3258;
  double t3260;
  double t3279;
  double t3281;
  double t3317;
  double t3318;
  double t4452;
  double t3325;
  double t3345;
  double t3424;
  double t3426;
  double t3434;
  double t3437;
  double t3472;
  double t3474;
  double t3483;
  double t3491;
  double t4430;
  double t4439;
  double t4441;
  double t3572;
  double t3581;
  double t3587;
  double t4467;
  double t4468;
  double t4469;
  double t3626;
  double t4494;
  double t4496;
  double t4503;
  double t4525;
  double t4526;
  double t4527;
  double t3644;
  double t3645;
  double t4553;
  double t4554;
  double t4555;
  double t3690;
  double t3703;
  double t3720;
  double t4629;
  double t4642;
  double t4644;
  double t3742;
  double t4655;
  double t4660;
  double t4661;
  double t4722;
  double t4724;
  double t4727;
  double t3753;
  double t3757;
  double t3842;
  double t3851;
  double t3852;
  double t3879;
  double t4907;
  double t3891;
  double t3892;
  double t3975;
  double t3987;
  double t4016;
  double t4030;
  double t4969;
  double t4971;
  double t4283;
  double t4984;
  double t4988;
  double t4312;
  double t4384;
  double t5003;
  double t5012;
  double t4395;
  double t5014;
  double t4514;
  double t4517;
  double t4535;
  double t4536;
  double t4473;
  double t4474;
  double t4459;
  double t4462;
  double t4678;
  double t4680;
  double t4696;
  double t4699;
  double t4583;
  double t4585;
  double t4595;
  double t4597;
  double t5126;
  double t5127;
  double t4912;
  double t4915;
  double t5093;
  double t5094;
  double t5148;
  double t5149;
  double t4948;
  double t5265;
  double t5167;
  double t5168;
  double t4987;
  double t5213;
  double t5215;
  double t5005;
  double t5305;
  double t5180;
  double t5188;
  double t5194;
  double t5242;
  double t5244;
  double t5245;
  double t5346;
  double t5347;
  double t5353;
  double t5055;
  double t5369;
  double t5386;
  double t5073;
  double t5388;
  double t5472;
  double t5474;
  double t5475;
  double t5479;
  double t5481;
  double t5483;
  t87 = Cos(var1[4]);
  t99 = Cos(var1[7]);
  t112 = Sin(var1[5]);
  t97 = Cos(var1[5]);
  t103 = Sin(var1[6]);
  t146 = Sin(var1[7]);
  t299 = Cos(var1[8]);
  t373 = Sin(var1[8]);
  t506 = -1.*t299;
  t518 = 1. + t506;
  t526 = 0.21935*t518;
  t567 = 0.217154*t299;
  t595 = -0.12338*t373;
  t616 = t526 + t567 + t595;
  t321 = -1. + t299;
  t347 = 0.25*t321;
  t367 = -0.37338*t299;
  t449 = 0.002196*t373;
  t466 = t347 + t367 + t449;
  t703 = t99*t299;
  t714 = -1.*t146*t373;
  t721 = t703 + t714;
  t978 = Cos(var1[6]);
  t985 = Sin(var1[4]);
  t478 = t299*t466;
  t480 = -0.21935*t373;
  t618 = t616*t373;
  t659 = t478 + t480 + t618;
  t686 = -1.*t299*t146;
  t687 = -1.*t99*t373;
  t691 = t686 + t687;
  t750 = 0.21935*t299;
  t761 = -1.*t299*t616;
  t764 = t466*t373;
  t769 = t750 + t761 + t764;
  t772 = t299*t146;
  t773 = t99*t373;
  t781 = t772 + t773;
  t1086 = t97*t99;
  t1087 = -1.*t112*t103*t146;
  t1090 = t1086 + t1087;
  t1106 = t112*t103*t691;
  t1107 = t97*t721;
  t1121 = t1106 + t1107;
  t1315 = -1.*t99*t299;
  t1324 = t146*t373;
  t1325 = t1315 + t1324;
  t1300 = t978*t985*t691;
  t1308 = t87*t1121;
  t1312 = t1300 + t1308;
  t1314 = 0.241*t769*t1312;
  t1393 = -0.12338*t299;
  t1394 = t1393 + t449;
  t1363 = 0.002196*t299;
  t1364 = 0.12338*t373;
  t1367 = t1363 + t1364;
  t1169 = t97*t781;
  t1171 = t112*t103*t721;
  t1172 = t1169 + t1171;
  t1326 = t978*t985*t1325;
  t1329 = t97*t691;
  t1330 = t112*t103*t1325;
  t1331 = t1329 + t1330;
  t1339 = t87*t1331;
  t1340 = t1326 + t1339;
  t1341 = 0.241*t659*t1340;
  t1435 = Cos(var1[3]);
  t1444 = Sin(var1[3]);
  t1070 = t99*t112*t103;
  t1071 = t97*t146;
  t1075 = t1070 + t1071;
  t104 = t97*t99*t103;
  t159 = -1.*t112*t146;
  t161 = t104 + t159;
  t178 = -1.*t99*t112;
  t239 = -1.*t97*t103*t146;
  t242 = t178 + t239;
  t693 = t97*t103*t691;
  t724 = -1.*t112*t721;
  t735 = t693 + t724;
  t790 = -1.*t112*t781;
  t795 = t97*t103*t721;
  t862 = t790 + t795;
  t1212 = -1.*t978*t99*t985;
  t1067 = t87*t978*t99;
  t1076 = -1.*t985*t1075;
  t1080 = t1067 + t1076;
  t1083 = -1.*t87*t978*t146;
  t1091 = -1.*t985*t1090;
  t1101 = t1083 + t1091;
  t1105 = t87*t978*t691;
  t1128 = -1.*t985*t1121;
  t1138 = t1105 + t1128;
  t1159 = t87*t978*t721;
  t1173 = -1.*t985*t1172;
  t1178 = t1159 + t1173;
  t1235 = -1.*t99*t112*t103;
  t1236 = -1.*t97*t146;
  t1241 = t1235 + t1236;
  t1666 = t99*t112;
  t1670 = t97*t103*t146;
  t1672 = t1666 + t1670;
  t1682 = -1.*t97*t103*t691;
  t1685 = t112*t721;
  t1686 = t1682 + t1685;
  t1764 = t1435*t1686;
  t1767 = -1.*t1444*t1138;
  t1771 = t1764 + t1767;
  t1772 = 0.241*t769*t1771;
  t1347 = -0.21935*t299;
  t1357 = t299*t616;
  t1384 = t299*t1367;
  t1387 = -1.*t466*t373;
  t1397 = t1394*t373;
  t1399 = t1347 + t1357 + t1384 + t1387 + t1397;
  t1411 = -1.*t299*t1394;
  t1413 = t1367*t373;
  t1414 = t478 + t1411 + t480 + t618 + t1413;
  t1696 = t112*t781;
  t1698 = -1.*t97*t103*t721;
  t1701 = t1696 + t1698;
  t1777 = t112*t691;
  t1779 = -1.*t97*t103*t1325;
  t1783 = t1777 + t1779;
  t1850 = t1435*t1783;
  t1867 = t87*t978*t1325;
  t1872 = -1.*t985*t1331;
  t1873 = t1867 + t1872;
  t1880 = -1.*t1444*t1873;
  t1881 = t1850 + t1880;
  t1883 = 0.241*t659*t1881;
  t1450 = -1.*t978*t99*t985*t112;
  t1453 = -1.*t87*t99*t103;
  t1454 = t1450 + t1453;
  t1521 = t978*t985*t112*t146;
  t1524 = t87*t103*t146;
  t1525 = t1521 + t1524;
  t1545 = -1.*t978*t985*t112*t691;
  t1546 = -1.*t87*t103*t691;
  t1547 = t1545 + t1546;
  t1554 = -1.*t978*t985*t112*t721;
  t1555 = -1.*t87*t103*t721;
  t1557 = t1554 + t1555;
  t1604 = -1.*t87*t1075;
  t1605 = t1212 + t1604;
  t1608 = t978*t985*t146;
  t1609 = -1.*t87*t1090;
  t1610 = t1608 + t1609;
  t1616 = -1.*t978*t985*t691;
  t1617 = -1.*t87*t1121;
  t1618 = t1616 + t1617;
  t1621 = -1.*t978*t985*t721;
  t1622 = -1.*t87*t1172;
  t1634 = t1621 + t1622;
  t1643 = -1.*t97*t99*t103;
  t1644 = t112*t146;
  t1649 = t1643 + t1644;
  t1737 = t1435*t1672;
  t1741 = -1.*t1444*t1101;
  t1760 = t1737 + t1741;
  t1890 = t1435*t1701;
  t1903 = -1.*t1444*t1178;
  t1906 = t1890 + t1903;
  t1724 = -1.*t87*t978*t99;
  t1725 = -1.*t985*t1241;
  t1731 = t1724 + t1725;
  t2247 = t1444*t1686;
  t2250 = t1435*t1138;
  t2252 = t2247 + t2250;
  t2256 = 0.241*t769*t2252;
  t2257 = t1444*t1783;
  t2272 = t1435*t1873;
  t2275 = t2257 + t2272;
  t2279 = 0.241*t659*t2275;
  t2397 = -0.031996*t99;
  t2399 = 0.000482*t146;
  t2412 = t2397 + t2399;
  t2380 = -1.*t978;
  t2389 = 1. + t2380;
  t2393 = -0.0875*t2389;
  t2396 = -0.14451*t978;
  t2416 = -1.*t103*t2412;
  t2417 = t2393 + t2396 + t2416;
  t2419 = -1.*t112*t2417;
  t2420 = -1.*t99;
  t2424 = 1. + t2420;
  t2450 = 0.21935*t2424;
  t2451 = 0.218868*t99;
  t2452 = -0.031996*t146;
  t2459 = t2450 + t2451 + t2452;
  t2460 = t97*t2459;
  t2461 = t2419 + t2460;
  t2464 = -1.*t985*t2461;
  t2465 = -0.05701*t103;
  t2480 = t978*t2412;
  t2481 = t2465 + t2480;
  t2484 = t87*t2481;
  t2493 = t2464 + t2484;
  t2331 = t978*t985*t112;
  t2338 = t87*t103;
  t2339 = t2331 + t2338;
  t2503 = -1.*t87*t978*t112;
  t2505 = t985*t103;
  t2506 = t2503 + t2505;
  t2534 = t87*t2461;
  t2536 = t985*t2481;
  t2538 = t2534 + t2536;
  t2573 = t97*t2417;
  t2578 = t112*t2459;
  t2588 = t2573 + t2578;
  t2558 = t978*t99*t985;
  t2567 = t87*t1075;
  t2568 = t2558 + t2567;
  t2508 = -1.*t87*t2461;
  t2528 = -1.*t985*t2481;
  t2530 = t2508 + t2528;
  t2354 = t87*t978*t112;
  t2360 = -1.*t985*t103;
  t2371 = t2354 + t2360;
  t1278 = -1.*t978*t985*t146;
  t1289 = t87*t1090;
  t1298 = t1278 + t1289;
  t2778 = 0.21935*t146;
  t2779 = -1.*t146*t616;
  t2780 = t99*t466;
  t2786 = t2778 + t2779 + t2780;
  t2771 = -0.037381*t103;
  t2792 = t978*t2786;
  t2796 = t2771 + t2792;
  t2799 = -0.124881*t978;
  t2801 = -1.*t103*t2786;
  t2802 = t2393 + t2799 + t2801;
  t2803 = -1.*t112*t2802;
  t2804 = t99*t616;
  t2810 = t146*t466;
  t2814 = t2450 + t2804 + t2810;
  t2844 = t97*t2814;
  t2859 = t2803 + t2844;
  t2899 = t87*t2796;
  t2903 = -1.*t985*t2859;
  t2904 = t2899 + t2903;
  t2880 = t985*t2796;
  t2882 = t87*t2859;
  t2897 = t2880 + t2882;
  t2797 = -1.*t985*t2796;
  t2872 = -1.*t87*t2859;
  t2873 = t2797 + t2872;
  t2923 = t97*t2802;
  t2924 = t112*t2814;
  t2925 = t2923 + t2924;
  t1415 = t978*t985*t721;
  t1417 = t87*t1172;
  t1423 = t1415 + t1417;
  t983 = t87*t978*t99*t112;
  t1012 = -1.*t99*t985*t103;
  t1022 = t983 + t1012;
  t2571 = -1.*t2339*t2493;
  t2572 = -1.*t2506*t2538;
  t2591 = -1.*t97*t978*t2588;
  t2592 = t2571 + t2572 + t2591;
  t3123 = t978*t985;
  t3145 = t87*t112*t103;
  t3146 = t3123 + t3145;
  t3208 = 0.05701*t103;
  t3212 = -1.*t978*t2412;
  t3221 = t3208 + t3212;
  t3231 = -0.05701*t978;
  t3238 = t3231 + t2416;
  t2595 = t2588*t1649;
  t2601 = t2538*t2568;
  t2603 = t2493*t1080;
  t2604 = t2595 + t2601 + t2603;
  t3248 = -1.*t87*t112*t3221;
  t3250 = t985*t3238;
  t3256 = t3248 + t3250;
  t3223 = t985*t112*t3221;
  t3241 = t87*t3238;
  t3246 = t3223 + t3241;
  t2705 = t2339*t2493;
  t2707 = t2506*t2538;
  t2708 = t97*t978*t2588;
  t2718 = t2705 + t2707 + t2708;
  t1028 = -1.*t87*t978*t112*t146;
  t1029 = t985*t103*t146;
  t1031 = t1028 + t1029;
  t3182 = t87*t978;
  t3188 = -1.*t985*t112*t103;
  t3194 = t3182 + t3188;
  t3259 = Power(t97,2);
  t2728 = -1.*t2588*t1672;
  t2730 = -1.*t2538*t1298;
  t2735 = -1.*t2493*t1101;
  t2739 = t2728 + t2730 + t2735;
  t1058 = t87*t978*t112*t721;
  t1060 = -1.*t985*t103*t721;
  t1062 = t1058 + t1060;
  t2915 = t2506*t2897;
  t2918 = t2339*t2904;
  t2930 = t97*t978*t2925;
  t2932 = t2915 + t2918 + t2930;
  t1051 = t87*t978*t112*t691;
  t1054 = -1.*t985*t103*t691;
  t1055 = t1051 + t1054;
  t3371 = 0.037381*t103;
  t3377 = -1.*t978*t2786;
  t3378 = t3371 + t3377;
  t3383 = -0.037381*t978;
  t3388 = t3383 + t2801;
  t3406 = -1.*t87*t112*t3378;
  t3409 = t985*t3388;
  t3416 = t3406 + t3409;
  t3379 = t985*t112*t3378;
  t3389 = t87*t3388;
  t3403 = t3379 + t3389;
  t2951 = -1.*t2925*t1686;
  t2954 = -1.*t2897*t1312;
  t2958 = -1.*t2904*t1138;
  t2969 = t2951 + t2954 + t2958;
  t3015 = -1.*t2506*t2897;
  t3016 = -1.*t2339*t2904;
  t3017 = -1.*t97*t978*t2925;
  t3019 = t3015 + t3016 + t3017;
  t3038 = t2925*t1701;
  t3047 = t2897*t1423;
  t3080 = t2904*t1178;
  t3090 = t3038 + t3047 + t3080;
  t3549 = -1.*t97*t2417;
  t3550 = -1.*t112*t2459;
  t3552 = t3549 + t3550;
  t3676 = -1.*t97*t2802;
  t3678 = -1.*t112*t2814;
  t3682 = t3676 + t3678;
  t3794 = 0.000482*t99;
  t3795 = 0.031996*t146;
  t3801 = t3794 + t3795;
  t3793 = t97*t2412;
  t3803 = t112*t103*t3801;
  t3806 = t3793 + t3803;
  t3831 = t112*t2412;
  t3837 = -1.*t97*t103*t3801;
  t3839 = t3831 + t3837;
  t3817 = t87*t3806;
  t3818 = t978*t985*t3801;
  t3823 = t3817 + t3818;
  t3811 = -1.*t985*t3806;
  t3812 = t87*t978*t3801;
  t3815 = t3811 + t3812;
  t1261 = t87*t1241;
  t1262 = t1212 + t1261;
  t3911 = 0.21935*t99;
  t3912 = -1.*t99*t616;
  t3913 = -1.*t146*t466;
  t3914 = t3911 + t3912 + t3913;
  t3909 = t97*t2786;
  t3915 = t112*t103*t3914;
  t3921 = t3909 + t3915;
  t3965 = t112*t2786;
  t3970 = -1.*t97*t103*t3914;
  t3971 = t3965 + t3970;
  t3955 = t87*t3921;
  t3958 = t978*t985*t3914;
  t3959 = t3955 + t3958;
  t3933 = -1.*t985*t3921;
  t3943 = t87*t978*t3914;
  t3951 = t3933 + t3943;
  t3907 = 5.e-6*t1312;
  t3908 = t3019*t1312;
  t4214 = -1.*t146*t1394;
  t4220 = t99*t1367;
  t4221 = t4214 + t4220;
  t4222 = t112*t103*t4221;
  t4224 = t99*t1394;
  t4230 = t146*t1367;
  t4232 = t4224 + t4230;
  t4235 = t97*t4232;
  t4236 = t4222 + t4235;
  t3984 = t2925*t1686;
  t4273 = -1.*t97*t103*t4221;
  t4275 = t112*t4232;
  t4282 = t4273 + t4275;
  t3988 = t2897*t1312;
  t3994 = t2904*t1138;
  t4250 = t87*t4236;
  t4255 = t978*t985*t4221;
  t4271 = t4250 + t4255;
  t4240 = -1.*t985*t4236;
  t4241 = t87*t978*t4221;
  t4247 = t4240 + t4241;
  t4028 = t2932*t1340;
  t4031 = -1.*t2925*t1783;
  t4043 = -1.*t2897*t1340;
  t4044 = -1.*t2904*t1873;
  t3258 = t97*t103*t2588;
  t3260 = -1.*t3259*t978*t3221;
  t3279 = -1.*t97*t978*t99*t2588;
  t3281 = t97*t3221*t1649;
  t3317 = -1.*t97*t103*t2588;
  t3318 = t3259*t978*t3221;
  t4452 = Power(t112,2);
  t3325 = -1.*t97*t978*t2588*t146;
  t3345 = -1.*t97*t3221*t1672;
  t3424 = t3259*t978*t3378;
  t3426 = -1.*t97*t103*t2925;
  t3434 = t97*t978*t2925*t691;
  t3437 = -1.*t97*t3378*t1686;
  t3472 = -1.*t3259*t978*t3378;
  t3474 = t97*t103*t2925;
  t3483 = -1.*t97*t978*t2925*t721;
  t3491 = t97*t3378*t1701;
  t4430 = t978*t112*t2461;
  t4439 = -1.*t103*t2481;
  t4441 = t4430 + t2591 + t4439;
  t3572 = t978*t112*t2588;
  t3581 = t2588*t1075;
  t3587 = t2461*t1649;
  t4467 = t978*t99*t2481;
  t4468 = t2461*t1075;
  t4469 = t4467 + t4468 + t2595;
  t3626 = -1.*t978*t112*t2588;
  t4494 = -1.*t978*t112*t2461;
  t4496 = t103*t2481;
  t4503 = t4494 + t2708 + t4496;
  t4525 = t978*t2481*t146;
  t4526 = -1.*t2461*t1090;
  t4527 = t4525 + t2728 + t4526;
  t3644 = -1.*t2461*t1672;
  t3645 = -1.*t2588*t1090;
  t4553 = t103*t2796;
  t4554 = -1.*t978*t112*t2859;
  t4555 = t4553 + t4554 + t2930;
  t3690 = -1.*t978*t112*t2925;
  t3703 = -1.*t2925*t1121;
  t3720 = -1.*t2859*t1686;
  t4629 = -1.*t978*t2796*t691;
  t4642 = -1.*t2859*t1121;
  t4644 = t4629 + t4642 + t2951;
  t3742 = t978*t112*t2925;
  t4655 = -1.*t103*t2796;
  t4660 = t978*t112*t2859;
  t4661 = t4655 + t4660 + t3017;
  t4722 = t978*t2796*t721;
  t4724 = t2859*t1172;
  t4727 = t4722 + t3038 + t4724;
  t3753 = t2859*t1701;
  t3757 = t2925*t1172;
  t3842 = -1.*t97*t978*t3839;
  t3851 = t3839*t1649;
  t3852 = t2588*t1672;
  t3879 = t97*t978*t3839;
  t4907 = Power(t978,2);
  t3891 = -1.*t2588*t161;
  t3892 = -1.*t3839*t1672;
  t3975 = -1.*t97*t978*t3971;
  t3987 = t3971*t1701;
  t4016 = t97*t978*t3971;
  t4030 = -1.*t3971*t1686;
  t4969 = 5.e-6*t1686;
  t4971 = t4661*t1686;
  t4283 = -1.*t97*t978*t4282;
  t4984 = t978*t2796*t691;
  t4988 = t2859*t1121;
  t4312 = t4282*t1701;
  t4384 = t97*t978*t4282;
  t5003 = t4555*t1783;
  t5012 = -1.*t978*t2796*t1325;
  t4395 = -1.*t4282*t1686;
  t5014 = -1.*t2859*t1331;
  t4514 = t978*t2481;
  t4517 = t103*t3238;
  t4535 = -1.*t103*t2481*t146;
  t4536 = t978*t3238*t146;
  t4473 = -1.*t99*t103*t2481;
  t4474 = t978*t99*t3238;
  t4459 = -1.*t978*t2481;
  t4462 = -1.*t103*t3238;
  t4678 = -1.*t978*t2796;
  t4680 = -1.*t103*t3388;
  t4696 = -1.*t103*t2796*t721;
  t4699 = t978*t3388*t721;
  t4583 = t978*t2796;
  t4585 = t103*t3388;
  t4595 = t103*t2796*t691;
  t4597 = -1.*t978*t3388*t691;
  t5126 = -1.*t978*t2417;
  t5127 = t4439 + t5126;
  t4912 = t4907*t99*t3801;
  t4915 = -1.*t978*t2481*t146;
  t5093 = t978*t2417;
  t5094 = t4496 + t5093;
  t5148 = -1.*t99*t103*t2417;
  t5149 = t2459*t146;
  t4948 = t4907*t3801*t146;
  t5265 = Power(t103,2);
  t5167 = -1.*t978*t2802;
  t5168 = t4655 + t5167;
  t4987 = t4907*t3914*t721;
  t5213 = t978*t2802;
  t5215 = t4553 + t5213;
  t5005 = -1.*t4907*t3914*t691;
  t5305 = 5.e-6*t978*t691;
  t5180 = t2814*t781;
  t5188 = -1.*t103*t2802*t721;
  t5194 = t5180 + t4722 + t5188;
  t5242 = t103*t2802*t691;
  t5244 = -1.*t2814*t721;
  t5245 = t4629 + t5242 + t5244;
  t5346 = t978*t5168*t691;
  t5347 = -1.*t103*t2802*t691;
  t5353 = t2814*t721;
  t5055 = t4907*t4221*t721;
  t5369 = t978*t5215*t1325;
  t5386 = -1.*t2814*t691;
  t5073 = -1.*t4907*t4221*t691;
  t5388 = t103*t2802*t1325;
  t5472 = 5.e-6*t721;
  t5474 = -0.009008821*t691*t769;
  t5475 = 0.124881*t721;
  t5479 = 0.0875*t1325;
  t5481 = t5475 + t5479;
  t5483 = 0.241*t659*t5481;
  p_output1[0]=var2[7]*(-0.5*(0.000736496*t1080 - 0.048889888*t1101 + 0.241*t1138*t659 + 0.241*t1178*t769)*var2[4] - 0.5*(0.000736496*t161*t87 - 0.048889888*t242*t87 + 0.241*t659*t735*t87 + 0.241*t769*t862*t87)*var2[5] - 0.5*(0.000736496*t1022 - 0.048889888*t1031 + 0.241*t1055*t659 + 0.241*t1062*t769)*var2[6] - 0.5*(-0.048889888*t1262 + 0.000736496*t1298 + t1314 + t1341)*var2[7] - 0.5*(t1314 + t1341 + 0.241*t1312*t1399 + 0.241*t1414*t1423)*var2[8]);
  p_output1[1]=var2[7]*(-0.5*(0.000736496*(-1.*t1080*t1435 - 1.*t1444*t1649) - 0.048889888*(-1.*t1101*t1435 - 1.*t1444*t1672) + 0.241*(-1.*t1138*t1435 - 1.*t1444*t1686)*t659 + 0.241*(-1.*t1178*t1435 - 1.*t1444*t1701)*t769)*var2[3] - 0.5*(-0.000736496*t1444*t1605 + 0.048889888*t1444*t1610 - 0.241*t1444*t1618*t659 - 0.241*t1444*t1634*t769)*var2[4] - 0.5*(0.000736496*(t1075*t1435 + t1444*t161*t985) - 0.048889888*(t1090*t1435 + t1444*t242*t985) + 0.241*t659*(t1121*t1435 + t1444*t735*t985) + 0.241*t769*(t1172*t1435 + t1444*t862*t985))*var2[5] - 0.5*(-0.048889888*(-1.*t1444*t1525 + t1435*t146*t97*t978) + 0.241*t659*(-1.*t1444*t1547 - 1.*t1435*t691*t97*t978) + 0.241*t769*(-1.*t1444*t1557 - 1.*t1435*t721*t97*t978) + 0.000736496*(-1.*t1444*t1454 - 1.*t1435*t97*t978*t99))*var2[6] - 0.5*(-0.048889888*(t1435*t161 - 1.*t1444*t1731) + 0.000736496*t1760 + t1772 + t1883)*var2[7] - 0.5*(0.241*t1399*t1771 + t1772 + t1883 + 0.241*t1414*t1906)*var2[8]);
  p_output1[2]=var2[7]*(-0.5*(0.000736496*(-1.*t1080*t1444 + t1435*t1649) - 0.048889888*t1760 + 0.241*t1771*t659 + 0.241*t1906*t769)*var2[3] - 0.5*(0.000736496*t1435*t1605 - 0.048889888*t1435*t1610 + 0.241*t1435*t1618*t659 + 0.241*t1435*t1634*t769)*var2[4] - 0.5*(0.000736496*(t1075*t1444 - 1.*t1435*t161*t985) - 0.048889888*(t1090*t1444 - 1.*t1435*t242*t985) + 0.241*t659*(t1121*t1444 - 1.*t1435*t735*t985) + 0.241*t769*(t1172*t1444 - 1.*t1435*t862*t985))*var2[5] - 0.5*(-0.048889888*(t1435*t1525 + t1444*t146*t97*t978) + 0.241*t659*(t1435*t1547 - 1.*t1444*t691*t97*t978) + 0.241*t769*(t1435*t1557 - 1.*t1444*t721*t97*t978) + 0.000736496*(t1435*t1454 - 1.*t1444*t97*t978*t99))*var2[6] - 0.5*(0.000736496*(t1101*t1435 + t1444*t1672) - 0.048889888*(t1444*t161 + t1435*t1731) + t2256 + t2279)*var2[7] - 0.5*(0.241*t1414*(t1178*t1435 + t1444*t1701) + 0.241*t1399*t2252 + t2256 + t2279)*var2[8]);
  p_output1[3]=var2[7]*(-0.5*(0.000085*t1080 + 5.e-6*t1178 + 0.015477*t2339 - 0.048889888*((-1.*t2371*t2493 - 1.*t2493*t2506 - 1.*t2339*t2530 - 1.*t2339*t2538)*t2568 + t2506*(t1605*t2493 + t1080*t2530 + t1080*t2538 + t2493*t2568) + t1080*t2592 + t2339*t2604) + 0.000736496*(t2506*(-1.*t1298*t2493 - 1.*t1610*t2493 - 1.*t1101*t2530 - 1.*t1101*t2538) + t1298*(t2371*t2493 + t2493*t2506 + t2339*t2530 + t2339*t2538) + t1101*t2718 + t2339*t2739) + 0.241*(t2506*(t1178*t2873 + t1178*t2897 + t1423*t2904 + t1634*t2904) + t1423*(-1.*t2339*t2873 - 1.*t2339*t2897 - 1.*t2371*t2904 - 1.*t2506*t2904) + t1178*t3019 + t2339*t3090)*t659 + 0.241*(t2506*(-1.*t1138*t2873 - 1.*t1138*t2897 - 1.*t1312*t2904 - 1.*t1618*t2904) + t1312*(t2339*t2873 + t2339*t2897 + t2371*t2904 + t2506*t2904) + t1138*t2932 + t2339*t2969)*t769 + 1.e-5*(t146*t87*t978 + t1090*t985))*var2[4] - 0.5*(0.000085*t161*t87 - 1.e-5*t242*t87 + 5.e-6*t862*t87 - 0.015477*t87*t97*t978 - 0.048889888*(t161*t2592*t87 - 1.*t2604*t87*t97*t978 + t2506*(t3581 + t3587 + t161*t2538*t87 + t2568*t3552*t87 - 1.*t161*t2493*t985 - 1.*t1080*t3552*t985) + t2568*(t3572 - 1.*t2506*t3552*t87 - 1.*t2461*t97*t978 + t2538*t87*t97*t978 + t2339*t3552*t985 - 1.*t2493*t97*t978*t985)) + 0.000736496*(t242*t2718*t87 - 1.*t2739*t87*t97*t978 + t2506*(t3644 + t3645 - 1.*t242*t2538*t87 - 1.*t1298*t3552*t87 + t242*t2493*t985 + t1101*t3552*t985) + t1298*(t3626 + t2506*t3552*t87 + t2461*t97*t978 - 1.*t2538*t87*t97*t978 - 1.*t2339*t3552*t985 + t2493*t97*t978*t985)) + 0.241*t659*(t3019*t862*t87 - 1.*t3090*t87*t97*t978 + t2506*(t3753 + t3757 + t1423*t3682*t87 + t2897*t862*t87 - 1.*t1178*t3682*t985 - 1.*t2904*t862*t985) + t1423*(t3742 - 1.*t2506*t3682*t87 - 1.*t2859*t97*t978 + t2897*t87*t97*t978 + t2339*t3682*t985 - 1.*t2904*t97*t978*t985)) + 0.241*t769*(t2932*t735*t87 - 1.*t2969*t87*t97*t978 + t2506*(t3703 + t3720 - 1.*t1312*t3682*t87 - 1.*t2897*t735*t87 + t1138*t3682*t985 + t2904*t735*t985) + t1312*(t3690 + t2506*t3682*t87 + t2859*t97*t978 - 1.*t2897*t87*t97*t978 - 1.*t2339*t3682*t985 + t2904*t97*t978*t985)))*var2[5] - 0.5*(0.000085*t1022 + 5.e-6*t1062 + 0.015477*t3146 - 0.048889888*(t1022*t2592 + t2604*t3146 + t2568*(-1.*t2538*t3146 - 1.*t2493*t3194 - 1.*t2339*t3246 - 1.*t2506*t3256 + t3258 + t3260) + t2506*(t1454*t2493 + t1022*t2538 + t1080*t3246 + t2568*t3256 + t3279 + t3281)) + 0.000736496*(t1031*t2718 + t2739*t3146 + t1298*(t2538*t3146 + t2493*t3194 + t2339*t3246 + t2506*t3256 + t3317 + t3318) + t2506*(-1.*t1525*t2493 - 1.*t1031*t2538 - 1.*t1101*t3246 - 1.*t1298*t3256 + t3325 + t3345)) + 0.241*(t1062*t3019 + t3090*t3146 + t1423*(-1.*t2897*t3146 - 1.*t2904*t3194 - 1.*t2339*t3403 - 1.*t2506*t3416 + t3472 + t3474) + t2506*(t1062*t2897 + t1557*t2904 + t1178*t3403 + t1423*t3416 + t3483 + t3491))*t659 + 0.241*(t1055*t2932 + t2969*t3146 + t1312*(t2897*t3146 + t2904*t3194 + t2339*t3403 + t2506*t3416 + t3424 + t3426) + t2506*(-1.*t1055*t2897 - 1.*t1547*t2904 - 1.*t1138*t3403 - 1.*t1312*t3416 + t3434 + t3437))*t769 + 1.e-5*(t112*t146*t87*t978 - 1.*t103*t146*t985))*var2[6] - 0.5*(0.000085*t1298 - 0.048889888*(t1298*t2592 + t2568*(-1.*t2339*t3815 - 1.*t2506*t3823 + t3842) + t2506*(t1101*t2493 + t1298*t2538 + t1080*t3815 + t2568*t3823 + t3851 + t3852)) + 0.000736496*(t1262*t2718 + t1298*(t2339*t3815 + t2506*t3823 + t3879) + t2506*(-1.*t1731*t2493 - 1.*t1262*t2538 - 1.*t1101*t3815 - 1.*t1298*t3823 + t3891 + t3892)) + t3907 + 0.241*(t3908 + t1423*(-1.*t2339*t3951 - 1.*t2506*t3959 + t3975) + t2506*(t1178*t3951 + t1423*t3959 + t3984 + t3987 + t3988 + t3994))*t659 + 0.241*(t1312*(t2339*t3951 + t2506*t3959 + t4016) + t4028 + t2506*(-1.*t1138*t3951 - 1.*t1312*t3959 + t4030 + t4031 + t4043 + t4044))*t769 + 1.e-5*(t2558 - 1.*t1241*t87))*var2[7] - 0.5*(0.241*t1414*(t1312*t2932 + t2506*t2969) + 0.241*t1399*(t1423*t3019 + t2506*t3090) + t3907 + 0.241*(t3908 + t1423*(-1.*t2339*t4247 - 1.*t2506*t4271 + t4283) + t2506*(t3984 + t3988 + t3994 + t1178*t4247 + t1423*t4271 + t4312))*t659 + 0.241*(t4028 + t1312*(t2339*t4247 + t2506*t4271 + t4384) + t2506*(t4031 + t4043 + t4044 - 1.*t1138*t4247 - 1.*t1312*t4271 + t4395))*t769)*var2[8]);
  p_output1[4]=var2[7]*(-0.5*(0.000085*t1075 + 5.e-6*t1172 - 0.015477*t112*t978 + 0.000736496*(t1090*t4503 - 1.*t112*t4527*t978 + (-1.*t242*t2461 - 1.*t1090*t3552 + t3644 + t3645)*t97*t978 + t1672*(t3626 - 1.*t112*t3552*t978)) - 0.048889888*(t1075*t4441 - 1.*t112*t4469*t978 + (t161*t2461 + t1075*t3552 + t3581 + t3587)*t97*t978 + t1649*(t3572 + t112*t3552*t978)) + 0.241*t769*(t1121*t4555 - 1.*t112*t4644*t978 + (-1.*t1121*t3682 + t3703 + t3720 - 1.*t2859*t735)*t97*t978 + t1686*(t3690 - 1.*t112*t3682*t978)) + 0.241*t659*(t1172*t4661 - 1.*t112*t4727*t978 + (t1172*t3682 + t3753 + t3757 + t2859*t862)*t97*t978 + t1701*(t3742 + t112*t3682*t978)) + 1.e-5*(t103*t112*t146 - 1.*t97*t99))*var2[5] - 0.5*(-0.015477*t103*t97 - 1.e-5*t146*t97*t978 - 5.e-6*t721*t97*t978 + 0.000736496*(-1.*t103*t4527*t97 + t146*t4503*t97*t978 + t97*t978*(t1090*t112*t3221 + t3325 + t3345 + t4535 + t4536 + t112*t146*t2461*t978) + t1672*(t103*t112*t2461 + t3317 + t3318 + t4514 + t4517 + t3221*t4452*t978)) + 0.241*t769*(-1.*t103*t4644*t97 - 1.*t4555*t691*t97*t978 + t1686*(t103*t112*t2859 + t3424 + t3426 + t4583 + t4585 + t3378*t4452*t978) + t97*t978*(t112*t1121*t3378 + t3434 + t3437 + t4595 + t4597 - 1.*t112*t2859*t691*t978)) + 0.241*t659*(-1.*t103*t4727*t97 - 1.*t4661*t721*t97*t978 + t1701*(-1.*t103*t112*t2859 + t3472 + t3474 + t4678 + t4680 - 1.*t3378*t4452*t978) + t97*t978*(-1.*t112*t1172*t3378 + t3483 + t3491 + t4696 + t4699 + t112*t2859*t721*t978)) - 0.000085*t97*t978*t99 - 0.048889888*(-1.*t103*t4469*t97 + t1649*(-1.*t103*t112*t2461 + t3258 + t3260 + t4459 + t4462 - 1.*t3221*t4452*t978) - 1.*t4441*t97*t978*t99 + t97*t978*(-1.*t1075*t112*t3221 + t3279 + t3281 + t4473 + t4474 + t112*t2461*t978*t99)))*var2[6] - 0.5*(1.e-5*t1649 + 0.000085*t1672 + t4969 + 0.000736496*(t161*t4503 + (-1.*t1241*t2461 - 1.*t1090*t3806 + t3891 + t3892 + t4467 + t4948)*t97*t978 + t1672*(t3879 + t103*t3801*t978 - 1.*t112*t3806*t978)) - 0.048889888*(t1672*t4441 + (t1090*t2461 + t1075*t3806 + t3851 + t3852 + t4912 + t4915)*t97*t978 + t1649*(t3842 - 1.*t103*t3801*t978 + t112*t3806*t978)) + 0.241*t769*(t5003 + (-1.*t1121*t3921 + t4030 + t4031 + t5005 + t5012 + t5014)*t97*t978 + t1686*(t4016 + t103*t3914*t978 - 1.*t112*t3921*t978)) + 0.241*t659*(t4971 + (t1172*t3921 + t3984 + t3987 + t4984 + t4987 + t4988)*t97*t978 + t1701*(t3975 - 1.*t103*t3914*t978 + t112*t3921*t978)))*var2[7] - 0.5*(t4969 + 0.241*t1414*(t1686*t4555 + t4644*t97*t978) + 0.241*t1399*(t1701*t4661 + t4727*t97*t978) + 0.241*t769*(t5003 + (t4031 - 1.*t1121*t4236 + t4395 + t5012 + t5014 + t5073)*t97*t978 + t1686*(t4384 + t103*t4221*t978 - 1.*t112*t4236*t978)) + 0.241*t659*(t4971 + (t3984 + t1172*t4236 + t4312 + t4984 + t4988 + t5055)*t97*t978 + t1701*(t4283 - 1.*t103*t4221*t978 + t112*t4236*t978)))*var2[8]);
  p_output1[5]=var2[7]*(-0.5*(-1.e-5*t103*t146 - 5.e-6*t103*t721 + 0.015477*t978 + 0.241*t769*(-1.*t103*t5215*t691 + t5245*t978 + t691*t978*(-1.*t103*t2802 + t4583 + t4585 + t3378*t978) + t103*(t4595 + t4597 + t103*t3378*t691 + t2802*t691*t978)) + 0.241*t659*(-1.*t103*t5168*t721 + t5194*t978 + t721*t978*(t103*t2802 + t4678 + t4680 - 1.*t3378*t978) + t103*(t4696 + t4699 - 1.*t103*t3378*t721 - 1.*t2802*t721*t978)) - 0.000085*t103*t99 + 0.000736496*(t103*t146*t5094 + t103*(-1.*t103*t146*t3221 + t4535 + t4536 - 1.*t146*t2417*t978) - 1.*t146*t978*(-1.*t103*t2417 + t4514 + t4517 + t3221*t978) + t978*(-1.*t103*t146*t2417 + t4525 - 1.*t2459*t99)) - 0.048889888*((t4467 + t5148 + t5149)*t978 - 1.*t103*t5127*t99 + t978*(t103*t2417 + t4459 + t4462 - 1.*t3221*t978)*t99 + t103*(t4473 + t4474 - 1.*t103*t3221*t99 - 1.*t2417*t978*t99)))*var2[6] - 0.5*(t5305 + 0.241*(t5369 + t103*(t5005 + t5012 + t5386 + t5388 - 1.*t3914*t5265*t691 - 1.*t2786*t721))*t769 + 0.241*t659*(t5346 + t103*(t4984 + t4987 + t5347 + t5353 + t3914*t5265*t721 + t2786*t781)) - 0.000085*t146*t978 + 1.e-5*t978*t99 + 0.000736496*(-1.*t5094*t978*t99 + t103*(t4467 + t4948 + t5148 + t5149 + t146*t3801*t5265 - 1.*t2412*t99)) - 0.048889888*(-1.*t146*t5127*t978 + t103*(t146*t2412 + t103*t146*t2417 + t4912 + t4915 + t2459*t99 + t3801*t5265*t99)))*var2[7] - 0.5*(t5305 + 0.241*(t5369 + t103*(t5012 + t5073 + t5386 + t5388 - 1.*t4221*t5265*t691 - 1.*t4232*t721))*t769 + 0.241*t659*(t5346 + t103*(t4984 + t5055 + t5347 + t5353 + t4221*t5265*t721 + t4232*t781)) + 0.241*t1414*(t103*t5245 + t5215*t691*t978) + 0.241*t1399*(t103*t5194 + t5168*t721*t978))*var2[8]);
  p_output1[6]=var2[7]*(-0.5*(0.00005198763696*t146 + t5472 + t5474 + t5483 - 0.00270221251488*t99)*var2[7] - 0.5*(t5472 + t5474 + t5483 - 0.009008821*t1414*t721 + 0.241*t1399*(0.0875*t691 + 0.124881*t781))*var2[8]);
  p_output1[7]=-0.5*(0.482*t1399*t659 + 0.482*t1414*t769)*var2[7]*var2[8];
  p_output1[8]=-0.5*(-0.02973458*t1399 + 0.000529236*t1414)*var2[7]*var2[8];
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec8_laikago_description.hh"

namespace SymFunction
{

void Ce1_vec8_laikago_description_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
