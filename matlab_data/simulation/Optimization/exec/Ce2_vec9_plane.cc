/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:52:39 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t242;
  double t554;
  double t197;
  double t567;
  double t855;
  double t877;
  double t914;
  double t171;
  double t635;
  double t818;
  double t854;
  double t950;
  double t1104;
  double t1429;
  double t1448;
  double t1458;
  double t1851;
  double t1854;
  double t532;
  double t577;
  double t619;
  double t631;
  double t937;
  double t1110;
  double t1113;
  double t1201;
  double t1316;
  double t1869;
  double t1949;
  double t1976;
  double t1977;
  double t2027;
  double t2043;
  double t2106;
  double t2168;
  double t2733;
  double t2736;
  double t2448;
  double t2449;
  double t2506;
  double t2852;
  double t2928;
  double t2942;
  double t1378;
  double t1478;
  double t1556;
  double t1721;
  double t1747;
  double t1758;
  double t2972;
  double t3084;
  double t3085;
  double t3120;
  double t3218;
  double t3252;
  double t3278;
  double t3283;
  double t3389;
  double t3667;
  double t3694;
  double t3725;
  double t3778;
  double t3661;
  double t3871;
  double t3929;
  double t3971;
  double t3982;
  double t4006;
  double t4020;
  double t4043;
  double t4046;
  double t4231;
  double t4263;
  double t4287;
  double t3941;
  double t4093;
  double t4123;
  double t4546;
  double t4618;
  double t4651;
  double t4687;
  double t4706;
  double t4765;
  double t5370;
  double t5371;
  double t5372;
  double t5369;
  double t5376;
  double t5328;
  double t5336;
  double t5349;
  double t4438;
  double t4496;
  double t4528;
  double t4848;
  double t5242;
  double t5350;
  double t5368;
  double t5419;
  double t5458;
  double t5789;
  double t5793;
  double t5794;
  double t5795;
  double t5815;
  double t5844;
  double t5845;
  double t5848;
  double t5849;
  double t5851;
  double t5852;
  double t5963;
  double t5965;
  double t5966;
  double t5868;
  double t5869;
  double t5875;
  double t5888;
  double t5890;
  double t5897;
  double t5903;
  double t5904;
  double t5909;
  double t5913;
  double t5914;
  double t5922;
  double t6036;
  double t6038;
  double t6042;
  double t6029;
  double t6030;
  double t6032;
  double t6044;
  double t6050;
  double t6052;
  double t6072;
  double t6075;
  double t6076;
  double t6094;
  double t6095;
  double t6097;
  double t6099;
  double t6101;
  double t6103;
  double t6034;
  double t6053;
  double t6054;
  double t6109;
  double t6110;
  double t6056;
  double t6057;
  double t6185;
  double t6186;
  double t6189;
  double t6179;
  double t6182;
  double t6183;
  double t6082;
  double t6208;
  double t6214;
  double t6215;
  double t6104;
  double t6112;
  double t6251;
  double t6255;
  double t6256;
  double t6240;
  double t6241;
  double t6245;
  double t6121;
  double t6184;
  double t6190;
  double t6191;
  double t6132;
  double t6142;
  double t6271;
  double t6277;
  double t6152;
  double t6156;
  double t6198;
  double t6199;
  double t6161;
  double t6165;
  double t6005;
  double t6009;
  double t6017;
  double t4903;
  double t4979;
  double t5063;
  double t5104;
  double t5170;
  double t5173;
  double t5293;
  double t5294;
  double t5295;
  double t5300;
  double t5375;
  double t5396;
  double t5416;
  double t5417;
  double t5420;
  double t5429;
  double t5472;
  double t5479;
  double t5493;
  double t5496;
  double t5498;
  double t5975;
  double t5995;
  double t6000;
  double t1845;
  double t2023;
  double t2248;
  double t2252;
  double t2407;
  double t2418;
  double t2540;
  double t2544;
  double t2771;
  double t2808;
  double t2873;
  double t2956;
  double t2957;
  double t3458;
  double t6420;
  double t6425;
  double t6429;
  double t5589;
  double t5590;
  double t5637;
  double t5650;
  double t5673;
  double t5723;
  double t5731;
  double t5739;
  double t5740;
  double t5748;
  double t5750;
  double t5752;
  double t5754;
  double t5757;
  double t5766;
  double t5512;
  double t5513;
  double t5535;
  double t5560;
  double t5570;
  double t5584;
  double t5967;
  double t5968;
  double t6001;
  double t6018;
  double t6021;
  double t5877;
  double t5898;
  double t5900;
  double t5911;
  double t5925;
  double t5926;
  double t6055;
  double t6062;
  double t6064;
  double t6069;
  double t6091;
  double t6098;
  double t6106;
  double t6107;
  double t6108;
  double t6111;
  double t6113;
  double t6114;
  double t6115;
  double t6077;
  double t6079;
  double t6080;
  double t6083;
  double t6085;
  double t6087;
  double t6120;
  double t6122;
  double t6123;
  double t6124;
  double t6125;
  double t6127;
  double t6129;
  double t6137;
  double t6143;
  double t6144;
  double t6146;
  double t6148;
  double t6149;
  double t6150;
  double t6153;
  double t6154;
  double t6155;
  double t6157;
  double t6158;
  double t6159;
  double t6163;
  double t6167;
  double t6168;
  double t6171;
  double t6192;
  double t6201;
  double t6204;
  double t6206;
  double t6218;
  double t6219;
  double t6222;
  double t6224;
  double t6227;
  double t6229;
  double t6233;
  double t6250;
  double t6257;
  double t6258;
  double t6266;
  double t6281;
  double t6284;
  double t6289;
  double t6290;
  double t6295;
  double t6308;
  double t6313;
  double t6317;
  double t6318;
  double t6319;
  double t6320;
  double t6321;
  double t6326;
  double t6327;
  double t6332;
  double t6334;
  double t6336;
  double t6340;
  double t6341;
  double t6345;
  double t6347;
  double t6348;
  double t6359;
  double t6360;
  double t6361;
  double t6363;
  double t6369;
  double t6370;
  double t6372;
  double t6373;
  double t6376;
  double t6378;
  double t6379;
  double t6384;
  double t6572;
  double t6577;
  double t6578;
  double t5855;
  double t5866;
  double t5901;
  double t5928;
  double t5960;
  double t6507;
  double t6511;
  double t6512;
  double t6516;
  double t6517;
  double t6207;
  double t6230;
  double t6303;
  double t6339;
  double t6391;
  double t6392;
  double t6649;
  double t6653;
  double t6654;
  double t6658;
  double t6659;
  double t6664;
  double t6547;
  double t6550;
  double t6554;
  double t6555;
  double t6556;
  double t6557;
  double t6745;
  double t6748;
  double t6749;
  double t6071;
  double t6089;
  double t6118;
  double t6147;
  double t6172;
  double t6174;
  double t6633;
  double t6635;
  double t6638;
  double t6639;
  double t6645;
  double t6646;
  double t6525;
  double t6529;
  double t6531;
  double t6532;
  double t6533;
  double t6544;
  double t6833;
  double t6834;
  double t6835;
  double t6762;
  double t6764;
  double t6774;
  double t6793;
  double t6795;
  double t6802;
  double t6814;
  double t6815;
  double t6821;
  double t6826;
  double t6828;
  double t6836;
  double t6839;
  double t4160;
  double t4363;
  double t4364;
  double t4413;
  double t5504;
  double t5506;
  double t6579;
  double t6580;
  double t6582;
  double t6587;
  double t6588;
  double t6589;
  double t6430;
  double t6431;
  double t6436;
  double t6437;
  double t6438;
  double t6439;
  double t6890;
  double t6891;
  double t6893;
  double t6894;
  double t6895;
  double t6896;
  double t6898;
  double t6741;
  double t6750;
  double t6755;
  double t6756;
  double t6760;
  double t6775;
  double t6778;
  double t5511;
  double t5558;
  double t5559;
  double t5585;
  double t5769;
  double t5770;
  double t6995;
  double t6996;
  double t6997;
  double t6999;
  double t7001;
  double t7002;
  double t6602;
  double t6609;
  double t6610;
  double t6612;
  double t6615;
  double t6616;
  double t6472;
  double t6473;
  double t6477;
  double t6480;
  double t6485;
  double t6486;
  double t6903;
  double t6906;
  double t6907;
  double t6915;
  double t6920;
  double t6921;
  double t6923;
  double t6780;
  double t6787;
  double t6788;
  double t6789;
  double t6790;
  double t6806;
  double t6810;
  double t6960;
  double t6962;
  double t6963;
  double t6964;
  double t6966;
  double t7022;
  double t7024;
  double t7025;
  double t7026;
  double t7027;
  double t2361;
  double t2838;
  double t3445;
  double t3472;
  double t3476;
  double t6593;
  double t6594;
  double t6596;
  double t6599;
  double t6600;
  double t6445;
  double t6446;
  double t6453;
  double t6456;
  double t6459;
  double t6870;
  double t6874;
  double t6876;
  double t6878;
  double t6882;
  double t6694;
  double t6696;
  double t6708;
  double t6712;
  double t6713;
  double t6952;
  double t6957;
  double t6958;
  double t7061;
  double t7062;
  double t7063;
  double t7015;
  double t7016;
  double t7017;
  double t1367;
  double t1768;
  double t1783;
  double t6564;
  double t6565;
  double t6567;
  double t6405;
  double t6409;
  double t6412;
  double t6856;
  double t6858;
  double t6867;
  double t6683;
  double t6685;
  double t6690;
  t242 = Cos(var1[8]);
  t554 = Sin(var1[7]);
  t197 = Cos(var1[7]);
  t567 = Sin(var1[8]);
  t855 = -1.*t242*t554;
  t877 = -1.*t197*t567;
  t914 = t855 + t877;
  t171 = Sin(var1[4]);
  t635 = Cos(var1[4]);
  t818 = Cos(var1[6]);
  t854 = Sin(var1[5]);
  t950 = Cos(var1[5]);
  t1104 = Sin(var1[6]);
  t1429 = -1.*t197*t242;
  t1448 = t554*t567;
  t1458 = t1429 + t1448;
  t1851 = -1.*t242;
  t1854 = 1. + t1851;
  t532 = t197*t242;
  t577 = -1.*t554*t567;
  t619 = t532 + t577;
  t631 = t171*t619;
  t937 = -1.*t818*t854*t914;
  t1110 = t950*t1104*t914;
  t1113 = t937 + t1110;
  t1201 = t635*t1113;
  t1316 = t631 + t1201;
  t1869 = 0.100689*t1854;
  t1949 = 0.080689*t242;
  t1976 = -0.16*t567;
  t1977 = t1869 + t1949 + t1976;
  t2027 = -0.20833*t1854;
  t2043 = -0.36833*t242;
  t2106 = 0.02*t567;
  t2168 = t2027 + t2043 + t2106;
  t2733 = -0.16*t242;
  t2736 = t2733 + t2106;
  t2448 = 0.02*t242;
  t2449 = 0.16*t567;
  t2506 = t2448 + t2449;
  t2852 = t242*t2168;
  t2928 = -0.242889*t567;
  t2942 = t1977*t567;
  t1378 = t171*t914;
  t1478 = -1.*t818*t854*t1458;
  t1556 = t950*t1104*t1458;
  t1721 = t1478 + t1556;
  t1747 = t635*t1721;
  t1758 = t1378 + t1747;
  t2972 = t242*t554;
  t3084 = t197*t567;
  t3085 = t2972 + t3084;
  t3120 = t171*t3085;
  t3218 = -1.*t818*t854*t619;
  t3252 = t950*t1104*t619;
  t3278 = t3218 + t3252;
  t3283 = t635*t3278;
  t3389 = t3120 + t3283;
  t3667 = 0.242889*t554;
  t3694 = -1.*t554*t1977;
  t3725 = t197*t2168;
  t3778 = t3667 + t3694 + t3725;
  t3661 = 0.032875*t1104;
  t3871 = t818*t3778;
  t3929 = t3661 + t3871;
  t3971 = -1.*t818;
  t3982 = 1. + t3971;
  t4006 = -0.081715*t3982;
  t4020 = -0.11459*t818;
  t4043 = t1104*t3778;
  t4046 = t4006 + t4020 + t4043;
  t4231 = -1.*t1104*t3929;
  t4263 = t818*t4046;
  t4287 = t4231 + t4263;
  t3941 = t1104*t3929;
  t4093 = -1.*t818*t4046;
  t4123 = t3941 + t4093;
  t4546 = -1.*t197;
  t4618 = 1. + t4546;
  t4651 = 0.242889*t4618;
  t4687 = t197*t1977;
  t4706 = t554*t2168;
  t4765 = t4651 + t4687 + t4706;
  t5370 = -1.*t554*t2736;
  t5371 = t197*t2506;
  t5372 = t5370 + t5371;
  t5369 = Power(t818,2);
  t5376 = Power(t1104,2);
  t5328 = t197*t2736;
  t5336 = t554*t2506;
  t5349 = t5328 + t5336;
  t4438 = t950*t818;
  t4496 = t854*t1104;
  t4528 = t4438 + t4496;
  t4848 = -1.*t4765*t3085;
  t5242 = t4765*t619;
  t5350 = -1.*t5349*t3085;
  t5368 = -1.*t4765*t619;
  t5419 = t4765*t914;
  t5458 = t5349*t619;
  t5789 = Sin(var1[3]);
  t5793 = t950*t818*t914;
  t5794 = t854*t1104*t914;
  t5795 = t5793 + t5794;
  t5815 = t5789*t5795;
  t5844 = Cos(var1[3]);
  t5845 = t635*t619;
  t5848 = -1.*t171*t1113;
  t5849 = t5845 + t5848;
  t5851 = t5844*t5849;
  t5852 = t5815 + t5851;
  t5963 = t5844*t5795;
  t5965 = -1.*t5789*t5849;
  t5966 = t5963 + t5965;
  t5868 = t950*t818*t619;
  t5869 = t854*t1104*t619;
  t5875 = t5868 + t5869;
  t5888 = t635*t3085;
  t5890 = -1.*t171*t3278;
  t5897 = t5888 + t5890;
  t5903 = t950*t818*t1458;
  t5904 = t854*t1104*t1458;
  t5909 = t5903 + t5904;
  t5913 = t635*t914;
  t5914 = -1.*t171*t1721;
  t5922 = t5913 + t5914;
  t6036 = t818*t854;
  t6038 = -1.*t950*t1104;
  t6042 = t6036 + t6038;
  t6029 = -1.*t854*t3929;
  t6030 = t950*t4046;
  t6032 = t6029 + t6030;
  t6044 = t950*t3929;
  t6050 = t854*t4046;
  t6052 = t6044 + t6050;
  t6072 = -1.*t4528*t6032;
  t6075 = -1.*t6042*t6052;
  t6076 = t6072 + t6075;
  t6094 = -1.*t818*t854*t5372;
  t6095 = t950*t1104*t5372;
  t6097 = t6094 + t6095;
  t6099 = t950*t818*t5372;
  t6101 = t854*t1104*t5372;
  t6103 = t6099 + t6101;
  t6034 = t4528*t6032;
  t6053 = t6042*t6052;
  t6054 = t6034 + t6053;
  t6109 = t6032*t1113;
  t6110 = t6052*t5795;
  t6056 = -1.*t6032*t1113;
  t6057 = -1.*t6052*t5795;
  t6185 = t635*t6032;
  t6186 = t171*t4765;
  t6189 = t6185 + t6186;
  t6179 = -1.*t171*t6032;
  t6182 = t635*t4765;
  t6183 = t6179 + t6182;
  t6082 = t6052*t5875;
  t6208 = t171*t4528*t6183;
  t6214 = -1.*t635*t4528*t6189;
  t6215 = t6075 + t6208 + t6214;
  t6104 = -1.*t6042*t6103;
  t6112 = t6103*t5875;
  t6251 = t635*t6097;
  t6255 = t171*t5349;
  t6256 = t6251 + t6255;
  t6240 = -1.*t171*t6097;
  t6241 = t635*t5349;
  t6245 = t6240 + t6241;
  t6121 = t6042*t6103;
  t6184 = -1.*t171*t4528*t6183;
  t6190 = t635*t4528*t6189;
  t6191 = t6053 + t6184 + t6190;
  t6132 = -1.*t6103*t5795;
  t6142 = -1.*t6052*t5909;
  t6271 = t6189*t1316;
  t6277 = t6183*t5849;
  t6152 = -1.*t6052*t5875;
  t6156 = -1.*t6103*t5875;
  t6198 = -1.*t6189*t1316;
  t6199 = -1.*t6183*t5849;
  t6161 = t6103*t5795;
  t6165 = t6052*t5909;
  t6005 = t5844*t5909;
  t6009 = -1.*t5789*t5922;
  t6017 = t6005 + t6009;
  t4903 = -1.*t818*t3929*t619;
  t4979 = -1.*t1104*t4046*t619;
  t5063 = t4848 + t4903 + t4979;
  t5104 = t914*t5063;
  t5170 = t818*t3929*t914;
  t5173 = t1104*t4046*t914;
  t5293 = t5170 + t5173 + t5242;
  t5294 = t619*t5293;
  t5295 = -1.*t818*t3929*t914;
  t5300 = -1.*t1104*t4046*t914;
  t5375 = -1.*t5369*t5372*t619;
  t5396 = -1.*t5376*t5372*t619;
  t5416 = t5295 + t5300 + t5350 + t5368 + t5375 + t5396;
  t5417 = t619*t5416;
  t5420 = t5369*t5372*t914;
  t5429 = t5376*t5372*t914;
  t5472 = t818*t3929*t1458;
  t5479 = t1104*t4046*t1458;
  t5493 = t5419 + t5420 + t5429 + t5458 + t5472 + t5479;
  t5496 = t3085*t5493;
  t5498 = t5104 + t5294 + t5417 + t5496;
  t5975 = t5844*t5875;
  t5995 = -1.*t5789*t5897;
  t6000 = t5975 + t5995;
  t1845 = 0.242889*t242;
  t2023 = -1.*t242*t1977;
  t2248 = t2168*t567;
  t2252 = t1845 + t2023 + t2248;
  t2407 = -0.242889*t242;
  t2418 = t242*t1977;
  t2540 = t242*t2506;
  t2544 = -1.*t2168*t567;
  t2771 = t2736*t567;
  t2808 = t2407 + t2418 + t2540 + t2544 + t2771;
  t2873 = -1.*t242*t2736;
  t2956 = t2506*t567;
  t2957 = t2852 + t2873 + t2928 + t2942 + t2956;
  t3458 = t2852 + t2928 + t2942;
  t6420 = t5844*t6042;
  t6425 = t5789*t171*t4528;
  t6429 = t6420 + t6425;
  t5589 = -1.*t3778*t619;
  t5590 = t4848 + t5589;
  t5637 = -1.*t914*t5590;
  t5650 = t3778*t914;
  t5673 = t5650 + t5242;
  t5723 = -1.*t619*t5673;
  t5731 = -1.*t3778*t914;
  t5739 = -1.*t5372*t619;
  t5740 = t5731 + t5350 + t5368 + t5739;
  t5748 = -1.*t619*t5740;
  t5750 = t5372*t914;
  t5752 = t3778*t1458;
  t5754 = t5419 + t5750 + t5458 + t5752;
  t5757 = -1.*t3085*t5754;
  t5766 = t5637 + t5723 + t5748 + t5757;
  t5512 = -0.11459*t619;
  t5513 = -0.081715*t1458;
  t5535 = t5512 + t5513;
  t5560 = -0.081715*t914;
  t5570 = -0.11459*t3085;
  t5584 = t5560 + t5570;
  t5967 = 0.241*t3389*t5966;
  t5968 = 0.241*t1758*t5966;
  t6001 = 0.241*t1316*t6000;
  t6018 = 0.241*t1316*t6017;
  t6021 = t5967 + t5968 + t6001 + t6018;
  t5877 = t5789*t5875;
  t5898 = t5844*t5897;
  t5900 = t5877 + t5898;
  t5911 = t5789*t5909;
  t5925 = t5844*t5922;
  t5926 = t5911 + t5925;
  t6055 = t6054*t5795;
  t6062 = t5368 + t6056 + t6057;
  t6064 = t6042*t6062;
  t6069 = t6055 + t6064;
  t6091 = t6076*t5795;
  t6098 = -1.*t4528*t6097;
  t6106 = t6098 + t6104;
  t6107 = t6106*t5875;
  t6108 = t5349*t3085;
  t6111 = t6097*t3278;
  t6113 = t6108 + t5242 + t6109 + t6110 + t6111 + t6112;
  t6114 = t6042*t6113;
  t6115 = t6091 + t6107 + t6114;
  t6077 = t6076*t5875;
  t6079 = t4765*t3085;
  t6080 = t6032*t3278;
  t6083 = t6079 + t6080 + t6082;
  t6085 = t6042*t6083;
  t6087 = t6077 + t6085;
  t6120 = t4528*t6097;
  t6122 = t6120 + t6121;
  t6123 = t6122*t5795;
  t6124 = t6054*t5909;
  t6125 = -1.*t4765*t914;
  t6127 = -1.*t5349*t619;
  t6129 = -1.*t6097*t1113;
  t6137 = -1.*t6032*t1721;
  t6143 = t6125 + t6127 + t6129 + t6132 + t6137 + t6142;
  t6144 = t6042*t6143;
  t6146 = t6123 + t6124 + t6144;
  t6148 = t5242 + t6109 + t6110;
  t6149 = t5795*t6148;
  t6150 = -1.*t6032*t3278;
  t6153 = t4848 + t6150 + t6152;
  t6154 = t5909*t6153;
  t6155 = -1.*t6097*t3278;
  t6157 = t5350 + t5368 + t6056 + t6057 + t6155 + t6156;
  t6158 = t5795*t6157;
  t6159 = t6097*t1113;
  t6163 = t6032*t1721;
  t6167 = t5419 + t5458 + t6159 + t6161 + t6163 + t6165;
  t6168 = t5875*t6167;
  t6171 = t6149 + t6154 + t6158 + t6168;
  t6192 = t6191*t1316;
  t6201 = t6057 + t6198 + t6199;
  t6204 = t635*t4528*t6201;
  t6206 = t6192 + t6204;
  t6218 = t6215*t3389;
  t6219 = t6189*t3389;
  t6222 = t6183*t5897;
  t6224 = t6082 + t6219 + t6222;
  t6227 = t635*t4528*t6224;
  t6229 = t6218 + t6227;
  t6233 = t6215*t1316;
  t6250 = t171*t4528*t6245;
  t6257 = -1.*t635*t4528*t6256;
  t6258 = t6104 + t6250 + t6257;
  t6266 = t6258*t3389;
  t6281 = t6256*t3389;
  t6284 = t6245*t5897;
  t6289 = t6110 + t6112 + t6271 + t6277 + t6281 + t6284;
  t6290 = t635*t4528*t6289;
  t6295 = t6233 + t6266 + t6290;
  t6308 = -1.*t171*t4528*t6245;
  t6313 = t635*t4528*t6256;
  t6317 = t6121 + t6308 + t6313;
  t6318 = t6317*t1316;
  t6319 = t6191*t1758;
  t6320 = -1.*t6256*t1316;
  t6321 = -1.*t6245*t5849;
  t6326 = -1.*t6189*t1758;
  t6327 = -1.*t6183*t5922;
  t6332 = t6132 + t6142 + t6320 + t6321 + t6326 + t6327;
  t6334 = t635*t4528*t6332;
  t6336 = t6318 + t6319 + t6334;
  t6340 = t6110 + t6271 + t6277;
  t6341 = t1316*t6340;
  t6345 = -1.*t6189*t3389;
  t6347 = -1.*t6183*t5897;
  t6348 = t6152 + t6345 + t6347;
  t6359 = t1758*t6348;
  t6360 = -1.*t6256*t3389;
  t6361 = -1.*t6245*t5897;
  t6363 = t6057 + t6156 + t6198 + t6199 + t6360 + t6361;
  t6369 = t1316*t6363;
  t6370 = t6256*t1316;
  t6372 = t6245*t5849;
  t6373 = t6189*t1758;
  t6376 = t6183*t5922;
  t6378 = t6161 + t6165 + t6370 + t6372 + t6373 + t6376;
  t6379 = t3389*t6378;
  t6384 = t6341 + t6359 + t6369 + t6379;
  t6572 = t5789*t6042;
  t6577 = -1.*t5844*t171*t4528;
  t6578 = t6572 + t6577;
  t5855 = 0.241*t3389*t5852;
  t5866 = 0.241*t1758*t5852;
  t5901 = 0.241*t1316*t5900;
  t5928 = 0.241*t1316*t5926;
  t5960 = t5855 + t5866 + t5901 + t5928;
  t6507 = 0.241*t5966*t5900;
  t6511 = 0.241*t5852*t6000;
  t6512 = 0.241*t5966*t5926;
  t6516 = 0.241*t5852*t6017;
  t6517 = t6507 + t6511 + t6512 + t6516;
  t6207 = 0.241*t1316*t6206;
  t6230 = 0.241*t1758*t6229;
  t6303 = 0.241*t1316*t6295;
  t6339 = 0.241*t3389*t6336;
  t6391 = 0.241*t635*t4528*t6384;
  t6392 = t6207 + t6230 + t6303 + t6339 + t6391;
  t6649 = 0.241*t5852*t6206;
  t6653 = 0.241*t5926*t6229;
  t6654 = 0.241*t5852*t6295;
  t6658 = 0.241*t5900*t6336;
  t6659 = 0.241*t6578*t6384;
  t6664 = t6649 + t6653 + t6654 + t6658 + t6659;
  t6547 = 0.241*t5966*t6206;
  t6550 = 0.241*t6017*t6229;
  t6554 = 0.241*t5966*t6295;
  t6555 = 0.241*t6000*t6336;
  t6556 = 0.241*t6429*t6384;
  t6557 = t6547 + t6550 + t6554 + t6555 + t6556;
  t6745 = t3389*t6340;
  t6748 = t1316*t6348;
  t6749 = t6745 + t6748;
  t6071 = 0.241*t1316*t6069;
  t6089 = 0.241*t1758*t6087;
  t6118 = 0.241*t1316*t6115;
  t6147 = 0.241*t3389*t6146;
  t6172 = 0.241*t635*t4528*t6171;
  t6174 = t6071 + t6089 + t6118 + t6147 + t6172;
  t6633 = 0.241*t5852*t6069;
  t6635 = 0.241*t5852*t6115;
  t6638 = 0.241*t6087*t5926;
  t6639 = 0.241*t5900*t6146;
  t6645 = 0.241*t6578*t6171;
  t6646 = t6633 + t6635 + t6638 + t6639 + t6645;
  t6525 = 0.241*t5966*t6069;
  t6529 = 0.241*t5966*t6115;
  t6531 = 0.241*t6087*t6017;
  t6532 = 0.241*t6000*t6146;
  t6533 = 0.241*t6429*t6171;
  t6544 = t6525 + t6529 + t6531 + t6532 + t6533;
  t6833 = t5875*t6148;
  t6834 = t5795*t6153;
  t6835 = t6833 + t6834;
  t6762 = t619*t5063;
  t6764 = t3085*t5293;
  t6774 = t6762 + t6764;
  t6793 = -1.*t619*t5590;
  t6795 = -1.*t3085*t5673;
  t6802 = t6793 + t6795;
  t6814 = 0.241*t6146*t6206;
  t6815 = 0.241*t6171*t6749;
  t6821 = 0.241*t6115*t6229;
  t6826 = 0.241*t6087*t6295;
  t6828 = 0.241*t6069*t6336;
  t6836 = 0.241*t6835*t6384;
  t6839 = t6814 + t6815 + t6821 + t6826 + t6828 + t6836;
  t4160 = 0.241*t4123*t619*t1316;
  t4363 = 0.241*t4287*t619*t1316;
  t4364 = 0.241*t4287*t914*t3389;
  t4413 = 0.241*t4123*t3085*t1758;
  t5504 = 0.241*t635*t4528*t5498;
  t5506 = t4160 + t4363 + t4364 + t4413 + t5504;
  t6579 = 0.241*t6578*t5498;
  t6580 = 0.241*t4123*t619*t5852;
  t6582 = 0.241*t4287*t619*t5852;
  t6587 = 0.241*t4287*t914*t5900;
  t6588 = 0.241*t4123*t3085*t5926;
  t6589 = t6579 + t6580 + t6582 + t6587 + t6588;
  t6430 = 0.241*t6429*t5498;
  t6431 = 0.241*t4123*t619*t5966;
  t6436 = 0.241*t4287*t619*t5966;
  t6437 = 0.241*t4287*t914*t6000;
  t6438 = 0.241*t4123*t3085*t6017;
  t6439 = t6430 + t6431 + t6436 + t6437 + t6438;
  t6890 = 0.241*t4287*t914*t6069;
  t6891 = 0.241*t5498*t6835;
  t6893 = 0.241*t4123*t619*t6087;
  t6894 = 0.241*t4123*t3085*t6115;
  t6895 = 0.241*t4287*t619*t6146;
  t6896 = 0.241*t6774*t6171;
  t6898 = t6890 + t6891 + t6893 + t6894 + t6895 + t6896;
  t6741 = 0.241*t4287*t914*t6206;
  t6750 = 0.241*t5498*t6749;
  t6755 = 0.241*t4123*t619*t6229;
  t6756 = 0.241*t4123*t3085*t6295;
  t6760 = 0.241*t4287*t619*t6336;
  t6775 = 0.241*t6774*t6384;
  t6778 = t6741 + t6750 + t6755 + t6756 + t6760 + t6775;
  t5511 = 0.007922875*t619*t1316;
  t5558 = 0.241*t5535*t1316;
  t5559 = 0.007922875*t914*t3389;
  t5585 = 0.241*t5584*t1758;
  t5769 = 0.241*t635*t4528*t5766;
  t5770 = t5511 + t5558 + t5559 + t5585 + t5769;
  t6995 = 0.01584575*t4287*t914*t619;
  t6996 = 0.241*t4123*t619*t5584;
  t6997 = 0.241*t4123*t3085*t5535;
  t6999 = 0.241*t6802*t5498;
  t7001 = 0.241*t6774*t5766;
  t7002 = t6995 + t6996 + t6997 + t6999 + t7001;
  t6602 = 0.241*t6578*t5766;
  t6609 = 0.007922875*t619*t5852;
  t6610 = 0.241*t5535*t5852;
  t6612 = 0.007922875*t914*t5900;
  t6615 = 0.241*t5584*t5926;
  t6616 = t6602 + t6609 + t6610 + t6612 + t6615;
  t6472 = 0.241*t6429*t5766;
  t6473 = 0.007922875*t619*t5966;
  t6477 = 0.241*t5535*t5966;
  t6480 = 0.007922875*t914*t6000;
  t6485 = 0.241*t5584*t6017;
  t6486 = t6472 + t6473 + t6477 + t6480 + t6485;
  t6903 = 0.007922875*t914*t6069;
  t6906 = 0.241*t5766*t6835;
  t6907 = 0.241*t5535*t6087;
  t6915 = 0.241*t5584*t6115;
  t6920 = 0.007922875*t619*t6146;
  t6921 = 0.241*t6802*t6171;
  t6923 = t6903 + t6906 + t6907 + t6915 + t6920 + t6921;
  t6780 = 0.007922875*t914*t6206;
  t6787 = 0.241*t5766*t6749;
  t6788 = 0.241*t5535*t6229;
  t6789 = 0.241*t5584*t6295;
  t6790 = 0.007922875*t619*t6336;
  t6806 = 0.241*t6802*t6384;
  t6810 = t6780 + t6787 + t6788 + t6789 + t6790 + t6806;
  t6960 = 0.241*t4123*t619*t3458;
  t6962 = 0.241*t4287*t914*t2252;
  t6963 = 0.241*t4123*t3085*t2808;
  t6964 = 0.241*t4287*t619*t2957;
  t6966 = t6960 + t6962 + t6963 + t6964;
  t7022 = 0.007922875*t914*t2252;
  t7024 = 0.007922875*t619*t2957;
  t7025 = 0.241*t2808*t5584;
  t7026 = 0.241*t3458*t5535;
  t7027 = t7022 + t7024 + t7025 + t7026;
  t2361 = 0.241*t2252*t1316;
  t2838 = 0.241*t2808*t1316;
  t3445 = 0.241*t2957*t3389;
  t3472 = 0.241*t3458*t1758;
  t3476 = t2361 + t2838 + t3445 + t3472;
  t6593 = 0.241*t2252*t5852;
  t6594 = 0.241*t2808*t5852;
  t6596 = 0.241*t2957*t5900;
  t6599 = 0.241*t3458*t5926;
  t6600 = t6593 + t6594 + t6596 + t6599;
  t6445 = 0.241*t2252*t5966;
  t6446 = 0.241*t2808*t5966;
  t6453 = 0.241*t2957*t6000;
  t6456 = 0.241*t3458*t6017;
  t6459 = t6445 + t6446 + t6453 + t6456;
  t6870 = 0.241*t2957*t6069;
  t6874 = 0.241*t2808*t6087;
  t6876 = 0.241*t3458*t6115;
  t6878 = 0.241*t2252*t6146;
  t6882 = t6870 + t6874 + t6876 + t6878;
  t6694 = 0.241*t2957*t6206;
  t6696 = 0.241*t2808*t6229;
  t6708 = 0.241*t3458*t6295;
  t6712 = 0.241*t2252*t6336;
  t6713 = t6694 + t6696 + t6708 + t6712;
  t6952 = 0.00482*t4287*t914;
  t6957 = -0.03856*t4123*t619;
  t6958 = t6952 + t6957;
  t7061 = -0.03856*t2808;
  t7062 = 0.00482*t2957;
  t7063 = t7061 + t7062;
  t7015 = 0.0001584575*t914;
  t7016 = -0.03856*t5535;
  t7017 = t7015 + t7016;
  t1367 = 0.00482*t1316;
  t1768 = -0.03856*t1758;
  t1783 = t1367 + t1768;
  t6564 = 0.00482*t5852;
  t6565 = -0.03856*t5926;
  t6567 = t6564 + t6565;
  t6405 = 0.00482*t5966;
  t6409 = -0.03856*t6017;
  t6412 = t6405 + t6409;
  t6856 = -0.03856*t6115;
  t6858 = 0.00482*t6146;
  t6867 = t6856 + t6858;
  t6683 = -0.03856*t6295;
  t6685 = 0.00482*t6336;
  t6690 = t6683 + t6685;
  p_output1[0]=var2[8]*(-0.5*(0.482*t1316*t1758 + 0.482*t1316*t3389)*var2[0] - 0.5*t6021*var2[1] - 0.5*t5960*var2[2] - 0.5*t6392*var2[3] - 0.5*t6174*var2[4] - 0.5*t5506*var2[5] - 0.5*t5770*var2[6] - 0.5*t3476*var2[7] - 0.5*t1783*var2[8]);
  p_output1[1]=var2[8]*(-0.5*t6021*var2[0] - 0.5*(0.482*t5966*t6000 + 0.482*t5966*t6017)*var2[1] - 0.5*t6517*var2[2] - 0.5*t6557*var2[3] - 0.5*t6544*var2[4] - 0.5*t6439*var2[5] - 0.5*t6486*var2[6] - 0.5*t6459*var2[7] - 0.5*t6412*var2[8]);
  p_output1[2]=var2[8]*(-0.5*t5960*var2[0] - 0.5*t6517*var2[1] - 0.5*(0.482*t5852*t5900 + 0.482*t5852*t5926)*var2[2] - 0.5*t6664*var2[3] - 0.5*t6646*var2[4] - 0.5*t6589*var2[5] - 0.5*t6616*var2[6] - 0.5*t6600*var2[7] - 0.5*t6567*var2[8]);
  p_output1[3]=var2[8]*(-0.5*t6392*var2[0] - 0.5*t6557*var2[1] - 0.5*t6664*var2[2] - 0.5*(0.482*t6229*t6295 + 0.482*t6206*t6336 + 0.482*t6384*t6749)*var2[3] - 0.5*t6839*var2[4] - 0.5*t6778*var2[5] - 0.5*t6810*var2[6] - 0.5*t6713*var2[7] - 0.5*t6690*var2[8]);
  p_output1[4]=var2[8]*(-0.5*t6174*var2[0] - 0.5*t6544*var2[1] - 0.5*t6646*var2[2] - 0.5*t6839*var2[3] - 0.5*(0.482*t6087*t6115 + 0.482*t6069*t6146 + 0.482*t6171*t6835)*var2[4] - 0.5*t6898*var2[5] - 0.5*t6923*var2[6] - 0.5*t6882*var2[7] - 0.5*t6867*var2[8]);
  p_output1[5]=var2[8]*(-0.5*t5506*var2[0] - 0.5*t6439*var2[1] - 0.5*t6589*var2[2] - 0.5*t6778*var2[3] - 0.5*t6898*var2[4] - 0.5*(0.482*t3085*Power(t4123,2)*t619 + 0.482*t5498*t6774 + 0.482*Power(t4287,2)*t619*t914)*var2[5] - 0.5*t7002*var2[6] - 0.5*t6966*var2[7] - 0.5*t6958*var2[8]);
  p_output1[6]=var2[8]*(-0.5*t5770*var2[0] - 0.5*t6486*var2[1] - 0.5*t6616*var2[2] - 0.5*t6810*var2[3] - 0.5*t6923*var2[4] - 0.5*t7002*var2[5] - 0.5*(0.482*t5535*t5584 + 0.482*t5766*t6802 + 0.00052092903125*t619*t914)*var2[6] - 0.5*t7027*var2[7] - 0.5*t7017*var2[8]);
  p_output1[7]=var2[8]*(-0.5*t3476*var2[0] - 0.5*t6459*var2[1] - 0.5*t6600*var2[2] - 0.5*t6713*var2[3] - 0.5*t6882*var2[4] - 0.5*t6966*var2[5] - 0.5*t7027*var2[6] - 0.5*(0.482*t2252*t2957 + 0.482*t2808*t3458)*var2[7] - 0.5*t7063*var2[8]);
  p_output1[8]=(-0.5*t1783*var2[0] - 0.5*t6412*var2[1] - 0.5*t6567*var2[2] - 0.5*t6690*var2[3] - 0.5*t6867*var2[4] - 0.5*t6958*var2[5] - 0.5*t7017*var2[6] - 0.5*t7063*var2[7])*var2[8];
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec9_plane.hh"

namespace SymFunction
{

void Ce2_vec9_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
