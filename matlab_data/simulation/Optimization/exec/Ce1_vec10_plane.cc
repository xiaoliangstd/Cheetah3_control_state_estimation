/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:50:04 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t507;
  double t809;
  double t1115;
  double t1178;
  double t1279;
  double t1302;
  double t1586;
  double t1598;
  double t775;
  double t832;
  double t1008;
  double t179;
  double t2535;
  double t2552;
  double t2602;
  double t2622;
  double t2623;
  double t2634;
  double t2639;
  double t2643;
  double t2652;
  double t2656;
  double t2665;
  double t2669;
  double t2543;
  double t2554;
  double t2559;
  double t2673;
  double t2679;
  double t2680;
  double t2710;
  double t2720;
  double t2721;
  double t2724;
  double t2644;
  double t2671;
  double t2672;
  double t2030;
  double t2047;
  double t2079;
  double t2094;
  double t2300;
  double t2456;
  double t2472;
  double t2781;
  double t2782;
  double t2853;
  double t1093;
  double t1615;
  double t1690;
  double t1725;
  double t1763;
  double t1796;
  double t1875;
  double t1903;
  double t1946;
  double t2474;
  double t2687;
  double t2727;
  double t2766;
  double t2772;
  double t2886;
  double t2890;
  double t2891;
  double t2896;
  double t2915;
  double t2916;
  double t2918;
  double t2929;
  double t2980;
  double t2981;
  double t3016;
  double t3042;
  double t3070;
  double t3092;
  double t3095;
  double t3096;
  double t3098;
  double t3105;
  double t3106;
  double t3117;
  double t3124;
  double t3136;
  double t3143;
  double t3151;
  double t3152;
  double t3158;
  double t3161;
  double t3162;
  double t3163;
  double t3169;
  double t3182;
  double t3189;
  double t3190;
  double t3202;
  double t5526;
  double t5531;
  double t5616;
  double t5652;
  double t5668;
  double t5786;
  double t5791;
  double t5831;
  double t5543;
  double t5707;
  double t5715;
  double t3844;
  double t3852;
  double t3878;
  double t6002;
  double t6004;
  double t6007;
  double t6065;
  double t6078;
  double t6093;
  double t4962;
  double t5120;
  double t5124;
  double t6406;
  double t6413;
  double t5491;
  double t5505;
  double t5768;
  double t5497;
  double t6484;
  double t6495;
  double t6497;
  double t6498;
  double t5865;
  double t6011;
  double t3221;
  double t3222;
  double t3224;
  double t6188;
  double t6205;
  double t6244;
  double t6248;
  double t6263;
  double t6267;
  double t6285;
  double t6288;
  double t6299;
  double t6304;
  double t6306;
  double t6337;
  double t6343;
  double t6349;
  double t6351;
  double t6354;
  double t6643;
  double t6573;
  double t3271;
  double t3357;
  double t3359;
  double t6927;
  double t6931;
  double t6933;
  double t6938;
  double t6939;
  double t7230;
  double t7265;
  double t7272;
  double t7289;
  double t7298;
  double t7302;
  double t7304;
  double t7306;
  double t7309;
  double t7315;
  double t7325;
  double t7327;
  double t7358;
  double t7404;
  double t7430;
  double t7464;
  double t7481;
  double t7502;
  double t7504;
  double t7507;
  double t7510;
  double t7511;
  double t7724;
  double t7749;
  double t7755;
  double t7763;
  double t7764;
  double t7776;
  double t3216;
  double t3231;
  double t3243;
  double t3266;
  double t3367;
  double t3369;
  double t3777;
  double t3966;
  double t4153;
  double t4822;
  double t5219;
  double t5427;
  double t5728;
  double t5850;
  double t5856;
  double t5861;
  double t5906;
  double t5985;
  double t6013;
  double t6041;
  double t6043;
  double t8013;
  double t8014;
  double t8026;
  double t8152;
  double t8157;
  double t8167;
  double t8075;
  double t8076;
  double t8078;
  double t6404;
  double t6414;
  double t6423;
  double t6432;
  double t6444;
  double t6449;
  double t6450;
  double t6451;
  double t6454;
  double t6475;
  double t8113;
  double t8117;
  double t8121;
  double t6482;
  double t6502;
  double t6509;
  double t6510;
  double t6513;
  double t6530;
  double t6535;
  double t6536;
  double t6537;
  double t7913;
  double t7914;
  double t7922;
  double t6574;
  double t6584;
  double t6592;
  double t8168;
  double t8174;
  double t8182;
  double t8187;
  double t8191;
  double t8192;
  double t8211;
  double t8224;
  double t8228;
  double t8250;
  double t8255;
  double t8260;
  double t8283;
  double t8292;
  double t8311;
  double t8319;
  double t6716;
  double t6731;
  double t6746;
  double t6771;
  double t6777;
  double t6781;
  double t6783;
  double t6792;
  double t6794;
  double t6816;
  double t6818;
  double t8528;
  double t8533;
  double t8541;
  double t8550;
  double t8559;
  double t8562;
  double t8564;
  double t8571;
  double t8622;
  double t8627;
  double t8629;
  double t8631;
  double t8639;
  double t8641;
  double t8668;
  double t8670;
  double t8678;
  double t8680;
  double t8681;
  double t8694;
  double t8703;
  double t8704;
  double t8708;
  double t8736;
  double t8737;
  double t8741;
  double t8344;
  double t8350;
  double t8357;
  double t7961;
  double t7969;
  double t7972;
  double t8829;
  double t8830;
  double t8843;
  double t8805;
  double t8819;
  double t8826;
  double t8379;
  double t8414;
  double t8432;
  double t8845;
  double t8850;
  double t8856;
  double t8861;
  double t8862;
  double t8864;
  double t8876;
  double t8880;
  double t8882;
  double t8885;
  double t8947;
  double t8949;
  double t8952;
  double t8953;
  double t8959;
  double t8960;
  double t8964;
  double t8965;
  double t9006;
  double t9029;
  double t9035;
  double t8946;
  double t8967;
  double t8969;
  double t8976;
  double t8979;
  double t8981;
  double t6548;
  double t6551;
  double t6553;
  double t8997;
  double t9095;
  double t9096;
  double t9098;
  double t9081;
  double t9088;
  double t9090;
  double t9061;
  double t9118;
  double t9123;
  double t9125;
  double t9174;
  double t9177;
  double t9139;
  double t9160;
  double t9166;
  double t9196;
  double t9197;
  double t9211;
  double t9171;
  double t9179;
  double t9182;
  double t9192;
  double t9213;
  double t9216;
  double t9219;
  double t9222;
  double t9223;
  double t9093;
  double t9105;
  double t9109;
  double t9289;
  double t9293;
  double t9294;
  double t9474;
  double t9477;
  double t9478;
  double t9465;
  double t9469;
  double t9471;
  double t9485;
  double t9486;
  double t9487;
  double t9528;
  double t9531;
  double t9511;
  double t9517;
  double t9521;
  double t9548;
  double t9553;
  double t9555;
  double t9524;
  double t9533;
  double t9534;
  double t9544;
  double t9560;
  double t9561;
  double t9568;
  double t9572;
  double t9575;
  double t9473;
  double t9479;
  double t9480;
  double t8974;
  double t8982;
  double t8984;
  double t8985;
  double t9748;
  double t9750;
  double t8987;
  double t8989;
  double t8993;
  double t8995;
  double t9072;
  double t9073;
  double t9763;
  double t9764;
  double t9766;
  double t9187;
  double t9218;
  double t9225;
  double t9232;
  double t9236;
  double t9239;
  double t9247;
  double t9248;
  double t9254;
  double t9261;
  double t9265;
  double t9271;
  double t9274;
  double t9275;
  double t9276;
  double t9278;
  double t9301;
  double t9303;
  double t9305;
  double t9313;
  double t9315;
  double t9322;
  double t9329;
  double t9330;
  double t9333;
  double t9342;
  double t9343;
  double t9353;
  double t9356;
  double t9357;
  double t9358;
  double t9360;
  double t9372;
  double t9384;
  double t9385;
  double t9392;
  double t9395;
  double t9401;
  double t9403;
  double t9404;
  double t9407;
  double t9412;
  double t9414;
  double t9431;
  double t9432;
  double t9442;
  double t9453;
  double t9454;
  double t9864;
  double t9865;
  double t9867;
  double t9543;
  double t9563;
  double t9576;
  double t9580;
  double t9583;
  double t9584;
  double t9585;
  double t9586;
  double t9589;
  double t9592;
  double t9595;
  double t9602;
  double t9605;
  double t9611;
  double t9612;
  double t9618;
  double t9625;
  double t9628;
  double t9629;
  double t9654;
  double t9658;
  double t9661;
  double t9666;
  double t9667;
  double t9671;
  double t9675;
  double t9676;
  double t9682;
  double t9683;
  double t9684;
  double t9688;
  double t9689;
  double t9701;
  double t9703;
  double t9704;
  double t9707;
  double t9712;
  double t9715;
  double t9716;
  double t9718;
  double t9719;
  double t9724;
  double t9726;
  double t9735;
  double t9736;
  double t9737;
  double t9738;
  double t9740;
  double t9974;
  double t9975;
  double t9982;
  double t10012;
  double t10013;
  double t10022;
  double t10197;
  double t10202;
  double t10209;
  double t10397;
  double t10398;
  double t10399;
  double t10392;
  double t10393;
  double t10394;
  double t10396;
  double t10404;
  double t10406;
  double t10408;
  double t10409;
  double t10410;
  double t6595;
  double t6605;
  double t10568;
  double t10573;
  double t10576;
  double t10542;
  double t10543;
  double t10544;
  double t10565;
  double t10577;
  double t10589;
  double t10591;
  double t10592;
  double t10594;
  double t10506;
  double t10507;
  double t10509;
  double t10514;
  double t10516;
  double t10518;
  double t10520;
  double t10527;
  double t10530;
  double t10531;
  double t10532;
  double t10541;
  double t10715;
  double t10716;
  double t10717;
  double t10705;
  double t10706;
  double t10710;
  double t10713;
  double t10719;
  double t10720;
  double t10723;
  double t10726;
  double t10728;
  double t10629;
  double t10649;
  double t10652;
  double t10653;
  double t10660;
  double t10661;
  double t10680;
  double t10689;
  double t10691;
  double t9252;
  double t9114;
  double t9298;
  double t9339;
  double t9369;
  double t9409;
  double t9483;
  double t9591;
  double t9627;
  double t9672;
  double t9698;
  double t9721;
  double t10807;
  double t10808;
  double t10809;
  double t10810;
  double t9776;
  double t10811;
  double t10816;
  double t9761;
  double t10828;
  double t10829;
  double t10830;
  double t10832;
  double t10835;
  double t10836;
  double t10838;
  double t10840;
  double t9796;
  double t10849;
  double t9805;
  double t10853;
  double t10855;
  double t10856;
  double t9819;
  double t10862;
  double t10870;
  double t10871;
  double t10873;
  double t10876;
  double t9837;
  double t10880;
  double t10881;
  double t10886;
  double t10894;
  double t10895;
  double t10896;
  double t10897;
  double t9860;
  double t10906;
  double t10908;
  double t10909;
  double t9882;
  double t10911;
  double t10916;
  double t10917;
  double t10918;
  double t9894;
  double t10921;
  double t10926;
  double t10928;
  double t10929;
  double t9910;
  double t10931;
  double t10938;
  double t10940;
  double t10942;
  double t10943;
  double t9923;
  double t10949;
  double t10951;
  double t10952;
  double t10953;
  double t9947;
  double t10956;
  double t10395;
  double t10417;
  double t10431;
  double t10444;
  double t10445;
  double t10480;
  double t10492;
  double t10493;
  double t10549;
  double t10605;
  double t10630;
  double t10645;
  double t10663;
  double t10678;
  double t11109;
  double t11111;
  double t11112;
  double t11114;
  double t11116;
  double t11118;
  double t11120;
  double t11128;
  double t11140;
  double t11152;
  double t11153;
  double t11155;
  double t10711;
  double t10736;
  double t11196;
  double t10755;
  double t11205;
  double t10772;
  double t11209;
  double t11215;
  double t11217;
  double t10786;
  double t10793;
  double t11228;
  double t11520;
  double t11530;
  double t11531;
  double t11533;
  double t11539;
  double t11540;
  double t11091;
  double t11551;
  double t11555;
  double t11580;
  double t11581;
  double t11582;
  double t11589;
  double t11591;
  double t11593;
  double t11603;
  double t11604;
  double t11605;
  double t11576;
  double t11577;
  double t11578;
  double t11579;
  double t11583;
  double t11587;
  double t11594;
  double t11606;
  double t11595;
  double t11597;
  double t11610;
  double t11611;
  double t11618;
  double t11620;
  double t11622;
  double t11662;
  double t11664;
  double t11693;
  double t11694;
  double t11695;
  double t11696;
  double t11699;
  double t11700;
  double t11701;
  double t11702;
  double t11705;
  double t11706;
  double t11739;
  double t11743;
  double t11745;
  t507 = Cos(var1[10]);
  t809 = Sin(var1[10]);
  t1115 = -1.*t507;
  t1178 = 1. + t1115;
  t1279 = 0.242889*t1178;
  t1302 = 0.202889*t507;
  t1586 = -0.04*t809;
  t1598 = t1279 + t1302 + t1586;
  t775 = -0.04*t507;
  t832 = 0.04*t809;
  t1008 = t775 + t832;
  t179 = Cos(var1[4]);
  t2535 = Cos(var1[11]);
  t2552 = Sin(var1[11]);
  t2602 = -1.*t2535;
  t2622 = 1. + t2602;
  t2623 = 0.100689*t2622;
  t2634 = 0.080689*t2535;
  t2639 = -0.16*t2552;
  t2643 = t2623 + t2634 + t2639;
  t2652 = -0.20833*t2622;
  t2656 = -0.36833*t2535;
  t2665 = 0.02*t2552;
  t2669 = t2652 + t2656 + t2665;
  t2543 = t507*t2535;
  t2554 = -1.*t809*t2552;
  t2559 = t2543 + t2554;
  t2673 = t2535*t809;
  t2679 = t507*t2552;
  t2680 = t2673 + t2679;
  t2710 = 0.242889*t809;
  t2720 = -1.*t809*t2643;
  t2721 = t507*t2669;
  t2724 = t2710 + t2720 + t2721;
  t2644 = t507*t2643;
  t2671 = t809*t2669;
  t2672 = t1279 + t2644 + t2671;
  t2030 = Cos(var1[5]);
  t2047 = Sin(var1[9]);
  t2079 = -1.*t2030*t2047;
  t2094 = Cos(var1[9]);
  t2300 = Sin(var1[5]);
  t2456 = -1.*t2094*t2300;
  t2472 = t2079 + t2456;
  t2781 = -1.*t2535*t809;
  t2782 = -1.*t507*t2552;
  t2853 = t2781 + t2782;
  t1093 = -1.*t507*t1008;
  t1615 = -1.*t1598*t809;
  t1690 = t1093 + t1615;
  t1725 = t507*t1690;
  t1763 = t507*t1598;
  t1796 = -1.*t1008*t809;
  t1875 = t1763 + t1796;
  t1903 = t809*t1875;
  t1946 = t1725 + t1903;
  t2474 = 1.527*t179*t1946*t2472;
  t2687 = -1.*t2672*t2680;
  t2727 = -1.*t2724*t2559;
  t2766 = t2687 + t2727;
  t2772 = t2559*t2766;
  t2886 = t2724*t2853;
  t2890 = t2672*t2559;
  t2891 = t2886 + t2890;
  t2896 = t2680*t2891;
  t2915 = t2772 + t2896;
  t2916 = 0.241*t179*t2915*t2472;
  t2918 = -1.*t2094*t2030;
  t2929 = t2047*t2300;
  t2980 = t2918 + t2929;
  t2981 = -0.0219*t179*t2980;
  t3016 = -1.*t2094*t507*t2030;
  t3042 = t507*t2047*t2300;
  t3070 = t3016 + t3042;
  t3092 = 0.085290585*t507*t179*t3070;
  t3095 = t2094*t2030*t809;
  t3096 = -1.*t2047*t809*t2300;
  t3098 = t3095 + t3096;
  t3105 = -0.085290585*t179*t809*t3098;
  t3106 = -0.081715*t2853;
  t3117 = -0.11688*t2680;
  t3124 = t3106 + t3117;
  t3136 = -1.*t2094*t2030*t2853;
  t3143 = t2047*t2853*t2300;
  t3151 = t3136 + t3143;
  t3152 = 0.241*t179*t3124*t3151;
  t3158 = -1.*t2094*t2030*t2559;
  t3161 = t2047*t2559*t2300;
  t3162 = t3158 + t3161;
  t3163 = 0.008474765*t179*t2559*t3162;
  t3169 = t2474 + t2916 + t2981 + t3092 + t3105 + t3152 + t3163;
  t3182 = Sin(var1[4]);
  t3189 = t2094*t2030;
  t3190 = -1.*t2047*t2300;
  t3202 = t3189 + t3190;
  t5526 = -0.16*t2535;
  t5531 = t5526 + t2665;
  t5616 = 0.02*t2535;
  t5652 = 0.16*t2552;
  t5668 = t5616 + t5652;
  t5786 = -1.*t809*t5531;
  t5791 = t507*t5668;
  t5831 = t5786 + t5791;
  t5543 = t507*t5531;
  t5707 = t809*t5668;
  t5715 = t5543 + t5707;
  t3844 = -1.*t2030*t2047*t2853;
  t3852 = -1.*t2094*t2853*t2300;
  t3878 = t3844 + t3852;
  t6002 = -1.*t507*t2535;
  t6004 = t809*t2552;
  t6007 = t6002 + t6004;
  t6065 = t2559*t3182;
  t6078 = t179*t3878;
  t6093 = t6065 + t6078;
  t4962 = -1.*t2030*t2047*t2559;
  t5120 = -1.*t2094*t2559*t2300;
  t5124 = t4962 + t5120;
  t6406 = 0.04*t507;
  t6413 = t6406 + t832;
  t5491 = t2853*t2766;
  t5505 = -1.*t2724*t2853;
  t5768 = -1.*t2672*t2559;
  t5497 = t2559*t2891;
  t6484 = 0.242889*t507;
  t6495 = -1.*t507*t2643;
  t6497 = -1.*t809*t2669;
  t6498 = t6484 + t6495 + t6497;
  t5865 = t2672*t2853;
  t6011 = t2724*t6007;
  t3221 = -1.*t507*t2030*t2047;
  t3222 = -1.*t2094*t507*t2300;
  t3224 = t3221 + t3222;
  t6188 = 0.008474765*t2559*t6093;
  t6205 = -0.11688*t2559;
  t6244 = -0.081715*t6007;
  t6248 = t6205 + t6244;
  t6263 = 0.241*t6248*t6093;
  t6267 = t2680*t3182;
  t6285 = t179*t5124;
  t6288 = t6267 + t6285;
  t6299 = 0.008474765*t2853*t6288;
  t6304 = t2853*t3182;
  t6306 = -1.*t2030*t2047*t6007;
  t6337 = -1.*t2094*t6007*t2300;
  t6343 = t6306 + t6337;
  t6349 = t179*t6343;
  t6351 = t6304 + t6349;
  t6354 = 0.241*t3124*t6351;
  t6643 = Sin(var1[3]);
  t6573 = -1.*t809*t3182;
  t3271 = t2030*t2047*t809;
  t3357 = t2094*t809*t2300;
  t3359 = t3271 + t3357;
  t6927 = t6643*t3182*t2472;
  t6931 = Cos(var1[3]);
  t6933 = t6931*t3202;
  t6938 = t6927 + t6933;
  t6939 = 1.527*t1946*t6938;
  t7230 = 0.241*t2915*t6938;
  t7265 = t6931*t2472;
  t7272 = t6643*t3182*t2980;
  t7289 = t7265 + t7272;
  t7298 = -0.0219*t7289;
  t7302 = t6931*t3224;
  t7304 = t6643*t3182*t3070;
  t7306 = t7302 + t7304;
  t7309 = 0.085290585*t507*t7306;
  t7315 = t6931*t3359;
  t7325 = t6643*t3182*t3098;
  t7327 = t7315 + t7325;
  t7358 = -0.085290585*t809*t7327;
  t7404 = t6931*t3878;
  t7430 = t6643*t3182*t3151;
  t7464 = t7404 + t7430;
  t7481 = 0.241*t3124*t7464;
  t7502 = t6931*t5124;
  t7504 = t6643*t3182*t3162;
  t7507 = t7502 + t7504;
  t7510 = 0.008474765*t2559*t7507;
  t7511 = t6939 + t7230 + t7298 + t7309 + t7358 + t7481 + t7510;
  t7724 = t2030*t2047;
  t7749 = t2094*t2300;
  t7755 = t7724 + t7749;
  t7763 = -1.*t6643*t7755;
  t7764 = t6931*t3182*t3202;
  t7776 = t7763 + t7764;
  t3216 = t179*t809;
  t3231 = -1.*t3182*t3224;
  t3243 = t3216 + t3231;
  t3266 = t507*t179;
  t3367 = -1.*t3182*t3359;
  t3369 = t3266 + t3367;
  t3777 = t179*t2559;
  t3966 = -1.*t3182*t3878;
  t4153 = t3777 + t3966;
  t4822 = t179*t2680;
  t5219 = -1.*t3182*t5124;
  t5427 = t4822 + t5219;
  t5728 = -1.*t5715*t2680;
  t5850 = -1.*t5831*t2559;
  t5856 = t5505 + t5728 + t5768 + t5850;
  t5861 = t2559*t5856;
  t5906 = t5831*t2853;
  t5985 = t5715*t2559;
  t6013 = t5865 + t5906 + t5985 + t6011;
  t6041 = t2680*t6013;
  t6043 = t5491 + t5497 + t5861 + t6041;
  t8013 = t2094*t2030*t2853;
  t8014 = -1.*t2047*t2853*t2300;
  t8026 = t8013 + t8014;
  t8152 = t6931*t8026;
  t8157 = -1.*t6643*t4153;
  t8167 = t8152 + t8157;
  t8075 = t2094*t2030*t2559;
  t8076 = -1.*t2047*t2559*t2300;
  t8078 = t8075 + t8076;
  t6404 = -1.*t507*t1598;
  t6414 = -1.*t507*t6413;
  t6423 = t6404 + t6414;
  t6432 = t507*t6423;
  t6444 = -1.*t809*t1690;
  t6449 = t507*t1875;
  t6450 = -1.*t6413*t809;
  t6451 = t1615 + t6450;
  t6454 = t809*t6451;
  t6475 = t6432 + t6444 + t6449 + t6454;
  t8113 = t6931*t7755;
  t8117 = t6643*t3182*t3202;
  t8121 = t8113 + t8117;
  t6482 = -1.*t2724*t2680;
  t6502 = -1.*t6498*t2559;
  t6509 = t5505 + t6482 + t6502 + t5768;
  t6510 = t2559*t6509;
  t6513 = t6498*t2853;
  t6530 = t2724*t2559;
  t6535 = t6513 + t5865 + t6530 + t6011;
  t6536 = t2680*t6535;
  t6537 = t5491 + t6510 + t5497 + t6536;
  t7913 = t2094*t507*t2030;
  t7914 = -1.*t507*t2047*t2300;
  t7922 = t7913 + t7914;
  t6574 = t507*t2030*t2047;
  t6584 = t2094*t507*t2300;
  t6592 = t6574 + t6584;
  t8168 = 0.008474765*t2559*t8167;
  t8174 = 0.241*t6248*t8167;
  t8182 = t6931*t8078;
  t8187 = -1.*t6643*t5427;
  t8191 = t8182 + t8187;
  t8192 = 0.008474765*t2853*t8191;
  t8211 = t2094*t2030*t6007;
  t8224 = -1.*t2047*t6007*t2300;
  t8228 = t8211 + t8224;
  t8250 = t6931*t8228;
  t8255 = t179*t2853;
  t8260 = -1.*t3182*t6343;
  t8283 = t8255 + t8260;
  t8292 = -1.*t6643*t8283;
  t8311 = t8250 + t8292;
  t8319 = 0.241*t3124*t8311;
  t6716 = -1.*t179*t3224;
  t6731 = t6573 + t6716;
  t6746 = -1.*t507*t3182;
  t6771 = -1.*t179*t3359;
  t6777 = t6746 + t6771;
  t6781 = -1.*t2559*t3182;
  t6783 = -1.*t179*t3878;
  t6792 = t6781 + t6783;
  t6794 = -1.*t2680*t3182;
  t6816 = -1.*t179*t5124;
  t6818 = t6794 + t6816;
  t8528 = -1.*t6931*t3182*t2472;
  t8533 = t6643*t3202;
  t8541 = t8528 + t8533;
  t8550 = 1.527*t1946*t8541;
  t8559 = 0.241*t2915*t8541;
  t8562 = t6643*t2472;
  t8564 = -1.*t6931*t3182*t2980;
  t8571 = t8562 + t8564;
  t8622 = -0.0219*t8571;
  t8627 = t6643*t3224;
  t8629 = -1.*t6931*t3182*t3070;
  t8631 = t8627 + t8629;
  t8639 = 0.085290585*t507*t8631;
  t8641 = t6643*t3359;
  t8668 = -1.*t6931*t3182*t3098;
  t8670 = t8641 + t8668;
  t8678 = -0.085290585*t809*t8670;
  t8680 = t6643*t3878;
  t8681 = -1.*t6931*t3182*t3151;
  t8694 = t8680 + t8681;
  t8703 = 0.241*t3124*t8694;
  t8704 = t6643*t5124;
  t8708 = -1.*t6931*t3182*t3162;
  t8736 = t8704 + t8708;
  t8737 = 0.008474765*t2559*t8736;
  t8741 = t8550 + t8559 + t8622 + t8639 + t8678 + t8703 + t8737;
  t8344 = t6931*t7922;
  t8350 = -1.*t6643*t3243;
  t8357 = t8344 + t8350;
  t7961 = -1.*t2094*t2030*t809;
  t7969 = t2047*t809*t2300;
  t7972 = t7961 + t7969;
  t8829 = t6643*t8026;
  t8830 = t6931*t4153;
  t8843 = t8829 + t8830;
  t8805 = t6643*t7755;
  t8819 = -1.*t6931*t3182*t3202;
  t8826 = t8805 + t8819;
  t8379 = -1.*t179*t809;
  t8414 = -1.*t3182*t6592;
  t8432 = t8379 + t8414;
  t8845 = 0.008474765*t2559*t8843;
  t8850 = 0.241*t6248*t8843;
  t8856 = t6643*t8078;
  t8861 = t6931*t5427;
  t8862 = t8856 + t8861;
  t8864 = 0.008474765*t2853*t8862;
  t8876 = t6643*t8228;
  t8880 = t6931*t8283;
  t8882 = t8876 + t8880;
  t8885 = 0.241*t3124*t8882;
  t8947 = -1.*t2094;
  t8949 = 1. + t8947;
  t8952 = 0.081715*t8949;
  t8953 = 0.061715*t2094;
  t8959 = t8952 + t8953;
  t8960 = t8959*t2030;
  t8964 = 0.02*t2047*t2300;
  t8965 = t8960 + t8964;
  t9006 = 0.02*t2030*t2047;
  t9029 = 0.02*t2094*t2300;
  t9035 = t9006 + t9029;
  t8946 = 0.242889*t3182;
  t8967 = t179*t8965;
  t8969 = t8946 + t8967;
  t8976 = 0.242889*t179;
  t8979 = -1.*t3182*t8965;
  t8981 = t8976 + t8979;
  t6548 = t809*t3182;
  t6551 = t179*t3224;
  t6553 = t6548 + t6551;
  t8997 = Power(t179,2);
  t9095 = -0.055855*t2047;
  t9096 = -1.*t2094*t1008;
  t9098 = t9095 + t9096;
  t9081 = 0.055855*t2094;
  t9088 = -1.*t2047*t1008;
  t9090 = t9081 + t9088;
  t9061 = Power(t3182,2);
  t9118 = t2030*t9098;
  t9123 = -1.*t9090*t2300;
  t9125 = t9118 + t9123;
  t9174 = 0.13757*t2094;
  t9177 = t8952 + t9174 + t9088;
  t9139 = 0.055855*t2047;
  t9160 = t2094*t1008;
  t9166 = t9139 + t9160;
  t9196 = t2030*t9177;
  t9197 = -1.*t9166*t2300;
  t9211 = t9196 + t9197;
  t9171 = t2030*t9166;
  t9179 = t9177*t2300;
  t9182 = t9171 + t9179;
  t9192 = t1598*t3182;
  t9213 = t179*t9211;
  t9216 = t9192 + t9213;
  t9219 = t179*t1598;
  t9222 = -1.*t3182*t9211;
  t9223 = t9219 + t9222;
  t9093 = t2030*t9090;
  t9105 = t9098*t2300;
  t9109 = t9093 + t9105;
  t9289 = t507*t3182;
  t9293 = t179*t3359;
  t9294 = t9289 + t9293;
  t9474 = -0.035165*t2047;
  t9477 = -1.*t2094*t2724;
  t9478 = t9474 + t9477;
  t9465 = 0.035165*t2094;
  t9469 = -1.*t2047*t2724;
  t9471 = t9465 + t9469;
  t9485 = t2030*t9478;
  t9486 = -1.*t9471*t2300;
  t9487 = t9485 + t9486;
  t9528 = 0.11688*t2094;
  t9531 = t8952 + t9528 + t9469;
  t9511 = 0.035165*t2047;
  t9517 = t2094*t2724;
  t9521 = t9511 + t9517;
  t9548 = t2030*t9531;
  t9553 = -1.*t9521*t2300;
  t9555 = t9548 + t9553;
  t9524 = t2030*t9521;
  t9533 = t9531*t2300;
  t9534 = t9524 + t9533;
  t9544 = t2672*t3182;
  t9560 = t179*t9555;
  t9561 = t9544 + t9560;
  t9568 = t179*t2672;
  t9572 = -1.*t3182*t9555;
  t9575 = t9568 + t9572;
  t9473 = t2030*t9471;
  t9479 = t9478*t2300;
  t9480 = t9473 + t9479;
  t8974 = -1.*t3182*t8969;
  t8982 = -1.*t179*t8981;
  t8984 = t8974 + t8982;
  t8985 = t179*t2472*t8984;
  t9748 = -1.*t8959*t2300;
  t9750 = t9006 + t9748;
  t8987 = -0.02*t2030*t2047;
  t8989 = t8959*t2300;
  t8993 = t8987 + t8989;
  t8995 = t8993*t3202;
  t9072 = t179*t2472*t8969;
  t9073 = -1.*t3182*t2472*t8981;
  t9763 = -1.*t2030*t9166;
  t9764 = -1.*t9177*t2300;
  t9766 = t9763 + t9764;
  t9187 = -1.*t3202*t9182;
  t9218 = -1.*t179*t2472*t9216;
  t9225 = t3182*t2472*t9223;
  t9232 = -1.*t7755*t9182;
  t9236 = -1.*t179*t3202*t9216;
  t9239 = t3182*t3202*t9223;
  t9247 = t9232 + t9236 + t9239;
  t9248 = t179*t3070*t9247;
  t9254 = t3224*t9182;
  t9261 = t179*t3070*t9216;
  t9265 = -1.*t3182*t3070*t9223;
  t9271 = t7922*t9182;
  t9274 = t6553*t9216;
  t9275 = t3243*t9223;
  t9276 = t9271 + t9274 + t9275;
  t9278 = t179*t2472*t9276;
  t9301 = t3202*t9182;
  t9303 = t179*t2472*t9216;
  t9305 = -1.*t3182*t2472*t9223;
  t9313 = t7755*t9182;
  t9315 = t179*t3202*t9216;
  t9322 = -1.*t3182*t3202*t9223;
  t9329 = t9313 + t9315 + t9322;
  t9330 = t179*t3098*t9329;
  t9333 = -1.*t9182*t3359;
  t9342 = -1.*t179*t3098*t9216;
  t9343 = t3182*t3098*t9223;
  t9353 = -1.*t9182*t7972;
  t9356 = -1.*t9216*t9294;
  t9357 = -1.*t9223*t3369;
  t9358 = t9353 + t9356 + t9357;
  t9360 = t179*t2472*t9358;
  t9372 = -1.*t3224*t9182;
  t9384 = -1.*t179*t3070*t9216;
  t9385 = t3182*t3070*t9223;
  t9392 = -1.*t7922*t9182;
  t9395 = -1.*t6553*t9216;
  t9401 = -1.*t3243*t9223;
  t9403 = t9392 + t9395 + t9401;
  t9404 = t179*t3098*t9403;
  t9407 = t9182*t3359;
  t9412 = t179*t3098*t9216;
  t9414 = -1.*t3182*t3098*t9223;
  t9431 = t9182*t7972;
  t9432 = t9216*t9294;
  t9442 = t9223*t3369;
  t9453 = t9431 + t9432 + t9442;
  t9454 = t179*t3070*t9453;
  t9864 = -1.*t2030*t9521;
  t9865 = -1.*t9531*t2300;
  t9867 = t9864 + t9865;
  t9543 = t3202*t9534;
  t9563 = t179*t2472*t9561;
  t9576 = -1.*t3182*t2472*t9575;
  t9580 = t7755*t9534;
  t9583 = t179*t3202*t9561;
  t9584 = -1.*t3182*t3202*t9575;
  t9585 = t9580 + t9583 + t9584;
  t9586 = t179*t3151*t9585;
  t9589 = -1.*t9534*t3878;
  t9592 = -1.*t179*t3151*t9561;
  t9595 = t3182*t3151*t9575;
  t9602 = -1.*t9534*t8026;
  t9605 = -1.*t9561*t6093;
  t9611 = -1.*t9575*t4153;
  t9612 = t9602 + t9605 + t9611;
  t9618 = t179*t2472*t9612;
  t9625 = t9534*t3878;
  t9628 = t179*t3151*t9561;
  t9629 = -1.*t3182*t3151*t9575;
  t9654 = t9534*t8026;
  t9658 = t9561*t6093;
  t9661 = t9575*t4153;
  t9666 = t9654 + t9658 + t9661;
  t9667 = t179*t3162*t9666;
  t9671 = -1.*t9534*t5124;
  t9675 = -1.*t179*t3162*t9561;
  t9676 = t3182*t3162*t9575;
  t9682 = -1.*t9534*t8078;
  t9683 = -1.*t9561*t6288;
  t9684 = -1.*t9575*t5427;
  t9688 = t9682 + t9683 + t9684;
  t9689 = t179*t3151*t9688;
  t9701 = -1.*t3202*t9534;
  t9703 = -1.*t179*t2472*t9561;
  t9704 = t3182*t2472*t9575;
  t9707 = -1.*t7755*t9534;
  t9712 = -1.*t179*t3202*t9561;
  t9715 = t3182*t3202*t9575;
  t9716 = t9707 + t9712 + t9715;
  t9718 = t179*t3162*t9716;
  t9719 = t9534*t5124;
  t9724 = t179*t3162*t9561;
  t9726 = -1.*t3182*t3162*t9575;
  t9735 = t9534*t8078;
  t9736 = t9561*t6288;
  t9737 = t9575*t5427;
  t9738 = t9735 + t9736 + t9737;
  t9740 = t179*t2472*t9738;
  t9974 = -0.242889*t3182;
  t9975 = -1.*t179*t8965;
  t9982 = t9974 + t9975;
  t10012 = -1.*t1598*t3182;
  t10013 = -1.*t179*t9211;
  t10022 = t10012 + t10013;
  t10197 = -1.*t2672*t3182;
  t10202 = -1.*t179*t9555;
  t10209 = t10197 + t10202;
  t10397 = -1.*t2030*t2047*t6413;
  t10398 = -1.*t2094*t6413*t2300;
  t10399 = t10397 + t10398;
  t10392 = t2094*t2030*t6413;
  t10393 = -1.*t2047*t6413*t2300;
  t10394 = t10392 + t10393;
  t10396 = t1008*t3182;
  t10404 = t179*t10399;
  t10406 = t10396 + t10404;
  t10408 = t179*t1008;
  t10409 = -1.*t3182*t10399;
  t10410 = t10408 + t10409;
  t6595 = t179*t6592;
  t6605 = t6573 + t6595;
  t10568 = -1.*t2030*t2047*t6498;
  t10573 = -1.*t2094*t6498*t2300;
  t10576 = t10568 + t10573;
  t10542 = t2094*t2030*t6498;
  t10543 = -1.*t2047*t6498*t2300;
  t10544 = t10542 + t10543;
  t10565 = t2724*t3182;
  t10577 = t179*t10576;
  t10589 = t10565 + t10577;
  t10591 = t179*t2724;
  t10592 = -1.*t3182*t10576;
  t10594 = t10591 + t10592;
  t10506 = t6093*t9585;
  t10507 = t179*t3202*t9612;
  t10509 = t10506 + t10507;
  t10514 = 0.008474765*t2853*t10509;
  t10516 = t6288*t9666;
  t10518 = t6093*t9688;
  t10520 = t10516 + t10518;
  t10527 = t6288*t9716;
  t10530 = t179*t3202*t9738;
  t10531 = t10527 + t10530;
  t10532 = 0.241*t6248*t10531;
  t10541 = t6093*t9716;
  t10715 = -1.*t2030*t2047*t5831;
  t10716 = -1.*t2094*t5831*t2300;
  t10717 = t10715 + t10716;
  t10705 = t2094*t2030*t5831;
  t10706 = -1.*t2047*t5831*t2300;
  t10710 = t10705 + t10706;
  t10713 = t5715*t3182;
  t10719 = t179*t10717;
  t10720 = t10713 + t10719;
  t10723 = t179*t5715;
  t10726 = -1.*t3182*t10717;
  t10728 = t10723 + t10726;
  t10629 = t6351*t9585;
  t10649 = -1.*t9534*t8228;
  t10652 = -1.*t9561*t6351;
  t10653 = -1.*t9575*t8283;
  t10660 = t6093*t9666;
  t10661 = t6351*t9688;
  t10680 = t9534*t8228;
  t10689 = t9561*t6351;
  t10691 = t9575*t8283;
  t9252 = t7922*t9109;
  t9114 = -1.*t7755*t9109;
  t9298 = t7755*t9109;
  t9339 = -1.*t9109*t7972;
  t9369 = -1.*t7922*t9109;
  t9409 = t9109*t7972;
  t9483 = t7755*t9480;
  t9591 = -1.*t9480*t8026;
  t9627 = t9480*t8026;
  t9672 = -1.*t9480*t8078;
  t9698 = -1.*t7755*t9480;
  t9721 = t9480*t8078;
  t10807 = 0.0053192691*t3202;
  t10808 = -1.*t3202*t9211;
  t10809 = t10808 + t9232;
  t10810 = t3224*t10809;
  t9776 = t7922*t9211;
  t10811 = t3070*t9211;
  t10816 = -1.*t2472*t9211;
  t9761 = -1.*t7755*t9211;
  t10828 = t1598*t809;
  t10829 = t3224*t9211;
  t10830 = t10828 + t10829 + t9271;
  t10832 = t3202*t10830;
  t10835 = t3202*t9211;
  t10836 = t10835 + t9313;
  t10838 = t3359*t10836;
  t10840 = t2472*t9211;
  t9796 = t7755*t9211;
  t10849 = -1.*t9211*t3098;
  t9805 = -1.*t9211*t7972;
  t10853 = -1.*t9211*t3359;
  t10855 = t6404 + t10853 + t9353;
  t10856 = t3202*t10855;
  t9819 = -1.*t7922*t9211;
  t10862 = -1.*t3070*t9211;
  t10870 = -1.*t3224*t9211;
  t10871 = t1615 + t10870 + t9392;
  t10873 = t3359*t10871;
  t10876 = t9211*t3098;
  t9837 = t9211*t7972;
  t10880 = t9211*t3359;
  t10881 = t1763 + t10880 + t9431;
  t10886 = t3224*t10881;
  t10894 = t3202*t9555;
  t10895 = t10894 + t9580;
  t10896 = t3878*t10895;
  t10897 = t2472*t9555;
  t9860 = t7755*t9555;
  t10906 = -1.*t9555*t3878;
  t10908 = t5768 + t10906 + t9602;
  t10909 = t3202*t10908;
  t9882 = -1.*t9555*t8026;
  t10911 = -1.*t9555*t3151;
  t10916 = t9555*t3878;
  t10917 = t2890 + t10916 + t9654;
  t10918 = t5124*t10917;
  t9894 = t9555*t8026;
  t10921 = t9555*t3151;
  t10926 = -1.*t9555*t5124;
  t10928 = t2687 + t10926 + t9682;
  t10929 = t3878*t10928;
  t9910 = -1.*t9555*t8078;
  t10931 = -1.*t9555*t3162;
  t10938 = -1.*t3202*t9555;
  t10940 = t10938 + t9707;
  t10942 = t5124*t10940;
  t10943 = -1.*t2472*t9555;
  t9923 = -1.*t7755*t9555;
  t10949 = t2672*t2680;
  t10951 = t9555*t5124;
  t10952 = t10949 + t10951 + t9735;
  t10953 = t3202*t10952;
  t9947 = t9555*t8078;
  t10956 = t9555*t3162;
  t10395 = -1.*t7755*t10394;
  t10417 = t7922*t10394;
  t10431 = t7755*t10394;
  t10444 = -1.*t3070*t9182;
  t10445 = -1.*t10394*t7972;
  t10480 = -1.*t7922*t10394;
  t10492 = t3070*t9182;
  t10493 = t10394*t7972;
  t10549 = -1.*t7755*t10544;
  t10605 = t10544*t8078;
  t10630 = t7755*t10544;
  t10645 = -1.*t10544*t8026;
  t10663 = -1.*t10544*t8078;
  t10678 = t10544*t8026;
  t11109 = t8026*t10895;
  t11111 = t7755*t10908;
  t11112 = t11109 + t11111;
  t11114 = 0.008474765*t2853*t11112;
  t11116 = t8078*t10917;
  t11118 = t8026*t10928;
  t11120 = t11116 + t11118;
  t11128 = t8078*t10940;
  t11140 = t7755*t10952;
  t11152 = t11128 + t11140;
  t11153 = 0.241*t6248*t11152;
  t11155 = t8026*t10940;
  t10711 = -1.*t7755*t10710;
  t10736 = t10710*t8078;
  t11196 = t8228*t10895;
  t10755 = t7755*t10710;
  t11205 = -1.*t2672*t2853;
  t10772 = -1.*t10710*t8026;
  t11209 = -1.*t9555*t6343;
  t11215 = t8026*t10917;
  t11217 = t8228*t10928;
  t10786 = -1.*t10710*t8078;
  t10793 = t10710*t8026;
  t11228 = t9555*t6343;
  t11520 = -1.*t2094*t9166*t809;
  t11530 = t2047*t9177*t809;
  t11531 = t1763 + t11520 + t11530;
  t11533 = -1.*t2094*t507*t9166;
  t11539 = t507*t2047*t9177;
  t11540 = t11533 + t11539 + t1615;
  t11091 = t507*t1008;
  t11551 = Power(t2094,2);
  t11555 = Power(t2047,2);
  t11580 = -1.*t2047*t9521;
  t11581 = -1.*t2094*t9531;
  t11582 = t11580 + t11581;
  t11589 = -1.*t2094*t9521*t2559;
  t11591 = t2047*t9531*t2559;
  t11593 = t2687 + t11589 + t11591;
  t11603 = t2094*t9521*t2853;
  t11604 = -1.*t2047*t9531*t2853;
  t11605 = t11603 + t11604 + t2890;
  t11576 = t2047*t9521;
  t11577 = t2094*t9531;
  t11578 = t11576 + t11577;
  t11579 = 0.01694953*t11578*t2853*t2559;
  t11583 = 0.241*t11582*t2559*t3124;
  t11587 = 0.241*t11582*t2680*t6248;
  t11594 = t2853*t11593;
  t11606 = t2559*t11605;
  t11595 = -1.*t2094*t9521*t2853;
  t11597 = t2047*t9531*t2853;
  t11610 = t2094*t9521*t6007;
  t11611 = -1.*t2047*t9531*t6007;
  t11618 = t2559*t11593;
  t11620 = t2680*t11605;
  t11622 = t11618 + t11620;
  t11662 = 0.00059603022245*t2853*t2559;
  t11664 = 0.482*t3124*t6248;
  t11693 = 0.242889*t2535;
  t11694 = -1.*t2535*t2643;
  t11695 = t2669*t2552;
  t11696 = t11693 + t11694 + t11695;
  t11699 = 0.008474765*t2853*t11696;
  t11700 = t2535*t2669;
  t11701 = -0.242889*t2552;
  t11702 = t2643*t2552;
  t11705 = t11700 + t11701 + t11702;
  t11706 = 0.241*t11705*t6248;
  t11739 = 0.0001694953*t2853;
  t11743 = -0.03856*t6248;
  t11745 = t11739 + t11743;
  p_output1[0]=var2[9]*(-0.5*(0.0219*t2472*t3182 - 1.527*t1946*t3182*t3202 - 0.241*t2915*t3182*t3202 + 0.241*t3124*t4153 + 0.085290585*t3243*t507 + 0.008474765*t2559*t5427 - 0.085290585*t3369*t809)*var2[4] - 0.5*t3169*var2[5] - 0.5*t3169*var2[9] - 0.5*(t6188 + t6263 + t6299 + t6354 + 1.527*t179*t3202*t6475 + 0.241*t179*t3202*t6537 - 0.085290585*t6553*t809 - 0.085290585*t6605*t809)*var2[10] - 0.5*(0.241*t179*t3202*t6043 + t6188 + t6263 + t6299 + t6354)*var2[11]);
  p_output1[1]=var2[9]*(-0.5*(-0.0219*(-1.*t3202*t6643 + t2472*t3182*t6931) + 1.527*t1946*t7776 + 0.241*t2915*t7776 + 0.085290585*t507*(-1.*t3243*t6931 - 1.*t6643*t7922) + 0.241*t3124*(-1.*t4153*t6931 - 1.*t6643*t8026) + 0.008474765*t2559*(-1.*t5427*t6931 - 1.*t6643*t8078) - 0.085290585*(-1.*t3369*t6931 - 1.*t6643*t7972)*t809)*var2[3] - 0.5*(-0.0219*t179*t2472*t6643 + 1.527*t179*t1946*t3202*t6643 + 0.241*t179*t2915*t3202*t6643 - 0.085290585*t507*t6643*t6731 - 0.241*t3124*t6643*t6792 - 0.008474765*t2559*t6643*t6818 + 0.085290585*t6643*t6777*t809)*var2[4] - 0.5*t7511*var2[5] - 0.5*t7511*var2[9] - 0.5*(1.527*t6475*t8121 + 0.241*t6537*t8121 + t8168 + t8174 + t8192 + t8319 - 0.085290585*t809*t8357 - 0.085290585*t809*(t3070*t6931 - 1.*t6643*t8432))*var2[10] - 0.5*(0.241*t6043*t8121 + t8168 + t8174 + t8192 + t8319)*var2[11]);
  p_output1[2]=var2[9]*(-0.5*(-0.0219*t6938 - 0.085290585*(-1.*t3369*t6643 + t6931*t7972)*t809 + 1.527*t1946*t8121 + 0.241*t2915*t8121 + 0.241*t3124*t8167 + 0.008474765*t2559*t8191 + 0.085290585*t507*t8357)*var2[3] - 0.5*(0.0219*t179*t2472*t6931 - 1.527*t179*t1946*t3202*t6931 - 0.241*t179*t2915*t3202*t6931 + 0.085290585*t507*t6731*t6931 + 0.241*t3124*t6792*t6931 + 0.008474765*t2559*t6818*t6931 - 0.085290585*t6777*t6931*t809)*var2[4] - 0.5*t8741*var2[5] - 0.5*t8741*var2[9] - 0.5*(-0.085290585*(t3243*t6931 + t6643*t7922)*t809 - 0.085290585*t809*(t3070*t6643 + t6931*t8432) + 1.527*t6475*t8826 + 0.241*t6537*t8826 + t8845 + t8850 + t8864 + t8885)*var2[10] - 0.5*(0.241*t6043*t8826 + t8845 + t8850 + t8864 + t8885)*var2[11]);
  p_output1[3]=var2[9]*(-0.5*(-0.085290585*t809*(t6553*(t10022*t3182*t3202 + t3182*t3202*t9216) + t179*t3202*(t10022*t3243 + t3243*t9216 + t6553*t9223 + t6731*t9223) + t3243*t9247 - 1.*t3182*t3202*t9276) + 0.085290585*t507*((-1.*t10022*t3182*t3202 - 1.*t3182*t3202*t9216)*t9294 + t179*t3202*(-1.*t10022*t3369 - 1.*t3369*t9216 - 1.*t6777*t9223 - 1.*t9223*t9294) + t3369*t9329 - 1.*t3182*t3202*t9358) + 1.527*t1946*((-1.*t10022*t3243 - 1.*t3243*t9216 - 1.*t6553*t9223 - 1.*t6731*t9223)*t9294 + t6553*(t10022*t3369 + t3369*t9216 + t6777*t9223 + t9223*t9294) + t3369*t9403 + t3243*t9453) + 0.008474765*t2559*(t6093*(-1.*t10209*t3182*t3202 - 1.*t3182*t3202*t9561) + t179*t3202*(-1.*t10209*t4153 - 1.*t4153*t9561 - 1.*t6093*t9575 - 1.*t6792*t9575) + t4153*t9585 - 1.*t3182*t3202*t9612) + 0.241*t2915*(t6288*(t10209*t4153 + t4153*t9561 + t6093*t9575 + t6792*t9575) + t6093*(-1.*t10209*t5427 - 1.*t5427*t9561 - 1.*t6288*t9575 - 1.*t6818*t9575) + t5427*t9666 + t4153*t9688) + 0.241*t3124*(t6288*(t10209*t3182*t3202 + t3182*t3202*t9561) + t179*t3202*(t10209*t5427 + t5427*t9561 + t6288*t9575 + t6818*t9575) + t5427*t9716 - 1.*t3182*t3202*t9738) - 0.0219*(-1.*t3182*t3202*t8984 + t179*(t179*t3202*t8969 - 1.*t3182*t3202*t8981 + t7755*t8993) + t179*t3202*(-1.*t179*t8969 - 1.*t179*t9982) + t3182*(-1.*t3182*t3202*t8969 - 1.*t3182*t3202*t9982)))*var2[4] - 0.5*(-0.0219*(t8985 + t3182*(t7755*t8965 + t8995 + t9072 + t9073 + t3202*t8997*t9750 + t3202*t9061*t9750)) - 0.085290585*t809*(t9248 + t9278 + t6553*(t9187 + t9218 + t9225 + t9761 - 1.*t3202*t8997*t9766 - 1.*t3202*t9061*t9766) + t179*t3202*(t9254 + t9261 + t9265 - 1.*t3182*t3243*t9766 + t179*t6553*t9766 + t9776)) + 0.085290585*t507*(t9330 + t9360 + t9294*(t9301 + t9303 + t9305 + t3202*t8997*t9766 + t3202*t9061*t9766 + t9796) + t179*t3202*(t9333 + t9342 + t9343 + t3182*t3369*t9766 - 1.*t179*t9294*t9766 + t9805)) + 1.527*t1946*(t9404 + t9454 + t9294*(t9372 + t9384 + t9385 + t3182*t3243*t9766 - 1.*t179*t6553*t9766 + t9819) + t6553*(t9407 + t9412 + t9414 - 1.*t3182*t3369*t9766 + t179*t9294*t9766 + t9837)) + 0.008474765*t2559*(t9586 + t9618 + t6093*(t9543 + t9563 + t9576 + t9860 + t3202*t8997*t9867 + t3202*t9061*t9867) + t179*t3202*(t9589 + t9592 + t9595 + t3182*t4153*t9867 - 1.*t179*t6093*t9867 + t9882)) + 0.241*t2915*(t9667 + t9689 + t6288*(t9625 + t9628 + t9629 - 1.*t3182*t4153*t9867 + t179*t6093*t9867 + t9894) + t6093*(t9671 + t9675 + t9676 + t3182*t5427*t9867 - 1.*t179*t6288*t9867 + t9910)) + 0.241*t3124*(t9718 + t9740 + t6288*(t9701 + t9703 + t9704 - 1.*t3202*t8997*t9867 - 1.*t3202*t9061*t9867 + t9923) + t179*t3202*(t9719 + t9724 + t9726 - 1.*t3182*t5427*t9867 + t179*t6288*t9867 + t9947)))*var2[5] - 0.5*(-0.0219*(t8985 + t3182*(t7755*(-0.02*t2030*t2094 + t8964) + t8995 + t3202*t8997*t9035 + t3202*t9035*t9061 + t9072 + t9073)) - 0.085290585*t809*(t6553*(t9114 - 1.*t3202*t8997*t9125 - 1.*t3202*t9061*t9125 + t9187 + t9218 + t9225) + t9248 + t179*t3202*(-1.*t3182*t3243*t9125 + t179*t6553*t9125 + t9252 + t9254 + t9261 + t9265) + t9278) + 0.085290585*t507*(t9294*(t3202*t8997*t9125 + t3202*t9061*t9125 + t9298 + t9301 + t9303 + t9305) + t9330 + t179*t3202*(t3182*t3369*t9125 - 1.*t179*t9125*t9294 + t9333 + t9339 + t9342 + t9343) + t9360) + 1.527*t1946*(t9294*(t3182*t3243*t9125 - 1.*t179*t6553*t9125 + t9369 + t9372 + t9384 + t9385) + t9404 + t6553*(-1.*t3182*t3369*t9125 + t179*t9125*t9294 + t9407 + t9409 + t9412 + t9414) + t9454) + 0.008474765*t2559*(t6093*(t9483 + t3202*t8997*t9487 + t3202*t9061*t9487 + t9543 + t9563 + t9576) + t9586 + t179*t3202*(t3182*t4153*t9487 - 1.*t179*t6093*t9487 + t9589 + t9591 + t9592 + t9595) + t9618) + 0.241*t2915*(t6288*(-1.*t3182*t4153*t9487 + t179*t6093*t9487 + t9625 + t9627 + t9628 + t9629) + t9667 + t6093*(t3182*t5427*t9487 - 1.*t179*t6288*t9487 + t9671 + t9672 + t9675 + t9676) + t9689) + 0.241*t3124*(t6288*(-1.*t3202*t8997*t9487 - 1.*t3202*t9061*t9487 + t9698 + t9701 + t9703 + t9704) + t9718 + t179*t3202*(-1.*t3182*t5427*t9487 + t179*t6288*t9487 + t9719 + t9721 + t9724 + t9726) + t9740))*var2[9] - 0.5*(t10514 + t10532 + 0.008474765*t2559*(t10629 + (t10630 + t10589*t179*t3202 - 1.*t10594*t3182*t3202)*t6093 + t179*t3202*(t10645 + t10649 + t10652 + t10653 - 1.*t10594*t4153 - 1.*t10589*t6093)) + 0.241*t10520*t6537 - 0.085290585*t507*(t6553*t9247 + t179*t3202*t9276) + 0.085290585*t507*((t10431 + t10406*t179*t3202 - 1.*t10410*t3182*t3202)*t9294 + t179*t3202*(t10444 + t10445 - 1.*t10410*t3369 - 1.*t6605*t9216 - 1.*t8432*t9223 - 1.*t10406*t9294) + t6605*t9329) - 0.085290585*t809*(t9294*t9329 + t179*t3202*t9358) - 0.085290585*t809*((t10395 - 1.*t10406*t179*t3202 + t10410*t3182*t3202)*t6553 + t9247*t9294 + t179*t3202*(t10417 + t10410*t3243 + t10406*t6553 + t9431 + t9432 + t9442)) + 1.527*t6475*(t9294*t9403 + t6553*t9453) + 1.527*t1946*(t6553*(t10492 + t10493 + t10410*t3369 + t6605*t9216 + t8432*t9223 + t10406*t9294) + t9294*(t10480 - 1.*t10410*t3243 - 1.*t10406*t6553 + t9353 + t9356 + t9357) + t6605*t9403 + t9294*t9453) + 0.241*t2915*(t10660 + t10661 + (t10678 + t10680 + t10689 + t10691 + t10594*t4153 + t10589*t6093)*t6288 + t6093*(t10663 - 1.*t10594*t5427 - 1.*t10589*t6288 + t9602 + t9605 + t9611)) + 0.241*t3124*(t10541 + (t10549 - 1.*t10589*t179*t3202 + t10594*t3182*t3202)*t6288 + t179*t3202*(t10605 + t10594*t5427 + t10589*t6288 + t9654 + t9658 + t9661)))*var2[10] - 0.5*(t10514 + t10532 + 0.241*t10520*t6043 + 0.008474765*t2559*(t10629 + (t10755 + t10720*t179*t3202 - 1.*t10728*t3182*t3202)*t6093 + t179*t3202*(t10649 + t10652 + t10653 + t10772 - 1.*t10728*t4153 - 1.*t10720*t6093)) + 0.241*t2915*(t10660 + t10661 + (t10680 + t10689 + t10691 + t10793 + t10728*t4153 + t10720*t6093)*t6288 + t6093*(t10786 - 1.*t10728*t5427 - 1.*t10720*t6288 + t9602 + t9605 + t9611)) + 0.241*t3124*(t10541 + (t10711 - 1.*t10720*t179*t3202 + t10728*t3182*t3202)*t6288 + t179*t3202*(t10736 + t10728*t5427 + t10720*t6288 + t9654 + t9658 + t9661)))*var2[11]);
  p_output1[4]=var2[9]*(-0.5*(t10807 - 0.085290585*t809*(t10810 + t10832 + t7922*(t10816 + t9187 + t9761 - 1.*t3202*t9766) + t7755*(t10811 + t9254 + t3224*t9766 + t9776)) + 0.085290585*t507*(t10838 + t10856 + t7972*(t10840 + t9301 + t3202*t9766 + t9796) + t7755*(t10849 + t9333 - 1.*t3359*t9766 + t9805)) + 1.527*t1946*(t10873 + t10886 + t7972*(t10862 + t9372 - 1.*t3224*t9766 + t9819) + t7922*(t10876 + t9407 + t3359*t9766 + t9837)) + 0.008474765*t2559*(t10896 + t10909 + t8026*(t10897 + t9543 + t9860 + t3202*t9867) + t7755*(t10911 + t9589 - 1.*t3878*t9867 + t9882)) + 0.241*t2915*(t10918 + t10929 + t8078*(t10921 + t9625 + t3878*t9867 + t9894) + t8026*(t10931 + t9671 - 1.*t5124*t9867 + t9910)) + 0.241*t3124*(t10942 + t10953 + t8078*(t10943 + t9701 - 1.*t3202*t9867 + t9923) + t7755*(t10956 + t9719 + t5124*t9867 + t9947)))*var2[5] - 0.5*(t10807 - 0.085290585*t809*(t10810 + t10832 + t7922*(t10816 + t9114 - 1.*t3202*t9125 + t9187) + t7755*(t10811 + t3224*t9125 + t9252 + t9254)) + 0.085290585*t507*(t10838 + t10856 + t7972*(t10840 + t3202*t9125 + t9298 + t9301) + t7755*(t10849 - 1.*t3359*t9125 + t9333 + t9339)) + 1.527*t1946*(t10873 + t10886 + t7972*(t10862 - 1.*t3224*t9125 + t9369 + t9372) + t7922*(t10876 + t3359*t9125 + t9407 + t9409)) + 0.008474765*t2559*(t10896 + t10909 + t8026*(t10897 + t9483 + t3202*t9487 + t9543) + t7755*(t10911 - 1.*t3878*t9487 + t9589 + t9591)) + 0.241*t2915*(t10918 + t10929 + t8078*(t10921 + t3878*t9487 + t9625 + t9627) + t8026*(t10931 - 1.*t5124*t9487 + t9671 + t9672)) + 0.241*t3124*(t10942 + t10953 + t8078*(t10943 - 1.*t3202*t9487 + t9698 + t9701) + t7755*(t10956 + t5124*t9487 + t9719 + t9721)))*var2[9] - 0.5*(t11114 + t11153 + 0.241*t11120*t6537 - 0.085290585*t507*(t10830*t7755 + t10809*t7922) + 1.527*t6475*(t10881*t7922 + t10871*t7972) + 0.008474765*t2559*(t11196 + (t10645 + t10649 + t11205 + t11209 + t2727 - 1.*t10576*t3878)*t7755 + (t10630 + t10576*t3202)*t8026) - 0.085290585*(t10855*t7755 + t10836*t7972)*t809 + 0.085290585*t507*(t10836*t3070 + (t10431 + t10399*t3202)*t7972 + t7755*(t10444 + t10445 + t10828 + t1093 - 1.*t10399*t3359 - 1.*t6592*t9211)) + 1.527*t1946*(t10871*t3070 + t10881*t7972 + t7922*(t10492 + t10493 + t11091 + t1615 + t10399*t3359 + t6592*t9211) + t7972*(t10480 + t10853 + t1796 - 1.*t10399*t3224 + t6404 + t9353)) - 0.085290585*t809*((t10395 - 1.*t10399*t3202)*t7922 + t10809*t7972 + t7755*(t10417 + t10880 + t1763 + t10399*t3224 + t1008*t809 + t9431)) + 0.241*t2915*(t11215 + t11217 + (t10678 + t10680 + t11228 + t10576*t3878 + t5865 + t6530)*t8078 + t8026*(t10663 + t10906 - 1.*t10576*t5124 + t5768 + t6482 + t9602)) + 0.241*t3124*(t11155 + (t10549 - 1.*t10576*t3202)*t8078 + t7755*(t10605 + t10916 + t2680*t2724 + t2890 + t10576*t5124 + t9654)))*var2[10] - 0.5*(t11114 + t11153 + 0.241*t11120*t6043 + 0.008474765*t2559*(t11196 + (t10649 + t10772 + t11205 + t11209 - 1.*t10717*t3878 - 1.*t2559*t5715)*t7755 + (t10755 + t10717*t3202)*t8026) + 0.241*t2915*(t11215 + t11217 + (t10680 + t10793 + t11228 + t10717*t3878 + t5865 + t5985)*t8078 + t8026*(t10786 + t10906 - 1.*t10717*t5124 + t5728 + t5768 + t9602)) + 0.241*t3124*(t11155 + (t10711 - 1.*t10717*t3202)*t8078 + t7755*(t10736 + t10916 + t2890 + t10717*t5124 + t2680*t5715 + t9654)))*var2[11]);
  p_output1[5]=var2[9]*(-0.5*(-0.0219*(-0.02*t2047*t2094 - 1.*t2047*t8959) + 0.085290585*Power(t507,2)*(t2047*t9090 + t2094*t9098 + t2094*t9166 - 1.*t2047*t9177) - 0.085290585*Power(t809,2)*(-1.*t2047*t9090 - 1.*t2094*t9098 - 1.*t2094*t9166 + t2047*t9177) + 1.527*t1946*(t507*(-1.*t2094*t507*t9090 + t2047*t507*t9098 + t2047*t507*t9166 + t2094*t507*t9177) + t809*(-1.*t2094*t809*t9090 + t2047*t809*t9098 + t2047*t809*t9166 + t2094*t809*t9177)) + 0.008474765*Power(t2559,2)*(t2047*t9471 + t2094*t9478 + t2094*t9521 - 1.*t2047*t9531) + 0.241*t2680*t3124*(-1.*t2047*t9471 - 1.*t2094*t9478 - 1.*t2094*t9521 + t2047*t9531) + 0.241*t2915*(t2559*(-1.*t2094*t2559*t9471 + t2047*t2559*t9478 + t2047*t2559*t9521 + t2094*t2559*t9531) + t2680*(t2094*t2853*t9471 - 1.*t2047*t2853*t9478 - 1.*t2047*t2853*t9521 - 1.*t2094*t2853*t9531)))*var2[9] - 0.5*(t11579 + t11583 + t11587 + 0.241*t2915*(t11594 + t11606 + t2559*(t11595 + t11597 + t5768 + t6482 - 1.*t11551*t2559*t6498 - 1.*t11555*t2559*t6498) + t2680*(t11610 + t11611 + t5865 + t11551*t2853*t6498 + t11555*t2853*t6498 + t6530)) + 0.241*t11622*t6537 + 1.527*t6475*(t11540*t507 + t11531*t809) - 0.17058117*t507*t809*(-1.*t2047*t9166 - 1.*t2094*t9177) - 0.17058117*t507*t809*(t2047*t9166 + t2094*t9177) + 1.527*t1946*(t11531*t507 - 1.*t11540*t809 + t809*(t11091 + t11533 + t11539 + t1615 - 1.*t11551*t6413*t809 - 1.*t11555*t6413*t809) + t507*(t1796 + t6404 - 1.*t11551*t507*t6413 - 1.*t11555*t507*t6413 + t2094*t809*t9166 - 1.*t2047*t809*t9177)))*var2[10] - 0.5*(t11579 + t11583 + t11587 + 0.241*t2915*(t11594 + t11606 + t2559*(t11595 + t11597 + t5728 + t5768 - 1.*t11551*t2559*t5831 - 1.*t11555*t2559*t5831) + t2680*(t11610 + t11611 + t11551*t2853*t5831 + t11555*t2853*t5831 + t5865 + t5985)) + 0.241*t11622*t6043)*var2[11]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=var2[9]*(-0.5*(t11662 + t11664 + 3.054*t1946*t6475 + 0.482*t2915*t6537)*var2[10] - 0.5*(t11662 + t11664 + 0.482*t2915*t6043)*var2[11]);
  p_output1[10]=var2[9]*(-0.5*(t11699 + t11706 + 0.0034116234*t507 - 0.0034116234*t809)*var2[10] - 0.5*(t11699 + t11706 + 0.241*t3124*(-0.242889*t2535 + t2535*t2643 - 1.*t2552*t2669 + t2552*t5531 + t2535*t5668) + 0.008474765*t2559*(t11700 + t11701 + t11702 - 1.*t2535*t5531 + t2552*t5668))*var2[11]);
  p_output1[11]=var2[9]*(-0.5*t11745*var2[10] - 0.5*t11745*var2[11]);
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec10_plane.hh"

namespace SymFunction
{

void Ce1_vec10_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
