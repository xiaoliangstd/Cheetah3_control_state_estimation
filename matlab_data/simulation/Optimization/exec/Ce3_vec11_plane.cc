/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:53:59 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t417;
  double t464;
  double t500;
  double t363;
  double t536;
  double t107;
  double t783;
  double t707;
  double t745;
  double t1098;
  double t1787;
  double t1871;
  double t1803;
  double t1807;
  double t2090;
  double t2134;
  double t2176;
  double t1916;
  double t1983;
  double t1993;
  double t1994;
  double t1840;
  double t1846;
  double t1884;
  double t1888;
  double t2364;
  double t2410;
  double t2445;
  double t474;
  double t540;
  double t633;
  double t882;
  double t1104;
  double t1134;
  double t1153;
  double t1154;
  double t1176;
  double t1297;
  double t1407;
  double t1416;
  double t1461;
  double t1499;
  double t1526;
  double t1541;
  double t1608;
  double t1656;
  double t1898;
  double t1914;
  double t2016;
  double t2058;
  double t2178;
  double t2201;
  double t2253;
  double t2496;
  double t2525;
  double t2582;
  double t2615;
  double t2631;
  double t2638;
  double t2726;
  double t2753;
  double t2774;
  double t2790;
  double t2813;
  double t2842;
  double t2844;
  double t2877;
  double t2889;
  double t2895;
  double t2910;
  double t2917;
  double t2982;
  double t3009;
  double t3030;
  double t3040;
  double t3803;
  double t3851;
  double t3861;
  double t3879;
  double t3881;
  double t3886;
  double t3939;
  double t3946;
  double t3966;
  double t3983;
  double t3992;
  double t4005;
  double t4512;
  double t4515;
  double t4523;
  double t4449;
  double t4453;
  double t4461;
  double t4462;
  double t4463;
  double t4465;
  double t4470;
  double t4472;
  double t4483;
  double t4498;
  double t4499;
  double t4506;
  double t4511;
  double t4534;
  double t4550;
  double t4553;
  double t4554;
  double t4560;
  double t4561;
  double t4567;
  double t4573;
  double t4619;
  double t4621;
  double t4622;
  double t4493;
  double t4581;
  double t4582;
  double t4698;
  double t4711;
  double t4712;
  double t4431;
  double t4445;
  double t4448;
  double t4683;
  double t4684;
  double t4694;
  double t4653;
  double t4665;
  double t4671;
  double t4831;
  double t4846;
  double t4847;
  double t5043;
  double t5056;
  double t5062;
  double t5064;
  double t5036;
  double t5037;
  double t5039;
  double t5041;
  double t5065;
  double t5067;
  double t5094;
  double t5096;
  double t5101;
  double t5102;
  double t5103;
  double t5105;
  double t5112;
  double t5113;
  double t5114;
  double t5258;
  double t5274;
  double t5290;
  double t5011;
  double t5017;
  double t5032;
  double t5040;
  double t5107;
  double t5108;
  double t5241;
  double t5247;
  double t5251;
  double t5440;
  double t5465;
  double t5580;
  double t6167;
  double t6257;
  double t6269;
  double t6275;
  double t6277;
  double t6292;
  double t6316;
  double t6329;
  double t6343;
  double t6361;
  double t6371;
  double t6386;
  double t4696;
  double t6947;
  double t6980;
  double t7004;
  double t4793;
  double t4857;
  double t7054;
  double t7060;
  double t7063;
  double t4908;
  double t5252;
  double t5356;
  double t7290;
  double t7300;
  double t7308;
  double t5802;
  double t5993;
  double t7067;
  double t7077;
  double t4697;
  double t4720;
  double t4728;
  double t6901;
  double t7025;
  double t4797;
  double t4804;
  double t4806;
  double t7166;
  double t7774;
  double t7785;
  double t7179;
  double t4858;
  double t4860;
  double t4864;
  double t7211;
  double t7215;
  double t4917;
  double t4927;
  double t4934;
  double t7279;
  double t7324;
  double t5254;
  double t5291;
  double t5310;
  double t7366;
  double t7368;
  double t5357;
  double t5386;
  double t5415;
  double t7487;
  double t7594;
  double t5804;
  double t5811;
  double t5815;
  double t7704;
  double t7708;
  double t6046;
  double t6047;
  double t6054;
  double t8197;
  double t8200;
  double t8206;
  double t8220;
  double t8221;
  double t8254;
  double t8262;
  double t8264;
  double t8270;
  double t8272;
  double t6272;
  double t6302;
  double t6358;
  double t6395;
  double t6408;
  double t6416;
  double t6439;
  double t6452;
  double t6466;
  double t6483;
  double t6505;
  double t6526;
  double t6531;
  double t6542;
  double t6555;
  double t6558;
  double t6565;
  double t6567;
  double t6580;
  double t6581;
  double t6582;
  double t6584;
  double t6611;
  double t6636;
  double t6638;
  double t6664;
  double t6665;
  double t6667;
  double t6670;
  double t6673;
  double t6676;
  double t6677;
  double t6678;
  double t6691;
  double t6723;
  double t6736;
  double t6765;
  double t6781;
  double t6812;
  double t6828;
  double t6850;
  double t6864;
  double t6868;
  double t6894;
  double t6896;
  double t6937;
  double t8327;
  double t8332;
  double t8334;
  double t7064;
  double t8339;
  double t8340;
  double t8341;
  double t7097;
  double t7101;
  double t7104;
  double t7127;
  double t7137;
  double t7138;
  double t7139;
  double t7164;
  double t7212;
  double t7235;
  double t7244;
  double t7254;
  double t7256;
  double t7264;
  double t7267;
  double t7269;
  double t7270;
  double t7336;
  double t7337;
  double t7341;
  double t7360;
  double t8443;
  double t8448;
  double t8451;
  double t8422;
  double t8425;
  double t8431;
  double t7370;
  double t7405;
  double t7418;
  double t7443;
  double t7477;
  double t7665;
  double t7690;
  double t7692;
  double t7693;
  double t7710;
  double t8356;
  double t7799;
  double t7801;
  double t7829;
  double t8336;
  double t7847;
  double t7858;
  double t7880;
  double t8381;
  double t7917;
  double t7945;
  double t7952;
  double t8398;
  double t7956;
  double t7968;
  double t7996;
  double t8433;
  double t8023;
  double t8034;
  double t8041;
  double t8480;
  double t8050;
  double t8051;
  double t8068;
  double t8509;
  double t8095;
  double t8098;
  double t8105;
  double t8533;
  double t8107;
  double t8108;
  double t8123;
  double t8841;
  double t8845;
  double t8849;
  double t8869;
  double t8888;
  double t8895;
  double t8939;
  double t8945;
  double t8950;
  double t8986;
  double t8991;
  double t8996;
  double t3311;
  double t3351;
  double t3377;
  double t3481;
  double t3491;
  double t3572;
  double t9031;
  double t9037;
  double t9045;
  double t9055;
  double t9060;
  double t9064;
  double t9134;
  double t9136;
  double t9141;
  double t9142;
  double t9143;
  double t9149;
  double t9151;
  double t9154;
  double t9251;
  double t9255;
  double t9256;
  double t9261;
  double t9263;
  double t9271;
  double t9272;
  double t9277;
  double t9279;
  double t9280;
  double t9156;
  double t9175;
  double t9179;
  double t9400;
  double t9401;
  double t9407;
  double t9416;
  double t9418;
  double t9420;
  double t8908;
  double t8909;
  double t9197;
  double t9220;
  double t9226;
  double t9284;
  double t9303;
  double t9306;
  double t9578;
  double t9581;
  double t9582;
  double t9585;
  double t9587;
  double t9588;
  double t8931;
  double t8963;
  double t8969;
  double t9329;
  double t9354;
  double t9374;
  double t9757;
  double t9760;
  double t9738;
  double t9739;
  double t9740;
  double t8803;
  double t8810;
  double t8811;
  double t8812;
  double t8815;
  double t8816;
  double t8819;
  double t8822;
  double t9697;
  double t9722;
  double t9742;
  double t9751;
  double t9764;
  double t9767;
  double t9777;
  double t9778;
  double t9781;
  double t8838;
  double t8839;
  double t8851;
  double t8852;
  double t8858;
  double t8930;
  double t8970;
  double t9018;
  double t9019;
  double t9029;
  double t9030;
  double t9052;
  double t9070;
  double t9071;
  double t9080;
  double t9112;
  double t3666;
  double t3677;
  double t3679;
  double t9114;
  double t9116;
  double t9121;
  double t9125;
  double t9246;
  double t10047;
  double t10052;
  double t10054;
  double t9297;
  double t9300;
  double t10057;
  double t10059;
  double t10072;
  double t10086;
  double t10089;
  double t10092;
  double t9317;
  double t9343;
  double t10103;
  double t10114;
  double t10118;
  double t9371;
  double t9573;
  double t10095;
  double t10124;
  double t9600;
  double t9601;
  double t10251;
  double t10252;
  double t10255;
  double t10259;
  double t10262;
  double t10268;
  double t9643;
  double t10146;
  double t10176;
  double t9672;
  double t9676;
  t417 = Cos(var1[10]);
  t464 = Cos(var1[5]);
  t500 = Sin(var1[9]);
  t363 = Cos(var1[9]);
  t536 = Sin(var1[5]);
  t107 = Sin(var1[3]);
  t783 = Sin(var1[10]);
  t707 = Cos(var1[3]);
  t745 = Cos(var1[4]);
  t1098 = Sin(var1[4]);
  t1787 = Cos(var1[11]);
  t1871 = Sin(var1[11]);
  t1803 = -1.*t1787;
  t1807 = 1. + t1803;
  t2090 = -1.*t1787*t783;
  t2134 = -1.*t417*t1871;
  t2176 = t2090 + t2134;
  t1916 = 0.100689*t1807;
  t1983 = 0.080689*t1787;
  t1993 = -0.16*t1871;
  t1994 = t1916 + t1983 + t1993;
  t1840 = -0.20833*t1807;
  t1846 = -0.36833*t1787;
  t1884 = 0.02*t1871;
  t1888 = t1840 + t1846 + t1884;
  t2364 = t417*t1787;
  t2410 = -1.*t783*t1871;
  t2445 = t2364 + t2410;
  t474 = t363*t417*t464;
  t540 = -1.*t417*t500*t536;
  t633 = t474 + t540;
  t882 = t745*t783;
  t1104 = -1.*t417*t464*t500;
  t1134 = -1.*t363*t417*t536;
  t1153 = t1104 + t1134;
  t1154 = -1.*t1098*t1153;
  t1176 = t882 + t1154;
  t1297 = -1.*t363*t464*t783;
  t1407 = t500*t783*t536;
  t1416 = t1297 + t1407;
  t1461 = t417*t745;
  t1499 = t464*t500*t783;
  t1526 = t363*t783*t536;
  t1541 = t1499 + t1526;
  t1608 = -1.*t1098*t1541;
  t1656 = t1461 + t1608;
  t1898 = t1787*t1888;
  t1914 = -0.242889*t1871;
  t2016 = t1994*t1871;
  t2058 = t1898 + t1914 + t2016;
  t2178 = t363*t464*t2176;
  t2201 = -1.*t500*t2176*t536;
  t2253 = t2178 + t2201;
  t2496 = t745*t2445;
  t2525 = -1.*t464*t500*t2176;
  t2582 = -1.*t363*t2176*t536;
  t2615 = t2525 + t2582;
  t2631 = -1.*t1098*t2615;
  t2638 = t2496 + t2631;
  t2726 = 0.242889*t1787;
  t2753 = -1.*t1787*t1994;
  t2774 = t1888*t1871;
  t2790 = t2726 + t2753 + t2774;
  t2813 = t363*t464*t2445;
  t2842 = -1.*t500*t2445*t536;
  t2844 = t2813 + t2842;
  t2877 = t1787*t783;
  t2889 = t417*t1871;
  t2895 = t2877 + t2889;
  t2910 = t745*t2895;
  t2917 = -1.*t464*t500*t2445;
  t2982 = -1.*t363*t2445*t536;
  t3009 = t2917 + t2982;
  t3030 = -1.*t1098*t3009;
  t3040 = t2910 + t3030;
  t3803 = -1.*t783*t1098;
  t3851 = -1.*t745*t1153;
  t3861 = t3803 + t3851;
  t3879 = -1.*t417*t1098;
  t3881 = -1.*t745*t1541;
  t3886 = t3879 + t3881;
  t3939 = -1.*t2445*t1098;
  t3946 = -1.*t745*t2615;
  t3966 = t3939 + t3946;
  t3983 = -1.*t2895*t1098;
  t3992 = -1.*t745*t3009;
  t4005 = t3983 + t3992;
  t4512 = -0.04*t417;
  t4515 = 0.04*t783;
  t4523 = t4512 + t4515;
  t4449 = t363*t464;
  t4453 = -1.*t500*t536;
  t4461 = t4449 + t4453;
  t4462 = -1.*t417;
  t4463 = 1. + t4462;
  t4465 = 0.242889*t4463;
  t4470 = 0.202889*t417;
  t4472 = -0.04*t783;
  t4483 = t4465 + t4470 + t4472;
  t4498 = -1.*t363;
  t4499 = 1. + t4498;
  t4506 = 0.081715*t4499;
  t4511 = 0.13757*t363;
  t4534 = -1.*t500*t4523;
  t4550 = t4506 + t4511 + t4534;
  t4553 = t464*t4550;
  t4554 = 0.055855*t500;
  t4560 = t363*t4523;
  t4561 = t4554 + t4560;
  t4567 = -1.*t4561*t536;
  t4573 = t4553 + t4567;
  t4619 = t4483*t1098;
  t4621 = t745*t4573;
  t4622 = t4619 + t4621;
  t4493 = -1.*t4483*t1098;
  t4581 = -1.*t745*t4573;
  t4582 = t4493 + t4581;
  t4698 = t745*t4483;
  t4711 = -1.*t1098*t4573;
  t4712 = t4698 + t4711;
  t4431 = t783*t1098;
  t4445 = t745*t1153;
  t4448 = t4431 + t4445;
  t4683 = t464*t4561;
  t4684 = t4550*t536;
  t4694 = t4683 + t4684;
  t4653 = t464*t500;
  t4665 = t363*t536;
  t4671 = t4653 + t4665;
  t4831 = t417*t1098;
  t4846 = t745*t1541;
  t4847 = t4831 + t4846;
  t5043 = 0.242889*t783;
  t5056 = -1.*t783*t1994;
  t5062 = t417*t1888;
  t5064 = t5043 + t5056 + t5062;
  t5036 = t417*t1994;
  t5037 = t783*t1888;
  t5039 = t4465 + t5036 + t5037;
  t5041 = 0.11688*t363;
  t5065 = -1.*t500*t5064;
  t5067 = t4506 + t5041 + t5065;
  t5094 = t464*t5067;
  t5096 = 0.035165*t500;
  t5101 = t363*t5064;
  t5102 = t5096 + t5101;
  t5103 = -1.*t5102*t536;
  t5105 = t5094 + t5103;
  t5112 = t5039*t1098;
  t5113 = t745*t5105;
  t5114 = t5112 + t5113;
  t5258 = t745*t5039;
  t5274 = -1.*t1098*t5105;
  t5290 = t5258 + t5274;
  t5011 = t2445*t1098;
  t5017 = t745*t2615;
  t5032 = t5011 + t5017;
  t5040 = -1.*t5039*t1098;
  t5107 = -1.*t745*t5105;
  t5108 = t5040 + t5107;
  t5241 = t464*t5102;
  t5247 = t5067*t536;
  t5251 = t5241 + t5247;
  t5440 = t2895*t1098;
  t5465 = t745*t3009;
  t5580 = t5440 + t5465;
  t6167 = -1.*t363*t417*t464;
  t6257 = t417*t500*t536;
  t6269 = t6167 + t6257;
  t6275 = t363*t464*t783;
  t6277 = -1.*t500*t783*t536;
  t6292 = t6275 + t6277;
  t6316 = -1.*t363*t464*t2176;
  t6329 = t500*t2176*t536;
  t6343 = t6316 + t6329;
  t6361 = -1.*t363*t464*t2445;
  t6371 = t500*t2445*t536;
  t6386 = t6361 + t6371;
  t4696 = -1.*t4671*t4694;
  t6947 = -1.*t464*t4561;
  t6980 = -1.*t4550*t536;
  t7004 = t6947 + t6980;
  t4793 = t633*t4694;
  t4857 = t4671*t4694;
  t7054 = -1.*t464*t500;
  t7060 = -1.*t363*t536;
  t7063 = t7054 + t7060;
  t4908 = -1.*t4694*t1416;
  t5252 = t4671*t5251;
  t5356 = -1.*t5251*t2253;
  t7290 = -1.*t464*t5102;
  t7300 = -1.*t5067*t536;
  t7308 = t7290 + t7300;
  t5802 = -1.*t4671*t5251;
  t5993 = t5251*t2844;
  t7067 = -1.*t4671*t4573;
  t7077 = -1.*t4461*t4694;
  t4697 = -1.*t745*t4461*t4622;
  t4720 = t1098*t4461*t4712;
  t4728 = t4696 + t4697 + t4720;
  t6901 = t633*t4573;
  t7025 = t1153*t4694;
  t4797 = t4448*t4622;
  t4804 = t1176*t4712;
  t4806 = t4793 + t4797 + t4804;
  t7166 = t4671*t4573;
  t7774 = Power(t745,2);
  t7785 = Power(t1098,2);
  t7179 = t4461*t4694;
  t4858 = t745*t4461*t4622;
  t4860 = -1.*t1098*t4461*t4712;
  t4864 = t4857 + t4858 + t4860;
  t7211 = -1.*t4694*t1541;
  t7215 = -1.*t4573*t1416;
  t4917 = -1.*t4622*t4847;
  t4927 = -1.*t4712*t1656;
  t4934 = t4908 + t4917 + t4927;
  t7279 = t4671*t5105;
  t7324 = t4461*t5251;
  t5254 = t745*t4461*t5114;
  t5291 = -1.*t1098*t4461*t5290;
  t5310 = t5252 + t5254 + t5291;
  t7366 = -1.*t5251*t2615;
  t7368 = -1.*t5105*t2253;
  t5357 = -1.*t5114*t5032;
  t5386 = -1.*t5290*t2638;
  t5415 = t5356 + t5357 + t5386;
  t7487 = -1.*t4671*t5105;
  t7594 = -1.*t4461*t5251;
  t5804 = -1.*t745*t4461*t5114;
  t5811 = t1098*t4461*t5290;
  t5815 = t5802 + t5804 + t5811;
  t7704 = t5251*t3009;
  t7708 = t5105*t2844;
  t6046 = t5114*t5580;
  t6047 = t5290*t3040;
  t6054 = t5993 + t6046 + t6047;
  t8197 = -0.055855*t500;
  t8200 = -1.*t363*t4523;
  t8206 = t8197 + t8200;
  t8220 = 0.055855*t363;
  t8221 = t8220 + t4534;
  t8254 = -0.035165*t500;
  t8262 = -1.*t363*t5064;
  t8264 = t8254 + t8262;
  t8270 = 0.035165*t363;
  t8272 = t8270 + t5065;
  t6272 = -0.06108*t745*t6269;
  t6302 = 0.06108*t745*t6292;
  t6358 = -0.241*t745*t2058*t6343;
  t6395 = -0.241*t745*t2790*t6386;
  t6408 = t6272 + t6302 + t6358 + t6395;
  t6416 = -0.5*var2[0]*t6408;
  t6439 = t107*t1153;
  t6452 = -1.*t707*t1098*t6269;
  t6466 = t6439 + t6452;
  t6483 = -0.06108*t6466;
  t6505 = t107*t1541;
  t6526 = -1.*t707*t1098*t6292;
  t6531 = t6505 + t6526;
  t6542 = 0.06108*t6531;
  t6555 = t107*t2615;
  t6558 = -1.*t707*t1098*t6343;
  t6565 = t6555 + t6558;
  t6567 = -0.241*t2058*t6565;
  t6580 = t107*t3009;
  t6581 = -1.*t707*t1098*t6386;
  t6582 = t6580 + t6581;
  t6584 = -0.241*t2790*t6582;
  t6611 = t6483 + t6542 + t6567 + t6584;
  t6636 = -0.5*var2[2]*t6611;
  t6638 = t707*t1153;
  t6664 = t107*t1098*t6269;
  t6665 = t6638 + t6664;
  t6667 = -0.06108*t6665;
  t6670 = t707*t1541;
  t6673 = t107*t1098*t6292;
  t6676 = t6670 + t6673;
  t6677 = 0.06108*t6676;
  t6678 = t707*t2615;
  t6691 = t107*t1098*t6343;
  t6723 = t6678 + t6691;
  t6736 = -0.241*t2058*t6723;
  t6765 = t707*t3009;
  t6781 = t107*t1098*t6386;
  t6812 = t6765 + t6781;
  t6828 = -0.241*t2790*t6812;
  t6850 = t6667 + t6677 + t6736 + t6828;
  t6864 = -0.5*var2[1]*t6850;
  t6868 = -1.*t4461*t4573;
  t6894 = t6868 + t4696;
  t6896 = t1153*t6894;
  t6937 = t6269*t4573;
  t8327 = t464*t8221;
  t8332 = t8206*t536;
  t8334 = t8327 + t8332;
  t7064 = -1.*t7063*t4573;
  t8339 = t464*t8206;
  t8340 = -1.*t8221*t536;
  t8341 = t8339 + t8340;
  t7097 = t4483*t783;
  t7101 = t1153*t4573;
  t7104 = t7097 + t7101 + t4793;
  t7127 = t4461*t7104;
  t7137 = t4461*t4573;
  t7138 = t7137 + t4857;
  t7139 = t1541*t7138;
  t7164 = t7063*t4573;
  t7212 = -1.*t4573*t6292;
  t7235 = -1.*t417*t4483;
  t7244 = -1.*t4573*t1541;
  t7254 = t7235 + t7244 + t4908;
  t7256 = t4461*t7254;
  t7264 = t4461*t5105;
  t7267 = t7264 + t5252;
  t7269 = t2615*t7267;
  t7270 = t7063*t5105;
  t7336 = -1.*t5039*t2445;
  t7337 = -1.*t5105*t2615;
  t7341 = t7336 + t7337 + t5356;
  t7360 = t4461*t7341;
  t8443 = t464*t8264;
  t8448 = -1.*t8272*t536;
  t8451 = t8443 + t8448;
  t8422 = t464*t8272;
  t8425 = t8264*t536;
  t8431 = t8422 + t8425;
  t7370 = -1.*t5105*t6343;
  t7405 = -1.*t4461*t5105;
  t7418 = t7405 + t5802;
  t7443 = t3009*t7418;
  t7477 = -1.*t7063*t5105;
  t7665 = t5039*t2895;
  t7690 = t5105*t3009;
  t7692 = t7665 + t7690 + t5993;
  t7693 = t4461*t7692;
  t7710 = t5105*t6386;
  t8356 = -1.*t4671*t8334;
  t7799 = -1.*t745*t7063*t4622;
  t7801 = t1098*t7063*t4712;
  t7829 = t745*t6269*t4728;
  t8336 = t633*t8334;
  t7847 = t745*t6269*t4622;
  t7858 = -1.*t1098*t6269*t4712;
  t7880 = t745*t7063*t4806;
  t8381 = t4671*t8334;
  t7917 = t745*t7063*t4622;
  t7945 = -1.*t1098*t7063*t4712;
  t7952 = t745*t6292*t4864;
  t8398 = -1.*t8334*t1416;
  t7956 = -1.*t745*t6292*t4622;
  t7968 = t1098*t6292*t4712;
  t7996 = t745*t7063*t4934;
  t8433 = t4671*t8431;
  t8023 = t745*t7063*t5114;
  t8034 = -1.*t1098*t7063*t5290;
  t8041 = t745*t6343*t5310;
  t8480 = -1.*t8431*t2253;
  t8050 = -1.*t745*t6343*t5114;
  t8051 = t1098*t6343*t5290;
  t8068 = t745*t7063*t5415;
  t8509 = -1.*t4671*t8431;
  t8095 = -1.*t745*t7063*t5114;
  t8098 = t1098*t7063*t5290;
  t8105 = t745*t6386*t5815;
  t8533 = t8431*t2844;
  t8107 = t745*t6386*t5114;
  t8108 = -1.*t1098*t6386*t5290;
  t8123 = t745*t7063*t6054;
  t8841 = -1.*t417*t1787;
  t8845 = t783*t1871;
  t8849 = t8841 + t8845;
  t8869 = t417*t464*t500;
  t8888 = t363*t417*t536;
  t8895 = t8869 + t8888;
  t8939 = -1.*t464*t500*t8849;
  t8945 = -1.*t363*t8849*t536;
  t8950 = t8939 + t8945;
  t8986 = -1.*t745*t783;
  t8991 = -1.*t1098*t8895;
  t8996 = t8986 + t8991;
  t3311 = t707*t1416;
  t3351 = -1.*t107*t1656;
  t3377 = t3311 + t3351;
  t3481 = t707*t2253;
  t3491 = -1.*t107*t2638;
  t3572 = t3481 + t3491;
  t9031 = t363*t464*t8849;
  t9037 = -1.*t500*t8849*t536;
  t9045 = t9031 + t9037;
  t9055 = t745*t2176;
  t9060 = -1.*t1098*t8950;
  t9064 = t9055 + t9060;
  t9134 = 0.04*t417;
  t9136 = t9134 + t4515;
  t9141 = -1.*t464*t500*t9136;
  t9142 = -1.*t363*t9136*t536;
  t9143 = t9141 + t9142;
  t9149 = t363*t464*t9136;
  t9151 = -1.*t500*t9136*t536;
  t9154 = t9149 + t9151;
  t9251 = 0.242889*t417;
  t9255 = -1.*t417*t1994;
  t9256 = -1.*t783*t1888;
  t9261 = t9251 + t9255 + t9256;
  t9263 = -1.*t464*t500*t9261;
  t9271 = -1.*t363*t9261*t536;
  t9272 = t9263 + t9271;
  t9277 = t363*t464*t9261;
  t9279 = -1.*t500*t9261*t536;
  t9280 = t9277 + t9279;
  t9156 = -1.*t4671*t9154;
  t9175 = t633*t9154;
  t9179 = t4694*t1416;
  t9400 = t4523*t1098;
  t9401 = t745*t9143;
  t9407 = t9400 + t9401;
  t9416 = t745*t4523;
  t9418 = -1.*t1098*t9143;
  t9420 = t9416 + t9418;
  t8908 = t745*t8895;
  t8909 = t3803 + t8908;
  t9197 = t4671*t9154;
  t9220 = -1.*t6269*t4694;
  t9226 = -1.*t9154*t1416;
  t9284 = -1.*t4671*t9280;
  t9303 = t5251*t2253;
  t9306 = t9280*t2844;
  t9578 = t5064*t1098;
  t9581 = t745*t9272;
  t9582 = t9578 + t9581;
  t9585 = t745*t5064;
  t9587 = -1.*t1098*t9272;
  t9588 = t9585 + t9587;
  t8931 = t2176*t1098;
  t8963 = t745*t8950;
  t8969 = t8931 + t8963;
  t9329 = t4671*t9280;
  t9354 = -1.*t9280*t2253;
  t9374 = -1.*t5251*t9045;
  t9757 = -0.16*t1787;
  t9760 = t9757 + t1884;
  t9738 = 0.02*t1787;
  t9739 = 0.16*t1871;
  t9740 = t9738 + t9739;
  t8803 = -1.*t500*t5102;
  t8810 = -1.*t363*t5067;
  t8811 = t8803 + t8810;
  t8812 = -0.241*t8811*t2445*t2058;
  t8815 = t500*t5102;
  t8816 = t363*t5067;
  t8819 = t8815 + t8816;
  t8822 = -0.241*t8819*t2176*t2790;
  t9697 = -0.242889*t1787;
  t9722 = t1787*t1994;
  t9742 = t1787*t9740;
  t9751 = -1.*t1888*t1871;
  t9764 = t9760*t1871;
  t9767 = t9697 + t9722 + t9742 + t9751 + t9764;
  t9777 = -1.*t1787*t9760;
  t9778 = t9740*t1871;
  t9781 = t1898 + t9777 + t1914 + t2016 + t9778;
  t8838 = -0.008474765*t2176*t2790;
  t8839 = -0.11688*t2445;
  t8851 = -0.081715*t8849;
  t8852 = t8839 + t8851;
  t8858 = -0.241*t2058*t8852;
  t8930 = -0.241*t2790*t5032;
  t8970 = -0.241*t2058*t8969;
  t9018 = t107*t2253;
  t9019 = t707*t2638;
  t9029 = t9018 + t9019;
  t9030 = -0.241*t2790*t9029;
  t9052 = t107*t9045;
  t9070 = t707*t9064;
  t9071 = t9052 + t9070;
  t9080 = -0.241*t2058*t9071;
  t9112 = -0.241*t2790*t3572;
  t3666 = t707*t2844;
  t3677 = -1.*t107*t3040;
  t3679 = t3666 + t3677;
  t9114 = t707*t9045;
  t9116 = -1.*t107*t9064;
  t9121 = t9114 + t9116;
  t9125 = -0.241*t2058*t9121;
  t9246 = t2253*t7418;
  t10047 = -1.*t783*t9760;
  t10052 = t417*t9740;
  t10054 = t10047 + t10052;
  t9297 = t5039*t2445;
  t9300 = t5105*t2615;
  t10057 = -1.*t464*t500*t10054;
  t10059 = -1.*t363*t10054*t536;
  t10072 = t10057 + t10059;
  t10086 = t363*t464*t10054;
  t10089 = -1.*t500*t10054*t536;
  t10092 = t10086 + t10089;
  t9317 = t9045*t7267;
  t9343 = -1.*t5039*t2176;
  t10103 = t417*t9760;
  t10114 = t783*t9740;
  t10118 = t10103 + t10114;
  t9371 = -1.*t5105*t8950;
  t9573 = t5032*t5815;
  t10095 = -1.*t4671*t10092;
  t10124 = t10092*t2844;
  t9600 = t5114*t5032;
  t9601 = t5290*t2638;
  t10251 = t10118*t1098;
  t10252 = t745*t10072;
  t10255 = t10251 + t10252;
  t10259 = t745*t10118;
  t10262 = -1.*t1098*t10072;
  t10268 = t10259 + t10262;
  t9643 = t8969*t5310;
  t10146 = t4671*t10092;
  t10176 = -1.*t10092*t2253;
  t9672 = -1.*t5114*t8969;
  t9676 = -1.*t5290*t9064;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.06108*(-1.*t107*t633 - 1.*t1176*t707) + 0.06108*(-1.*t107*t1416 - 1.*t1656*t707) - 0.241*t2058*(-1.*t107*t2253 - 1.*t2638*t707) - 0.241*t2790*(-1.*t107*t2844 - 1.*t3040*t707))*var2[1] - 0.5*(0.06108*t3377 - 0.241*t2058*t3572 - 0.241*t2790*t3679 - 0.06108*(-1.*t107*t1176 + t633*t707))*var2[2])*var2[10];
  p_output1[4]=(-0.5*(-0.06108*t1176 + 0.06108*t1656 - 0.241*t2058*t2638 - 0.241*t2790*t3040)*var2[0] - 0.5*(0.06108*t107*t3861 - 0.06108*t107*t3886 + 0.241*t107*t2058*t3966 + 0.241*t107*t2790*t4005)*var2[1] - 0.5*(-0.06108*t3861*t707 + 0.06108*t3886*t707 - 0.241*t2058*t3966*t707 - 0.241*t2790*t4005*t707)*var2[2] - 0.5*(0.06108*(t4448*(t1098*t4461*t4582 + t1098*t4461*t4622) + t1176*t4728 - 1.*t1098*t4461*t4806 + t4461*(t1176*t4582 + t1176*t4622 + t3861*t4712 + t4448*t4712)*t745) - 0.06108*((-1.*t1098*t4461*t4582 - 1.*t1098*t4461*t4622)*t4847 + t1656*t4864 - 1.*t1098*t4461*t4934 + t4461*(-1.*t1656*t4582 - 1.*t1656*t4622 - 1.*t3886*t4712 - 1.*t4712*t4847)*t745) - 0.241*t2790*(t5032*(-1.*t1098*t4461*t5108 - 1.*t1098*t4461*t5114) + t2638*t5310 - 1.*t1098*t4461*t5415 + t4461*(-1.*t2638*t5108 - 1.*t2638*t5114 - 1.*t3966*t5290 - 1.*t5032*t5290)*t745) - 0.241*t2058*((t1098*t4461*t5108 + t1098*t4461*t5114)*t5580 + t3040*t5815 - 1.*t1098*t4461*t6054 + t4461*(t3040*t5108 + t3040*t5114 + t4005*t5290 + t5290*t5580)*t745))*var2[3])*var2[10];
  p_output1[5]=(t6416 + t6636 + t6864 - 0.5*(0.06108*(t4448*(t7067 + t7077 - 1.*t4461*t7004*t7774 - 1.*t4461*t7004*t7785 + t7799 + t7801) + t7829 + t4461*t745*(t6901 - 1.*t1098*t1176*t7004 + t7025 + t4448*t7004*t745 + t7847 + t7858) + t7880) - 0.06108*(t4847*(t7166 + t7179 + t4461*t7004*t7774 + t4461*t7004*t7785 + t7917 + t7945) + t7952 + t4461*t745*(t1098*t1656*t7004 + t7211 + t7215 - 1.*t4847*t7004*t745 + t7956 + t7968) + t7996) - 0.241*t2790*(t5032*(t7279 + t7324 + t4461*t7308*t7774 + t4461*t7308*t7785 + t8023 + t8034) + t8041 + t4461*t745*(t1098*t2638*t7308 + t7366 + t7368 - 1.*t5032*t7308*t745 + t8050 + t8051) + t8068) - 0.241*t2058*(t5580*(t7487 + t7594 - 1.*t4461*t7308*t7774 - 1.*t4461*t7308*t7785 + t8095 + t8098) + t8105 + t4461*t745*(-1.*t1098*t3040*t7308 + t5580*t7308*t745 + t7704 + t7708 + t8107 + t8108) + t8123))*var2[3] - 0.5*(0.06108*(t6896 + t4671*(t6901 + t6937 + t1153*t7004 + t7025) + t633*(-1.*t4461*t7004 + t7064 + t7067 + t7077) + t7127) - 0.06108*(t7139 + t1416*(t4461*t7004 + t7164 + t7166 + t7179) + t4671*(-1.*t1541*t7004 + t7211 + t7212 + t7215) + t7256) - 0.241*t2790*(t7269 + t2253*(t7270 + t7279 + t4461*t7308 + t7324) + t7360 + t4671*(-1.*t2615*t7308 + t7366 + t7368 + t7370)) - 0.241*t2058*(t7443 + t2844*(-1.*t4461*t7308 + t7477 + t7487 + t7594) + t7693 + t4671*(t3009*t7308 + t7704 + t7708 + t7710)))*var2[4])*var2[10];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(t6416 + t6636 + t6864 - 0.5*(0.06108*(t7829 + t7880 + t4461*t745*(t7025 + t7847 + t7858 + t8336 - 1.*t1098*t1176*t8341 + t4448*t745*t8341) + t4448*(t7077 + t7799 + t7801 - 1.*t4461*t7774*t8341 - 1.*t4461*t7785*t8341 + t8356)) - 0.06108*(t7952 + t7996 + t4847*(t7179 + t7917 + t7945 + t4461*t7774*t8341 + t4461*t7785*t8341 + t8381) + t4461*t745*(t7211 + t7956 + t7968 + t1098*t1656*t8341 - 1.*t4847*t745*t8341 + t8398)) - 0.241*t2790*(t8041 + t8068 + t5032*(t7324 + t8023 + t8034 + t8433 + t4461*t7774*t8451 + t4461*t7785*t8451) + t4461*t745*(t7366 + t8050 + t8051 + t1098*t2638*t8451 - 1.*t5032*t745*t8451 + t8480)) - 0.241*t2058*(t8105 + t8123 + t5580*(t7594 + t8095 + t8098 - 1.*t4461*t7774*t8451 - 1.*t4461*t7785*t8451 + t8509) + t4461*t745*(t7704 + t8107 + t8108 - 1.*t1098*t3040*t8451 + t5580*t745*t8451 + t8533)))*var2[3] - 0.5*(0.06108*(t6896 + t7127 + t4671*(t6937 + t7025 + t8336 + t1153*t8341) + t633*(t7064 + t7077 - 1.*t4461*t8341 + t8356)) - 0.06108*(t7139 + t7256 + t1416*(t7164 + t7179 + t4461*t8341 + t8381) + t4671*(t7211 + t7212 - 1.*t1541*t8341 + t8398)) - 0.241*t2790*(t7269 + t7360 + t2253*(t7270 + t7324 + t8433 + t4461*t8451) + t4671*(t7366 + t7370 - 1.*t2615*t8451 + t8480)) - 0.241*t2058*(t7443 + t7693 + t2844*(t7477 + t7594 - 1.*t4461*t8451 + t8509) + t4671*(t7704 + t7710 + t3009*t8451 + t8533)))*var2[4] - 0.5*(0.06108*t783*(-1.*t363*t4561 + t4550*t500 - 1.*t363*t8206 - 1.*t500*t8221) - 0.06108*t417*(t363*t4561 - 1.*t4550*t500 + t363*t8206 + t500*t8221) - 0.241*t2058*t2895*(t500*t5067 - 1.*t363*t5102 - 1.*t363*t8264 - 1.*t500*t8272) - 0.241*t2445*t2790*(-1.*t500*t5067 + t363*t5102 + t363*t8264 + t500*t8272))*var2[5])*var2[10];
  p_output1[10]=(-0.5*(-0.06108*t4847 + 0.06108*t8909 + t8930 + t8970)*var2[0] - 0.5*(-0.06108*t3377 + 0.06108*(t6269*t707 - 1.*t107*t8996) + t9112 + t9125)*var2[1] - 0.5*(-0.06108*(t107*t1416 + t1656*t707) + 0.06108*(t107*t6269 + t707*t8996) + t9030 + t9080)*var2[2] - 0.5*(-0.06108*(t4864*t8909 + t4461*t745*(-1.*t4622*t8909 - 1.*t4712*t8996 + t9220 + t9226 - 1.*t4847*t9407 - 1.*t1656*t9420) + t4847*(t9197 + t4461*t745*t9407 - 1.*t1098*t4461*t9420)) + 0.06108*(t4728*t4847 + t4461*t745*(t1656*t4712 + t4622*t4847 + t9175 + t9179 + t4448*t9407 + t1176*t9420) + t4448*(t9156 - 1.*t4461*t745*t9407 + t1098*t4461*t9420)) - 0.241*t2058*(t9573 + t5580*(t9284 - 1.*t4461*t745*t9582 + t1098*t4461*t9588) + t4461*t745*(t9303 + t9306 + t5580*t9582 + t3040*t9588 + t9600 + t9601)) - 0.241*t2790*(t5032*(t9329 + t4461*t745*t9582 - 1.*t1098*t4461*t9588) + t9643 + t4461*t745*(t9354 + t9374 - 1.*t5032*t9582 - 1.*t2638*t9588 + t9672 + t9676)))*var2[3] - 0.5*(0.06108*(t1416*t6894 + t633*(-1.*t4461*t9143 + t9156) + t4671*(t417*t4483 + t1541*t4573 + t4523*t783 + t1153*t9143 + t9175 + t9179)) - 0.06108*(t6269*t7138 + t1416*(t4461*t9143 + t9197) + t4671*(-1.*t417*t4523 + t7097 - 1.*t4573*t8895 - 1.*t1541*t9143 + t9220 + t9226)) - 0.241*t2058*(t9246 + t2844*(-1.*t4461*t9272 + t9284) + t4671*(t2895*t5064 + t3009*t9272 + t9297 + t9300 + t9303 + t9306)) - 0.241*t2790*(t9317 + t2253*(t4461*t9272 + t9329) + t4671*(-1.*t2445*t5064 - 1.*t2615*t9272 + t9343 + t9354 + t9371 + t9374)))*var2[4] - 0.5*(0.06108*t417*(-1.*t363*t4550 - 1.*t4561*t500) + 0.06108*(t363*t4550 + t4561*t500)*t783 + t8812 + t8822)*var2[5] - 0.5*(-0.0034116234*t417 + 0.0034116234*t783 + t8838 + t8858)*var2[9])*var2[10];
  p_output1[11]=var2[10]*(-0.5*(t8930 + t8970 - 0.241*t5032*t9767 - 0.241*t5580*t9781)*var2[0] - 0.5*(t9112 + t9125 - 0.241*t3572*t9767 - 0.241*t3679*t9781)*var2[1] - 0.5*(t9030 + t9080 - 0.241*t9029*t9767 - 0.241*(t107*t2844 + t3040*t707)*t9781)*var2[2] - 0.5*(-0.241*t2058*(t5580*(t10095 + t10268*t1098*t4461 - 1.*t10255*t4461*t745) + t9573 + t4461*t745*(t10124 + t10268*t3040 + t10255*t5580 + t9303 + t9600 + t9601)) - 0.241*t2790*(t5032*(t10146 - 1.*t10268*t1098*t4461 + t10255*t4461*t745) + t9643 + t4461*t745*(t10176 - 1.*t10268*t2638 - 1.*t10255*t5032 + t9374 + t9672 + t9676)) - 0.241*(t5580*t5815 + t4461*t6054*t745)*t9767 - 0.241*(t5032*t5310 + t4461*t5415*t745)*t9781)*var2[3] - 0.5*(-0.241*t2058*(t2844*(t10095 - 1.*t10072*t4461) + t9246 + t4671*(t10124 + t10118*t2895 + t10072*t3009 + t9297 + t9300 + t9303)) - 0.241*t2790*(t2253*(t10146 + t10072*t4461) + t9317 + t4671*(t10176 - 1.*t10118*t2445 - 1.*t10072*t2615 + t9343 + t9371 + t9374)) - 0.241*(t2844*t7418 + t4671*t7692)*t9767 - 0.241*(t2253*t7267 + t4671*t7341)*t9781)*var2[4] - 0.5*(t8812 + t8822 - 0.241*t2895*t8811*t9767 - 0.241*t2445*t8819*t9781)*var2[5] - 0.5*(t8838 + t8858 - 0.241*(-0.081715*t2176 - 0.11688*t2895)*t9767 - 0.008474765*t2445*t9781)*var2[9] - 0.5*(-0.482*t2058*t9767 - 0.482*t2790*t9781)*var2[10] - 0.5*(0.03856*t9767 - 0.00482*t9781)*var2[11]);
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec11_plane.hh"

namespace SymFunction
{

void Ce3_vec11_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
