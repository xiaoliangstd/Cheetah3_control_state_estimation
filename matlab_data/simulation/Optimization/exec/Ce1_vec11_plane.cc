/*
 * Automatically Generated from Mathematica.
 * Sun 28 Jul 2019 02:50:08 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t281;
  double t102;
  double t160;
  double t311;
  double t552;
  double t966;
  double t560;
  double t1429;
  double t2148;
  double t1455;
  double t1460;
  double t2581;
  double t2612;
  double t2771;
  double t2337;
  double t2403;
  double t2423;
  double t2546;
  double t1775;
  double t2092;
  double t2161;
  double t2173;
  double t3170;
  double t3177;
  double t3183;
  double t315;
  double t691;
  double t711;
  double t805;
  double t1001;
  double t1032;
  double t1141;
  double t1194;
  double t2179;
  double t2324;
  double t2548;
  double t2551;
  double t2792;
  double t2865;
  double t2907;
  double t2952;
  double t2960;
  double t3041;
  double t3044;
  double t3149;
  double t3207;
  double t3209;
  double t3230;
  double t3251;
  double t3257;
  double t3643;
  double t4226;
  double t4232;
  double t4246;
  double t4598;
  double t4750;
  double t4812;
  double t6649;
  double t6682;
  double t6745;
  double t6627;
  double t6632;
  double t6633;
  double t6645;
  double t7525;
  double t7528;
  double t7409;
  double t7422;
  double t7431;
  double t5156;
  double t5432;
  double t5436;
  double t5460;
  double t5593;
  double t5685;
  double t6648;
  double t6779;
  double t6793;
  double t6828;
  double t6835;
  double t6876;
  double t6894;
  double t6271;
  double t3766;
  double t3784;
  double t3874;
  double t8030;
  double t8376;
  double t8437;
  double t8438;
  double t8442;
  double t8464;
  double t8467;
  double t8475;
  double t8486;
  double t8496;
  double t8497;
  double t8499;
  double t8503;
  double t8505;
  double t8506;
  double t8512;
  double t8522;
  double t8527;
  double t8607;
  double t3600;
  double t3905;
  double t4047;
  double t4215;
  double t4282;
  double t4313;
  double t4506;
  double t4988;
  double t5116;
  double t5455;
  double t5757;
  double t5958;
  double t6330;
  double t6391;
  double t6393;
  double t8777;
  double t8784;
  double t8792;
  double t8887;
  double t8894;
  double t8904;
  double t9132;
  double t9134;
  double t9167;
  double t9229;
  double t6964;
  double t7107;
  double t7462;
  double t7513;
  double t7565;
  double t7575;
  double t7579;
  double t7845;
  double t7853;
  double t8915;
  double t8916;
  double t8921;
  double t9231;
  double t9259;
  double t9260;
  double t9266;
  double t9269;
  double t9286;
  double t9287;
  double t9291;
  double t9299;
  double t9300;
  double t8036;
  double t8037;
  double t8048;
  double t8096;
  double t8099;
  double t8104;
  double t8107;
  double t8110;
  double t8242;
  double t8320;
  double t8321;
  double t9449;
  double t9459;
  double t9462;
  double t9490;
  double t9501;
  double t9578;
  double t9579;
  double t9596;
  double t9598;
  double t9599;
  double t9600;
  double t9610;
  double t9617;
  double t9621;
  double t9623;
  double t9631;
  double t9632;
  double t8750;
  double t8760;
  double t8761;
  double t9076;
  double t9077;
  double t9080;
  double t9346;
  double t9348;
  double t9349;
  double t9050;
  double t9065;
  double t9066;
  double t9747;
  double t9752;
  double t9753;
  double t9755;
  double t9756;
  double t9757;
  double t9759;
  double t9760;
  double t9814;
  double t9815;
  double t9821;
  double t9842;
  double t9848;
  double t9851;
  double t9812;
  double t9826;
  double t9829;
  double t9873;
  double t9876;
  double t9878;
  double t9883;
  double t9885;
  double t9886;
  double t9911;
  double t9914;
  double t9916;
  double t9918;
  double t9921;
  double t9895;
  double t9899;
  double t9901;
  double t9939;
  double t9941;
  double t9948;
  double t9949;
  double t9950;
  double t9951;
  double t9957;
  double t9958;
  double t9960;
  double t9967;
  double t9985;
  double t9988;
  double t9806;
  double t9809;
  double t9811;
  double t9907;
  double t9922;
  double t9929;
  double t9962;
  double t9989;
  double t9990;
  double t9992;
  double t9994;
  double t9995;
  double t9834;
  double t9856;
  double t9857;
  double t9800;
  double t9801;
  double t9804;
  double t6556;
  double t6609;
  double t6612;
  double t9868;
  double t9889;
  double t10187;
  double t10188;
  double t10192;
  double t10196;
  double t10223;
  double t10225;
  double t10226;
  double t10177;
  double t10211;
  double t10218;
  double t10237;
  double t10241;
  double t10244;
  double t10261;
  double t10263;
  double t10252;
  double t10253;
  double t10258;
  double t10290;
  double t10291;
  double t10296;
  double t10304;
  double t10307;
  double t10308;
  double t10259;
  double t10270;
  double t10284;
  double t10303;
  double t10312;
  double t10315;
  double t10321;
  double t10322;
  double t10323;
  double t10222;
  double t10228;
  double t10234;
  double t7936;
  double t7940;
  double t7949;
  double t10494;
  double t10497;
  double t10498;
  double t9933;
  double t9991;
  double t9998;
  double t10001;
  double t10004;
  double t10005;
  double t10006;
  double t10010;
  double t10024;
  double t10042;
  double t10044;
  double t10056;
  double t10057;
  double t10063;
  double t10066;
  double t10071;
  double t10090;
  double t10096;
  double t10100;
  double t10113;
  double t10114;
  double t10125;
  double t10127;
  double t10130;
  double t10131;
  double t10145;
  double t10147;
  double t10165;
  double t10166;
  double t10167;
  double t10168;
  double t10172;
  double t10656;
  double t10657;
  double t10659;
  double t10285;
  double t10316;
  double t10324;
  double t10330;
  double t10332;
  double t10338;
  double t10340;
  double t10341;
  double t10342;
  double t10344;
  double t10353;
  double t10369;
  double t10370;
  double t10376;
  double t10378;
  double t10388;
  double t10414;
  double t10418;
  double t10419;
  double t10425;
  double t10427;
  double t10430;
  double t10432;
  double t10433;
  double t10434;
  double t10438;
  double t10446;
  double t10459;
  double t10466;
  double t10471;
  double t10473;
  double t10474;
  double t10765;
  double t10770;
  double t10773;
  double t10841;
  double t10842;
  double t10847;
  double t10947;
  double t10955;
  double t10964;
  double t10965;
  double t10966;
  double t10959;
  double t10960;
  double t10961;
  double t10963;
  double t10969;
  double t10970;
  double t10973;
  double t10974;
  double t10975;
  double t6477;
  double t6487;
  double t11031;
  double t11033;
  double t11034;
  double t11035;
  double t11044;
  double t11045;
  double t11046;
  double t11036;
  double t11039;
  double t11040;
  double t11043;
  double t11047;
  double t11048;
  double t11050;
  double t11051;
  double t11052;
  double t11030;
  double t11171;
  double t11178;
  double t11183;
  double t11193;
  double t11194;
  double t11195;
  double t11201;
  double t11204;
  double t11208;
  double t11057;
  double t11185;
  double t11187;
  double t11189;
  double t11060;
  double t11061;
  double t11198;
  double t11210;
  double t11211;
  double t11214;
  double t11219;
  double t11222;
  double t11069;
  double t11076;
  double t11079;
  double t11080;
  double t10023;
  double t9858;
  double t10082;
  double t10134;
  double t10235;
  double t10343;
  double t10407;
  double t10437;
  double t11299;
  double t11302;
  double t11303;
  double t10505;
  double t11306;
  double t11317;
  double t10491;
  double t11330;
  double t11331;
  double t11332;
  double t11333;
  double t11340;
  double t11341;
  double t11342;
  double t11344;
  double t10607;
  double t11360;
  double t10627;
  double t11365;
  double t11374;
  double t11375;
  double t11376;
  double t11387;
  double t11388;
  double t11389;
  double t11391;
  double t10655;
  double t11401;
  double t11402;
  double t11403;
  double t11404;
  double t10681;
  double t11413;
  double t11424;
  double t11425;
  double t11428;
  double t11430;
  double t10702;
  double t11438;
  double t11440;
  double t11445;
  double t11446;
  double t10735;
  double t11449;
  double t10962;
  double t10983;
  double t10984;
  double t10998;
  double t11006;
  double t11010;
  double t11042;
  double t11058;
  double t11070;
  double t11075;
  double t11639;
  double t11192;
  double t11648;
  double t11649;
  double t11233;
  double t11678;
  double t11244;
  double t11688;
  double t11256;
  double t11709;
  double t11786;
  double t11787;
  double t11788;
  double t11790;
  double t11792;
  double t11794;
  double t11796;
  double t11797;
  double t11884;
  double t11887;
  double t11891;
  double t11894;
  double t11900;
  t281 = Cos(var1[10]);
  t102 = Cos(var1[4]);
  t160 = Cos(var1[9]);
  t311 = Cos(var1[5]);
  t552 = Sin(var1[9]);
  t966 = Sin(var1[10]);
  t560 = Sin(var1[5]);
  t1429 = Cos(var1[11]);
  t2148 = Sin(var1[11]);
  t1455 = -1.*t1429;
  t1460 = 1. + t1455;
  t2581 = -1.*t1429*t966;
  t2612 = -1.*t281*t2148;
  t2771 = t2581 + t2612;
  t2337 = 0.100689*t1460;
  t2403 = 0.080689*t1429;
  t2423 = -0.16*t2148;
  t2546 = t2337 + t2403 + t2423;
  t1775 = -0.20833*t1460;
  t2092 = -0.36833*t1429;
  t2161 = 0.02*t2148;
  t2173 = t1775 + t2092 + t2161;
  t3170 = t281*t1429;
  t3177 = -1.*t966*t2148;
  t3183 = t3170 + t3177;
  t315 = -1.*t160*t281*t311;
  t691 = t281*t552*t560;
  t711 = t315 + t691;
  t805 = 0.06108*t102*t711;
  t1001 = t160*t311*t966;
  t1032 = -1.*t552*t966*t560;
  t1141 = t1001 + t1032;
  t1194 = -0.06108*t102*t1141;
  t2179 = t1429*t2173;
  t2324 = -0.242889*t2148;
  t2548 = t2546*t2148;
  t2551 = t2179 + t2324 + t2548;
  t2792 = -1.*t160*t311*t2771;
  t2865 = t552*t2771*t560;
  t2907 = t2792 + t2865;
  t2952 = 0.241*t102*t2551*t2907;
  t2960 = 0.242889*t1429;
  t3041 = -1.*t1429*t2546;
  t3044 = t2173*t2148;
  t3149 = t2960 + t3041 + t3044;
  t3207 = -1.*t160*t311*t3183;
  t3209 = t552*t3183*t560;
  t3230 = t3207 + t3209;
  t3251 = 0.241*t102*t3149*t3230;
  t3257 = t805 + t1194 + t2952 + t3251;
  t3643 = Sin(var1[4]);
  t4226 = t311*t552*t966;
  t4232 = t160*t966*t560;
  t4246 = t4226 + t4232;
  t4598 = -1.*t311*t552*t2771;
  t4750 = -1.*t160*t2771*t560;
  t4812 = t4598 + t4750;
  t6649 = -1.*t281*t1429;
  t6682 = t966*t2148;
  t6745 = t6649 + t6682;
  t6627 = t3183*t3643;
  t6632 = t102*t4812;
  t6633 = t6627 + t6632;
  t6645 = 0.241*t3149*t6633;
  t7525 = -0.16*t1429;
  t7528 = t7525 + t2161;
  t7409 = 0.02*t1429;
  t7422 = 0.16*t2148;
  t7431 = t7409 + t7422;
  t5156 = t1429*t966;
  t5432 = t281*t2148;
  t5436 = t5156 + t5432;
  t5460 = -1.*t311*t552*t3183;
  t5593 = -1.*t160*t3183*t560;
  t5685 = t5460 + t5593;
  t6648 = t2771*t3643;
  t6779 = -1.*t311*t552*t6745;
  t6793 = -1.*t160*t6745*t560;
  t6828 = t6779 + t6793;
  t6835 = t102*t6828;
  t6876 = t6648 + t6835;
  t6894 = 0.241*t2551*t6876;
  t6271 = -1.*t966*t3643;
  t3766 = -1.*t281*t311*t552;
  t3784 = -1.*t160*t281*t560;
  t3874 = t3766 + t3784;
  t8030 = Sin(var1[3]);
  t8376 = Cos(var1[3]);
  t8437 = t8376*t3874;
  t8438 = t8030*t3643*t711;
  t8442 = t8437 + t8438;
  t8464 = 0.06108*t8442;
  t8467 = t8376*t4246;
  t8475 = t8030*t3643*t1141;
  t8486 = t8467 + t8475;
  t8496 = -0.06108*t8486;
  t8497 = t8376*t4812;
  t8499 = t8030*t3643*t2907;
  t8503 = t8497 + t8499;
  t8505 = 0.241*t2551*t8503;
  t8506 = t8376*t5685;
  t8512 = t8030*t3643*t3230;
  t8522 = t8506 + t8512;
  t8527 = 0.241*t3149*t8522;
  t8607 = t8464 + t8496 + t8505 + t8527;
  t3600 = t102*t966;
  t3905 = -1.*t3643*t3874;
  t4047 = t3600 + t3905;
  t4215 = t281*t102;
  t4282 = -1.*t3643*t4246;
  t4313 = t4215 + t4282;
  t4506 = t102*t3183;
  t4988 = -1.*t3643*t4812;
  t5116 = t4506 + t4988;
  t5455 = t102*t5436;
  t5757 = -1.*t3643*t5685;
  t5958 = t5455 + t5757;
  t6330 = t281*t311*t552;
  t6391 = t160*t281*t560;
  t6393 = t6330 + t6391;
  t8777 = -1.*t160*t311*t966;
  t8784 = t552*t966*t560;
  t8792 = t8777 + t8784;
  t8887 = t160*t311*t2771;
  t8894 = -1.*t552*t2771*t560;
  t8904 = t8887 + t8894;
  t9132 = t8376*t8904;
  t9134 = -1.*t8030*t5116;
  t9167 = t9132 + t9134;
  t9229 = 0.241*t3149*t9167;
  t6964 = -0.242889*t1429;
  t7107 = t1429*t2546;
  t7462 = t1429*t7431;
  t7513 = -1.*t2173*t2148;
  t7565 = t7528*t2148;
  t7575 = t6964 + t7107 + t7462 + t7513 + t7565;
  t7579 = -1.*t1429*t7528;
  t7845 = t7431*t2148;
  t7853 = t2179 + t7579 + t2324 + t2548 + t7845;
  t8915 = t160*t311*t3183;
  t8916 = -1.*t552*t3183*t560;
  t8921 = t8915 + t8916;
  t9231 = t160*t311*t6745;
  t9259 = -1.*t552*t6745*t560;
  t9260 = t9231 + t9259;
  t9266 = t8376*t9260;
  t9269 = t102*t2771;
  t9286 = -1.*t3643*t6828;
  t9287 = t9269 + t9286;
  t9291 = -1.*t8030*t9287;
  t9299 = t9266 + t9291;
  t9300 = 0.241*t2551*t9299;
  t8036 = -1.*t102*t3874;
  t8037 = t6271 + t8036;
  t8048 = -1.*t281*t3643;
  t8096 = -1.*t102*t4246;
  t8099 = t8048 + t8096;
  t8104 = -1.*t3183*t3643;
  t8107 = -1.*t102*t4812;
  t8110 = t8104 + t8107;
  t8242 = -1.*t5436*t3643;
  t8320 = -1.*t102*t5685;
  t8321 = t8242 + t8320;
  t9449 = t8030*t3874;
  t9459 = -1.*t8376*t3643*t711;
  t9462 = t9449 + t9459;
  t9490 = 0.06108*t9462;
  t9501 = t8030*t4246;
  t9578 = -1.*t8376*t3643*t1141;
  t9579 = t9501 + t9578;
  t9596 = -0.06108*t9579;
  t9598 = t8030*t4812;
  t9599 = -1.*t8376*t3643*t2907;
  t9600 = t9598 + t9599;
  t9610 = 0.241*t2551*t9600;
  t9617 = t8030*t5685;
  t9621 = -1.*t8376*t3643*t3230;
  t9623 = t9617 + t9621;
  t9631 = 0.241*t3149*t9623;
  t9632 = t9490 + t9596 + t9610 + t9631;
  t8750 = t160*t281*t311;
  t8760 = -1.*t281*t552*t560;
  t8761 = t8750 + t8760;
  t9076 = t8376*t8792;
  t9077 = -1.*t8030*t4313;
  t9080 = t9076 + t9077;
  t9346 = t8376*t8921;
  t9348 = -1.*t8030*t5958;
  t9349 = t9346 + t9348;
  t9050 = -1.*t102*t966;
  t9065 = -1.*t3643*t6393;
  t9066 = t9050 + t9065;
  t9747 = t8030*t8904;
  t9752 = t8376*t5116;
  t9753 = t9747 + t9752;
  t9755 = 0.241*t3149*t9753;
  t9756 = t8030*t9260;
  t9757 = t8376*t9287;
  t9759 = t9756 + t9757;
  t9760 = 0.241*t2551*t9759;
  t9814 = -0.04*t281;
  t9815 = 0.04*t966;
  t9821 = t9814 + t9815;
  t9842 = -0.055855*t552;
  t9848 = -1.*t160*t9821;
  t9851 = t9842 + t9848;
  t9812 = 0.055855*t160;
  t9826 = -1.*t552*t9821;
  t9829 = t9812 + t9826;
  t9873 = t160*t311;
  t9876 = -1.*t552*t560;
  t9878 = t9873 + t9876;
  t9883 = t311*t9851;
  t9885 = -1.*t9829*t560;
  t9886 = t9883 + t9885;
  t9911 = -1.*t160;
  t9914 = 1. + t9911;
  t9916 = 0.081715*t9914;
  t9918 = 0.13757*t160;
  t9921 = t9916 + t9918 + t9826;
  t9895 = 0.055855*t552;
  t9899 = t160*t9821;
  t9901 = t9895 + t9899;
  t9939 = -1.*t311*t552;
  t9941 = -1.*t160*t560;
  t9948 = t9939 + t9941;
  t9949 = -1.*t281;
  t9950 = 1. + t9949;
  t9951 = 0.242889*t9950;
  t9957 = 0.202889*t281;
  t9958 = -0.04*t966;
  t9960 = t9951 + t9957 + t9958;
  t9967 = t311*t9921;
  t9985 = -1.*t9901*t560;
  t9988 = t9967 + t9985;
  t9806 = t311*t552;
  t9809 = t160*t560;
  t9811 = t9806 + t9809;
  t9907 = t311*t9901;
  t9922 = t9921*t560;
  t9929 = t9907 + t9922;
  t9962 = t9960*t3643;
  t9989 = t102*t9988;
  t9990 = t9962 + t9989;
  t9992 = t102*t9960;
  t9994 = -1.*t3643*t9988;
  t9995 = t9992 + t9994;
  t9834 = t311*t9829;
  t9856 = t9851*t560;
  t9857 = t9834 + t9856;
  t9800 = t966*t3643;
  t9801 = t102*t3874;
  t9804 = t9800 + t9801;
  t6556 = t281*t3643;
  t6609 = t102*t4246;
  t6612 = t6556 + t6609;
  t9868 = Power(t102,2);
  t9889 = Power(t3643,2);
  t10187 = 0.242889*t966;
  t10188 = -1.*t966*t2546;
  t10192 = t281*t2173;
  t10196 = t10187 + t10188 + t10192;
  t10223 = -0.035165*t552;
  t10225 = -1.*t160*t10196;
  t10226 = t10223 + t10225;
  t10177 = 0.035165*t160;
  t10211 = -1.*t552*t10196;
  t10218 = t10177 + t10211;
  t10237 = t311*t10226;
  t10241 = -1.*t10218*t560;
  t10244 = t10237 + t10241;
  t10261 = 0.11688*t160;
  t10263 = t9916 + t10261 + t10211;
  t10252 = 0.035165*t552;
  t10253 = t160*t10196;
  t10258 = t10252 + t10253;
  t10290 = t281*t2546;
  t10291 = t966*t2173;
  t10296 = t9951 + t10290 + t10291;
  t10304 = t311*t10263;
  t10307 = -1.*t10258*t560;
  t10308 = t10304 + t10307;
  t10259 = t311*t10258;
  t10270 = t10263*t560;
  t10284 = t10259 + t10270;
  t10303 = t10296*t3643;
  t10312 = t102*t10308;
  t10315 = t10303 + t10312;
  t10321 = t102*t10296;
  t10322 = -1.*t3643*t10308;
  t10323 = t10321 + t10322;
  t10222 = t311*t10218;
  t10228 = t10226*t560;
  t10234 = t10222 + t10228;
  t7936 = t5436*t3643;
  t7940 = t102*t5685;
  t7949 = t7936 + t7940;
  t10494 = -1.*t311*t9901;
  t10497 = -1.*t9921*t560;
  t10498 = t10494 + t10497;
  t9933 = -1.*t9878*t9929;
  t9991 = -1.*t102*t9948*t9990;
  t9998 = t3643*t9948*t9995;
  t10001 = -1.*t9811*t9929;
  t10004 = -1.*t102*t9878*t9990;
  t10005 = t3643*t9878*t9995;
  t10006 = t10001 + t10004 + t10005;
  t10010 = t102*t711*t10006;
  t10024 = t3874*t9929;
  t10042 = t102*t711*t9990;
  t10044 = -1.*t3643*t711*t9995;
  t10056 = t8761*t9929;
  t10057 = t9804*t9990;
  t10063 = t4047*t9995;
  t10066 = t10056 + t10057 + t10063;
  t10071 = t102*t9948*t10066;
  t10090 = t9878*t9929;
  t10096 = t102*t9948*t9990;
  t10100 = -1.*t3643*t9948*t9995;
  t10113 = t9811*t9929;
  t10114 = t102*t9878*t9990;
  t10125 = -1.*t3643*t9878*t9995;
  t10127 = t10113 + t10114 + t10125;
  t10130 = t102*t1141*t10127;
  t10131 = -1.*t9929*t4246;
  t10145 = -1.*t102*t1141*t9990;
  t10147 = t3643*t1141*t9995;
  t10165 = -1.*t9929*t8792;
  t10166 = -1.*t9990*t6612;
  t10167 = -1.*t9995*t4313;
  t10168 = t10165 + t10166 + t10167;
  t10172 = t102*t9948*t10168;
  t10656 = -1.*t311*t10258;
  t10657 = -1.*t10263*t560;
  t10659 = t10656 + t10657;
  t10285 = t9878*t10284;
  t10316 = t102*t9948*t10315;
  t10324 = -1.*t3643*t9948*t10323;
  t10330 = t9811*t10284;
  t10332 = t102*t9878*t10315;
  t10338 = -1.*t3643*t9878*t10323;
  t10340 = t10330 + t10332 + t10338;
  t10341 = t102*t2907*t10340;
  t10342 = -1.*t10284*t4812;
  t10344 = -1.*t102*t2907*t10315;
  t10353 = t3643*t2907*t10323;
  t10369 = -1.*t10284*t8904;
  t10370 = -1.*t10315*t6633;
  t10376 = -1.*t10323*t5116;
  t10378 = t10369 + t10370 + t10376;
  t10388 = t102*t9948*t10378;
  t10414 = -1.*t9878*t10284;
  t10418 = -1.*t102*t9948*t10315;
  t10419 = t3643*t9948*t10323;
  t10425 = -1.*t9811*t10284;
  t10427 = -1.*t102*t9878*t10315;
  t10430 = t3643*t9878*t10323;
  t10432 = t10425 + t10427 + t10430;
  t10433 = t102*t3230*t10432;
  t10434 = t10284*t5685;
  t10438 = t102*t3230*t10315;
  t10446 = -1.*t3643*t3230*t10323;
  t10459 = t10284*t8921;
  t10466 = t10315*t7949;
  t10471 = t10323*t5958;
  t10473 = t10459 + t10466 + t10471;
  t10474 = t102*t9948*t10473;
  t10765 = -1.*t9960*t3643;
  t10770 = -1.*t102*t9988;
  t10773 = t10765 + t10770;
  t10841 = -1.*t10296*t3643;
  t10842 = -1.*t102*t10308;
  t10847 = t10841 + t10842;
  t10947 = 0.04*t281;
  t10955 = t10947 + t9815;
  t10964 = -1.*t311*t552*t10955;
  t10965 = -1.*t160*t10955*t560;
  t10966 = t10964 + t10965;
  t10959 = t160*t311*t10955;
  t10960 = -1.*t552*t10955*t560;
  t10961 = t10959 + t10960;
  t10963 = t9821*t3643;
  t10969 = t102*t10966;
  t10970 = t10963 + t10969;
  t10973 = t102*t9821;
  t10974 = -1.*t3643*t10966;
  t10975 = t10973 + t10974;
  t6477 = t102*t6393;
  t6487 = t6271 + t6477;
  t11031 = 0.242889*t281;
  t11033 = -1.*t281*t2546;
  t11034 = -1.*t966*t2173;
  t11035 = t11031 + t11033 + t11034;
  t11044 = -1.*t311*t552*t11035;
  t11045 = -1.*t160*t11035*t560;
  t11046 = t11044 + t11045;
  t11036 = t160*t311*t11035;
  t11039 = -1.*t552*t11035*t560;
  t11040 = t11036 + t11039;
  t11043 = t10196*t3643;
  t11047 = t102*t11046;
  t11048 = t11043 + t11047;
  t11050 = t102*t10196;
  t11051 = -1.*t3643*t11046;
  t11052 = t11050 + t11051;
  t11030 = t6633*t10432;
  t11171 = -1.*t966*t7528;
  t11178 = t281*t7431;
  t11183 = t11171 + t11178;
  t11193 = t281*t7528;
  t11194 = t966*t7431;
  t11195 = t11193 + t11194;
  t11201 = -1.*t311*t552*t11183;
  t11204 = -1.*t160*t11183*t560;
  t11208 = t11201 + t11204;
  t11057 = t10284*t8904;
  t11185 = t160*t311*t11183;
  t11187 = -1.*t552*t11183*t560;
  t11189 = t11185 + t11187;
  t11060 = t10315*t6633;
  t11061 = t10323*t5116;
  t11198 = t11195*t3643;
  t11210 = t102*t11208;
  t11211 = t11198 + t11210;
  t11214 = t102*t11195;
  t11219 = -1.*t3643*t11208;
  t11222 = t11214 + t11219;
  t11069 = t6876*t10340;
  t11076 = -1.*t10284*t9260;
  t11079 = -1.*t10315*t6876;
  t11080 = -1.*t10323*t9287;
  t10023 = t8761*t9857;
  t9858 = -1.*t9811*t9857;
  t10082 = t9811*t9857;
  t10134 = -1.*t9857*t8792;
  t10235 = t9811*t10234;
  t10343 = -1.*t10234*t8904;
  t10407 = -1.*t9811*t10234;
  t10437 = t10234*t8921;
  t11299 = -1.*t9878*t9988;
  t11302 = t11299 + t10001;
  t11303 = t3874*t11302;
  t10505 = t8761*t9988;
  t11306 = t711*t9988;
  t11317 = -1.*t9948*t9988;
  t10491 = -1.*t9811*t9988;
  t11330 = t9960*t966;
  t11331 = t3874*t9988;
  t11332 = t11330 + t11331 + t10056;
  t11333 = t9878*t11332;
  t11340 = t9878*t9988;
  t11341 = t11340 + t10113;
  t11342 = t4246*t11341;
  t11344 = t9948*t9988;
  t10607 = t9811*t9988;
  t11360 = -1.*t9988*t1141;
  t10627 = -1.*t9988*t8792;
  t11365 = -1.*t281*t9960;
  t11374 = -1.*t9988*t4246;
  t11375 = t11365 + t11374 + t10165;
  t11376 = t9878*t11375;
  t11387 = t9878*t10308;
  t11388 = t11387 + t10330;
  t11389 = t4812*t11388;
  t11391 = t9948*t10308;
  t10655 = t9811*t10308;
  t11401 = -1.*t10296*t3183;
  t11402 = -1.*t10308*t4812;
  t11403 = t11401 + t11402 + t10369;
  t11404 = t9878*t11403;
  t10681 = -1.*t10308*t8904;
  t11413 = -1.*t10308*t2907;
  t11424 = -1.*t9878*t10308;
  t11425 = t11424 + t10425;
  t11428 = t5685*t11425;
  t11430 = -1.*t9948*t10308;
  t10702 = -1.*t9811*t10308;
  t11438 = t10296*t5436;
  t11440 = t10308*t5685;
  t11445 = t11438 + t11440 + t10459;
  t11446 = t9878*t11445;
  t10735 = t10308*t8921;
  t11449 = t10308*t3230;
  t10962 = -1.*t9811*t10961;
  t10983 = t8761*t10961;
  t10984 = t9929*t8792;
  t10998 = t9811*t10961;
  t11006 = -1.*t711*t9929;
  t11010 = -1.*t10961*t8792;
  t11042 = -1.*t9811*t11040;
  t11058 = t11040*t8921;
  t11070 = t9811*t11040;
  t11075 = -1.*t11040*t8904;
  t11639 = t8904*t11425;
  t11192 = -1.*t9811*t11189;
  t11648 = t10296*t3183;
  t11649 = t10308*t4812;
  t11233 = t11189*t8921;
  t11678 = t9260*t11388;
  t11244 = t9811*t11189;
  t11688 = -1.*t10296*t2771;
  t11256 = -1.*t11189*t8904;
  t11709 = -1.*t10308*t6828;
  t11786 = -1.*t552*t10258;
  t11787 = -1.*t160*t10263;
  t11788 = t11786 + t11787;
  t11790 = 0.241*t11788*t3183*t2551;
  t11792 = t552*t10258;
  t11794 = t160*t10263;
  t11796 = t11792 + t11794;
  t11797 = 0.241*t11796*t2771*t3149;
  t11884 = 0.008474765*t2771*t3149;
  t11887 = -0.11688*t3183;
  t11891 = -0.081715*t6745;
  t11894 = t11887 + t11891;
  t11900 = 0.241*t2551*t11894;
  p_output1[0]=var2[10]*(-0.5*(0.06108*t4047 - 0.06108*t4313 + 0.241*t2551*t5116 + 0.241*t3149*t5958)*var2[4] - 0.5*t3257*var2[5] - 0.5*t3257*var2[9] - 0.5*(-0.06108*t6487 + 0.06108*t6612 + t6645 + t6894)*var2[10] - 0.5*(t6645 + t6894 + 0.241*t6633*t7575 + 0.241*t7853*t7949)*var2[11]);
  p_output1[1]=var2[10]*(-0.5*(0.06108*(-1.*t4047*t8376 - 1.*t8030*t8761) - 0.06108*(-1.*t4313*t8376 - 1.*t8030*t8792) + 0.241*t2551*(-1.*t5116*t8376 - 1.*t8030*t8904) + 0.241*t3149*(-1.*t5958*t8376 - 1.*t8030*t8921))*var2[3] - 0.5*(-0.06108*t8030*t8037 + 0.06108*t8030*t8099 - 0.241*t2551*t8030*t8110 - 0.241*t3149*t8030*t8321)*var2[4] - 0.5*t8607*var2[5] - 0.5*t8607*var2[9] - 0.5*(-0.06108*(t711*t8376 - 1.*t8030*t9066) + 0.06108*t9080 + t9229 + t9300)*var2[10] - 0.5*(0.241*t7575*t9167 + t9229 + t9300 + 0.241*t7853*t9349)*var2[11]);
  p_output1[2]=var2[10]*(-0.5*(0.06108*(-1.*t4047*t8030 + t8376*t8761) - 0.06108*t9080 + 0.241*t2551*t9167 + 0.241*t3149*t9349)*var2[3] - 0.5*(0.06108*t8037*t8376 - 0.06108*t8099*t8376 + 0.241*t2551*t8110*t8376 + 0.241*t3149*t8321*t8376)*var2[4] - 0.5*t9632*var2[5] - 0.5*t9632*var2[9] - 0.5*(0.06108*(t4313*t8376 + t8030*t8792) - 0.06108*(t711*t8030 + t8376*t9066) + t9755 + t9760)*var2[10] - 0.5*(0.241*t7853*(t5958*t8376 + t8030*t8921) + 0.241*t7575*t9753 + t9755 + t9760)*var2[11]);
  p_output1[3]=var2[10]*(-0.5*(0.241*t3149*(t10340*t5116 - 1.*t10378*t3643*t9878 + t102*(-1.*t10315*t5116 - 1.*t10847*t5116 - 1.*t10323*t6633 - 1.*t10323*t8110)*t9878 + t6633*(-1.*t10315*t3643*t9878 - 1.*t10847*t3643*t9878)) + 0.241*t2551*(t10432*t5958 - 1.*t10473*t3643*t9878 + t102*(t10315*t5958 + t10847*t5958 + t10323*t7949 + t10323*t8321)*t9878 + t7949*(t10315*t3643*t9878 + t10847*t3643*t9878)) + 0.06108*(t10127*t4313 - 1.*t10168*t3643*t9878 + t6612*(-1.*t10773*t3643*t9878 - 1.*t3643*t9878*t9990) + t102*t9878*(-1.*t10773*t4313 - 1.*t4313*t9990 - 1.*t6612*t9995 - 1.*t8099*t9995)) - 0.06108*(t10006*t4047 - 1.*t10066*t3643*t9878 + t9804*(t10773*t3643*t9878 + t3643*t9878*t9990) + t102*t9878*(t10773*t4047 + t4047*t9990 + t8037*t9995 + t9804*t9995)))*var2[4] - 0.5*(0.06108*(t10130 + t10172 + t102*(t10131 + t10145 + t10147 + t10627 + t10498*t3643*t4313 - 1.*t102*t10498*t6612)*t9878 + t6612*(t10090 + t10096 + t10100 + t10607 + t10498*t9868*t9878 + t10498*t9878*t9889)) + 0.241*t2551*(t10433 + t10474 + t102*(t10434 + t10438 + t10446 + t10735 - 1.*t10659*t3643*t5958 + t102*t10659*t7949)*t9878 + t7949*(t10414 + t10418 + t10419 + t10702 - 1.*t10659*t9868*t9878 - 1.*t10659*t9878*t9889)) + 0.241*t3149*(t10341 + t10388 + t102*(t10342 + t10344 + t10353 + t10681 + t10659*t3643*t5116 - 1.*t102*t10659*t6633)*t9878 + t6633*(t10285 + t10316 + t10324 + t10655 + t10659*t9868*t9878 + t10659*t9878*t9889)) - 0.06108*(t10010 + t10071 + t102*(t10024 + t10042 + t10044 + t10505 - 1.*t10498*t3643*t4047 + t102*t10498*t9804)*t9878 + t9804*(t10491 - 1.*t10498*t9868*t9878 - 1.*t10498*t9878*t9889 + t9933 + t9991 + t9998)))*var2[5] - 0.5*(0.241*t2551*(t10433 + t10474 + t102*(t10434 + t10437 + t10438 + t10446 - 1.*t10244*t3643*t5958 + t102*t10244*t7949)*t9878 + t7949*(t10407 + t10414 + t10418 + t10419 - 1.*t10244*t9868*t9878 - 1.*t10244*t9878*t9889)) + 0.241*t3149*(t10341 + t10388 + t102*(t10342 + t10343 + t10344 + t10353 + t10244*t3643*t5116 - 1.*t102*t10244*t6633)*t9878 + t6633*(t10235 + t10285 + t10316 + t10324 + t10244*t9868*t9878 + t10244*t9878*t9889)) + 0.06108*(t10130 + t10172 + t102*t9878*(t10131 + t10134 + t10145 + t10147 + t3643*t4313*t9886 - 1.*t102*t6612*t9886) + t6612*(t10082 + t10090 + t10096 + t10100 + t9868*t9878*t9886 + t9878*t9886*t9889)) - 0.06108*(t10010 + t10071 + t102*t9878*(t10023 + t10024 + t10042 + t10044 - 1.*t3643*t4047*t9886 + t102*t9804*t9886) + t9804*(t9858 - 1.*t9868*t9878*t9886 - 1.*t9878*t9886*t9889 + t9933 + t9991 + t9998)))*var2[9] - 0.5*(0.241*t3149*(t11069 + t102*(t11075 + t11076 + t11079 + t11080 - 1.*t11052*t5116 - 1.*t11048*t6633)*t9878 + t6633*(t11070 + t102*t11048*t9878 - 1.*t11052*t3643*t9878)) + 0.241*t2551*(t11030 + t102*(t11057 + t11058 + t11060 + t11061 + t11052*t5958 + t11048*t7949)*t9878 + t7949*(t11042 - 1.*t102*t11048*t9878 + t11052*t3643*t9878)) - 0.06108*(t10006*t6612 + t9804*(t10962 - 1.*t102*t10970*t9878 + t10975*t3643*t9878) + t102*t9878*(t10983 + t10984 + t10975*t4047 + t10970*t9804 + t6612*t9990 + t4313*t9995)) + 0.06108*(t10127*t6487 + t6612*(t10998 + t102*t10970*t9878 - 1.*t10975*t3643*t9878) + t102*t9878*(t11006 + t11010 - 1.*t10975*t4313 - 1.*t10970*t6612 - 1.*t6487*t9990 - 1.*t9066*t9995)))*var2[10] - 0.5*(0.241*t7853*(t10340*t6633 + t102*t10378*t9878) + 0.241*t7575*(t10432*t7949 + t102*t10473*t9878) + 0.241*t3149*(t11069 + t102*(t11076 + t11079 + t11080 + t11256 - 1.*t11222*t5116 - 1.*t11211*t6633)*t9878 + t6633*(t11244 + t102*t11211*t9878 - 1.*t11222*t3643*t9878)) + 0.241*t2551*(t11030 + t102*(t11057 + t11060 + t11061 + t11233 + t11222*t5958 + t11211*t7949)*t9878 + t7949*(t11192 - 1.*t102*t11211*t9878 + t11222*t3643*t9878)))*var2[11]);
  p_output1[4]=var2[10]*(-0.5*(0.06108*(t11342 + t11376 + (t10131 + t10627 + t11360 - 1.*t10498*t4246)*t9811 + t8792*(t10090 + t10607 + t11344 + t10498*t9878)) + 0.241*t2551*(t11428 + t11446 + (t10434 + t10735 + t11449 + t10659*t5685)*t9811 + t8921*(t10414 + t10702 + t11430 - 1.*t10659*t9878)) + 0.241*t3149*(t11389 + t11404 + (t10342 + t10681 + t11413 - 1.*t10659*t4812)*t9811 + t8904*(t10285 + t10655 + t11391 + t10659*t9878)) - 0.06108*(t11303 + t11333 + (t10024 + t10505 + t11306 + t10498*t3874)*t9811 + t8761*(t10491 + t11317 - 1.*t10498*t9878 + t9933)))*var2[5] - 0.5*(0.241*t2551*(t11428 + t11446 + (t10434 + t10437 + t11449 + t10244*t5685)*t9811 + t8921*(t10407 + t10414 + t11430 - 1.*t10244*t9878)) + 0.241*t3149*(t11389 + t11404 + (t10342 + t10343 + t11413 - 1.*t10244*t4812)*t9811 + t8904*(t10235 + t10285 + t11391 + t10244*t9878)) + 0.06108*(t11342 + t11376 + t9811*(t10131 + t10134 + t11360 - 1.*t4246*t9886) + t8792*(t10082 + t10090 + t11344 + t9878*t9886)) - 0.06108*(t11303 + t11333 + t9811*(t10023 + t10024 + t11306 + t3874*t9886) + t8761*(t11317 + t9858 - 1.*t9878*t9886 + t9933)))*var2[9] - 0.5*(0.241*t2551*(t11639 + (t11057 + t11058 + t11648 + t11649 + t10196*t5436 + t11046*t5685)*t9811 + t8921*(t11042 - 1.*t11046*t9878)) + 0.241*t3149*(t11678 + (t11075 + t11076 + t11688 + t11709 - 1.*t10196*t3183 - 1.*t11046*t4812)*t9811 + t8904*(t11070 + t11046*t9878)) - 0.06108*(t11302*t8792 + t8761*(t10962 - 1.*t10966*t9878) + t9811*(t10983 + t10984 + t10966*t3874 + t966*t9821 + t281*t9960 + t4246*t9988)) + 0.06108*(t11341*t711 + t8792*(t10998 + t10966*t9878) + t9811*(t11006 + t11010 + t11330 - 1.*t10966*t4246 - 1.*t281*t9821 - 1.*t6393*t9988)))*var2[10] - 0.5*(0.241*t7853*(t11388*t8904 + t11403*t9811) + 0.241*t7575*(t11425*t8921 + t11445*t9811) + 0.241*t2551*(t11639 + (t11057 + t11233 + t11648 + t11649 + t11195*t5436 + t11208*t5685)*t9811 + t8921*(t11192 - 1.*t11208*t9878)) + 0.241*t3149*(t11678 + (t11076 + t11256 + t11688 + t11709 - 1.*t11195*t3183 - 1.*t11208*t4812)*t9811 + t8904*(t11244 + t11208*t9878)))*var2[11]);
  p_output1[5]=var2[10]*(-0.5*(0.241*t3149*t3183*(t10226*t160 + t10258*t160 + t10218*t552 - 1.*t10263*t552) + 0.241*t2551*t5436*(-1.*t10226*t160 - 1.*t10258*t160 - 1.*t10218*t552 + t10263*t552) + 0.06108*t281*(t552*t9829 + t160*t9851 + t160*t9901 - 1.*t552*t9921) - 0.06108*t966*(-1.*t552*t9829 - 1.*t160*t9851 - 1.*t160*t9901 + t552*t9921))*var2[9] - 0.5*(t11790 + t11797 - 0.06108*t281*(-1.*t552*t9901 - 1.*t160*t9921) - 0.06108*t966*(t552*t9901 + t160*t9921))*var2[10] - 0.5*(t11790 + t11797 + 0.241*t11788*t5436*t7575 + 0.241*t11796*t3183*t7853)*var2[11]);
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=var2[10]*(-0.5*(t11884 + t11900 + 0.0034116234*t281 - 0.0034116234*t966)*var2[10] - 0.5*(t11884 + t11900 + 0.241*(-0.081715*t2771 - 0.11688*t5436)*t7575 + 0.008474765*t3183*t7853)*var2[11]);
  p_output1[10]=-0.5*(0.482*t2551*t7575 + 0.482*t3149*t7853)*var2[10]*var2[11];
  p_output1[11]=-0.5*(-0.03856*t7575 + 0.00482*t7853)*var2[10]*var2[11];
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce1_vec11_plane.hh"

namespace SymFunction
{

void Ce1_vec11_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
