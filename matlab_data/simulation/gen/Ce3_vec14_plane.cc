/*
 * Automatically Generated from Mathematica.
 * Fri 21 Dec 2018 15:12:05 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t528;
  double t555;
  double t720;
  double t489;
  double t726;
  double t357;
  double t1096;
  double t969;
  double t1089;
  double t1141;
  double t5625;
  double t5723;
  double t5633;
  double t5690;
  double t6779;
  double t7242;
  double t7249;
  double t7602;
  double t7612;
  double t7284;
  double t7286;
  double t5995;
  double t6022;
  double t6069;
  double t6089;
  double t5692;
  double t5720;
  double t5733;
  double t5735;
  double t7811;
  double t7847;
  double t7875;
  double t8335;
  double t8356;
  double t8301;
  double t8304;
  double t700;
  double t732;
  double t781;
  double t1109;
  double t1144;
  double t1441;
  double t1844;
  double t2365;
  double t3757;
  double t4398;
  double t4555;
  double t4681;
  double t4705;
  double t4836;
  double t4886;
  double t4997;
  double t4998;
  double t5136;
  double t5737;
  double t5872;
  double t6090;
  double t6277;
  double t6371;
  double t6389;
  double t7588;
  double t7634;
  double t7663;
  double t7880;
  double t8040;
  double t8045;
  double t8077;
  double t8080;
  double t8120;
  double t8183;
  double t8188;
  double t8198;
  double t8269;
  double t8271;
  double t8279;
  double t8305;
  double t8383;
  double t8434;
  double t8453;
  double t8455;
  double t8476;
  double t8484;
  double t8497;
  double t8499;
  double t8508;
  double t8531;
  double t8537;
  double t8726;
  double t8728;
  double t8746;
  double t8751;
  double t8752;
  double t8754;
  double t8814;
  double t9120;
  double t9148;
  double t9150;
  double t9169;
  double t9181;
  double t9535;
  double t9553;
  double t9556;
  double t9316;
  double t9317;
  double t9337;
  double t9352;
  double t9360;
  double t9364;
  double t9367;
  double t9388;
  double t9438;
  double t9479;
  double t9485;
  double t9517;
  double t9531;
  double t9558;
  double t9564;
  double t9567;
  double t9574;
  double t9585;
  double t9590;
  double t9596;
  double t9605;
  double t9634;
  double t9642;
  double t9645;
  double t9456;
  double t9614;
  double t9628;
  double t9679;
  double t9680;
  double t9681;
  double t9301;
  double t9310;
  double t9314;
  double t9663;
  double t9664;
  double t9670;
  double t9655;
  double t9659;
  double t9662;
  double t9718;
  double t9722;
  double t9723;
  double t9901;
  double t9906;
  double t9907;
  double t9908;
  double t9840;
  double t9842;
  double t9848;
  double t9849;
  double t9858;
  double t9864;
  double t9869;
  double t9871;
  double t9878;
  double t9884;
  double t9898;
  double t9899;
  double t9913;
  double t9920;
  double t9921;
  double t9922;
  double t9924;
  double t9927;
  double t9928;
  double t9932;
  double t9963;
  double t9964;
  double t9290;
  double t9960;
  double t9962;
  double t9947;
  double t9952;
  double t9953;
  double t9865;
  double t9867;
  double t9974;
  double t9971;
  double t9832;
  double t9838;
  double t9839;
  double t9894;
  double t9938;
  double t9940;
  double t10003;
  double t10007;
  double t10026;
  double t9295;
  double t9987;
  double t10000;
  double t10002;
  double t10158;
  double t10172;
  double t10174;
  double t10382;
  double t10383;
  double t10388;
  double t10397;
  double t10398;
  double t10401;
  double t10410;
  double t10411;
  double t10412;
  double t10425;
  double t10428;
  double t10430;
  double t10456;
  double t10472;
  double t9673;
  double t10633;
  double t10640;
  double t10649;
  double t9701;
  double t9760;
  double t10684;
  double t10690;
  double t10693;
  double t9804;
  double t10034;
  double t10928;
  double t10935;
  double t10947;
  double t10899;
  double t10958;
  double t10110;
  double t10268;
  double t10909;
  double t10917;
  double t10919;
  double t10354;
  double t10705;
  double t10713;
  double t9676;
  double t9682;
  double t9685;
  double t10631;
  double t10666;
  double t9702;
  double t9704;
  double t9710;
  double t10785;
  double t11111;
  double t11114;
  double t10795;
  double t9768;
  double t9769;
  double t9774;
  double t10835;
  double t10839;
  double t9805;
  double t9811;
  double t9818;
  double t10901;
  double t10970;
  double t10036;
  double t10039;
  double t10040;
  double t10987;
  double t10998;
  double t10114;
  double t10117;
  double t10118;
  double t11047;
  double t11052;
  double t10283;
  double t10288;
  double t10293;
  double t11062;
  double t11068;
  double t10355;
  double t10357;
  double t10358;
  double t11305;
  double t11311;
  double t11316;
  double t11346;
  double t11349;
  double t11351;
  double t11403;
  double t11405;
  double t11414;
  double t11418;
  double t11420;
  double t11422;
  double t11444;
  double t11447;
  double t11451;
  double t11480;
  double t11484;
  double t11485;
  double t11494;
  double t11497;
  double t11500;
  double t11508;
  double t11515;
  double t11518;
  double t10613;
  double t10617;
  double t11600;
  double t11601;
  double t11606;
  double t11609;
  double t11619;
  double t11652;
  double t11655;
  double t11661;
  double t10729;
  double t10738;
  double t10743;
  double t10753;
  double t10756;
  double t10811;
  double t10822;
  double t10824;
  double t10871;
  double t10872;
  double t11748;
  double t11749;
  double t11742;
  double t11744;
  double t11745;
  double t11759;
  double t11762;
  double t11013;
  double t11026;
  double t11036;
  double t11041;
  double t11042;
  double t11076;
  double t11079;
  double t11085;
  double t11644;
  double t11667;
  double t11607;
  double t11621;
  double t11699;
  double t11706;
  double t11711;
  double t11713;
  double t11746;
  double t11765;
  double t11793;
  double t11823;
  double t11849;
  double t11868;
  double t11890;
  double t11905;
  double t12241;
  double t12244;
  double t12245;
  double t12247;
  double t12190;
  double t12211;
  double t12201;
  double t12202;
  double t12204;
  double t12310;
  double t12311;
  double t12313;
  double t12336;
  double t12338;
  double t12342;
  double t12355;
  double t12357;
  double t12359;
  double t8610;
  double t8620;
  double t8628;
  double t12373;
  double t12376;
  double t12377;
  double t12380;
  double t12381;
  double t12385;
  double t12394;
  double t12395;
  double t12400;
  double t12414;
  double t12416;
  double t12423;
  double t12630;
  double t12632;
  double t12634;
  double t12643;
  double t12648;
  double t12660;
  double t12665;
  double t12666;
  double t12758;
  double t12760;
  double t12761;
  double t12764;
  double t12767;
  double t12768;
  double t12795;
  double t12668;
  double t12697;
  double t12704;
  double t12925;
  double t12926;
  double t12928;
  double t12939;
  double t12940;
  double t12942;
  double t12303;
  double t12304;
  double t12718;
  double t12742;
  double t12745;
  double t12335;
  double t12344;
  double t12345;
  double t12769;
  double t12809;
  double t12828;
  double t13039;
  double t13042;
  double t13043;
  double t13074;
  double t13076;
  double t13082;
  double t12309;
  double t12315;
  double t12324;
  double t12860;
  double t12882;
  double t12892;
  double t13207;
  double t13211;
  double t13187;
  double t13193;
  double t13199;
  double t13170;
  double t13179;
  double t13200;
  double t13204;
  double t13215;
  double t13216;
  double t13219;
  double t13222;
  double t13232;
  double t12192;
  double t12206;
  double t12207;
  double t12209;
  double t12213;
  double t12259;
  double t12260;
  double t12261;
  double t12273;
  double t12274;
  double t12279;
  double t13319;
  double t13323;
  double t13330;
  double t12264;
  double t12280;
  double t12334;
  double t12348;
  double t12378;
  double t12387;
  double t12389;
  double t12393;
  double t12407;
  double t12442;
  double t12451;
  double t12454;
  double t12594;
  double t12606;
  double t12608;
  double t12609;
  double t12613;
  double t12615;
  double t12618;
  double t12622;
  double t8637;
  double t8641;
  double t8649;
  double t8659;
  double t12757;
  double t12785;
  double t12801;
  double t13453;
  double t13454;
  double t13463;
  double t13468;
  double t13471;
  double t13472;
  double t12849;
  double t13481;
  double t13483;
  double t13484;
  double t12878;
  double t12880;
  double t13038;
  double t13475;
  double t13495;
  double t13088;
  double t13089;
  double t13615;
  double t13616;
  double t13625;
  double t13636;
  double t13639;
  double t13641;
  double t13108;
  double t13528;
  double t13542;
  double t13123;
  double t13131;
  t528 = Cos(var1[13]);
  t555 = Cos(var1[5]);
  t720 = Sin(var1[12]);
  t489 = Cos(var1[12]);
  t726 = Sin(var1[5]);
  t357 = Sin(var1[3]);
  t1096 = Sin(var1[13]);
  t969 = Cos(var1[3]);
  t1089 = Cos(var1[4]);
  t1141 = Sin(var1[4]);
  t5625 = Cos(var1[14]);
  t5723 = Sin(var1[14]);
  t5633 = -1.*t5625;
  t5690 = 1. + t5633;
  t6779 = -1.*t5625*t1096;
  t7242 = -1.*t528*t5723;
  t7249 = 0. + t6779 + t7242;
  t7602 = t720*t7249;
  t7612 = 0. + t7602;
  t7284 = t489*t7249;
  t7286 = 0. + t7284;
  t5995 = -0.336601*t5690;
  t6022 = -0.356601*t5625;
  t6069 = -0.16*t5723;
  t6089 = 0. + t5995 + t6022 + t6069;
  t5692 = -0.20833*t5690;
  t5720 = -0.36833*t5625;
  t5733 = 0.020000000000000018*t5723;
  t5735 = 0. + t5692 + t5720 + t5733;
  t7811 = t528*t5625;
  t7847 = -1.*t1096*t5723;
  t7875 = 0. + t7811 + t7847;
  t8335 = t720*t7875;
  t8356 = 0. + t8335;
  t8301 = t489*t7875;
  t8304 = 0. + t8301;
  t700 = t489*t528*t555;
  t732 = t528*t720*t726;
  t781 = t700 + t732;
  t1109 = t1089*t1096;
  t1144 = t528*t555*t720;
  t1441 = -1.*t489*t528*t726;
  t1844 = t1144 + t1441;
  t2365 = -1.*t1141*t1844;
  t3757 = t1109 + t2365;
  t4398 = -1.*t489*t555*t1096;
  t4555 = -1.*t720*t1096*t726;
  t4681 = t4398 + t4555;
  t4705 = t528*t1089;
  t4836 = -1.*t555*t720*t1096;
  t4886 = t489*t1096*t726;
  t4997 = t4836 + t4886;
  t4998 = -1.*t1141*t4997;
  t5136 = t4705 + t4998;
  t5737 = t5625*t5735;
  t5872 = 0.194401*t5723;
  t6090 = t6089*t5723;
  t6277 = 0. + t5737 + t5872 + t6090;
  t6371 = 0.241*t6277;
  t6389 = 0. + t6371;
  t7588 = t555*t7286;
  t7634 = t7612*t726;
  t7663 = 0. + t7588 + t7634;
  t7880 = t1089*t7875;
  t8040 = t555*t7612;
  t8045 = -1.*t7286*t726;
  t8077 = 0. + t8040 + t8045;
  t8080 = -1.*t1141*t8077;
  t8120 = 0. + t7880 + t8080;
  t8183 = -0.194401*t5625;
  t8188 = -1.*t5625*t6089;
  t8198 = t5735*t5723;
  t8269 = 0. + t8183 + t8188 + t8198;
  t8271 = 0.241*t8269;
  t8279 = 0. + t8271;
  t8305 = t555*t8304;
  t8383 = t8356*t726;
  t8434 = 0. + t8305 + t8383;
  t8453 = t5625*t1096;
  t8455 = t528*t5723;
  t8476 = 0. + t8453 + t8455;
  t8484 = t1089*t8476;
  t8497 = t555*t8356;
  t8499 = -1.*t8304*t726;
  t8508 = 0. + t8497 + t8499;
  t8531 = -1.*t1141*t8508;
  t8537 = 0. + t8484 + t8531;
  t8726 = -1.*t1096*t1141;
  t8728 = -1.*t1089*t1844;
  t8746 = t8726 + t8728;
  t8751 = -1.*t528*t1141;
  t8752 = -1.*t1089*t4997;
  t8754 = t8751 + t8752;
  t8814 = -1.*t7875*t1141;
  t9120 = -1.*t1089*t8077;
  t9148 = t8814 + t9120;
  t9150 = -1.*t8476*t1141;
  t9169 = -1.*t1089*t8508;
  t9181 = t9150 + t9169;
  t9535 = -0.04*t528;
  t9553 = 0.04*t1096;
  t9556 = t9535 + t9553;
  t9316 = t489*t555;
  t9317 = t720*t726;
  t9337 = t9316 + t9317;
  t9352 = -1.*t528;
  t9360 = 1. + t9352;
  t9364 = -0.194401*t9360;
  t9367 = -0.234401*t528;
  t9388 = -0.04*t1096;
  t9438 = t9364 + t9367 + t9388;
  t9479 = -1.*t489;
  t9485 = 1. + t9479;
  t9517 = -0.081715*t9485;
  t9531 = -0.13528*t489;
  t9558 = t720*t9556;
  t9564 = t9517 + t9531 + t9558;
  t9567 = t555*t9564;
  t9574 = 0.053565*t720;
  t9585 = t489*t9556;
  t9590 = t9574 + t9585;
  t9596 = -1.*t9590*t726;
  t9605 = t9567 + t9596;
  t9634 = t9438*t1141;
  t9642 = t1089*t9605;
  t9645 = t9634 + t9642;
  t9456 = -1.*t9438*t1141;
  t9614 = -1.*t1089*t9605;
  t9628 = t9456 + t9614;
  t9679 = t1089*t9438;
  t9680 = -1.*t1141*t9605;
  t9681 = t9679 + t9680;
  t9301 = t1096*t1141;
  t9310 = t1089*t1844;
  t9314 = t9301 + t9310;
  t9663 = t555*t9590;
  t9664 = t9564*t726;
  t9670 = t9663 + t9664;
  t9655 = -1.*t555*t720;
  t9659 = t489*t726;
  t9662 = t9655 + t9659;
  t9718 = t528*t1141;
  t9722 = t1089*t4997;
  t9723 = t9718 + t9722;
  t9901 = -0.194401*t1096;
  t9906 = -1.*t1096*t6089;
  t9907 = t528*t5735;
  t9908 = 0. + t9901 + t9906 + t9907;
  t9840 = 0. + t489;
  t9842 = t9840*t555;
  t9848 = -1.*t720;
  t9849 = 0. + t9848;
  t9858 = -1.*t9849*t726;
  t9864 = 0. + t9842 + t9858;
  t9869 = -0.194401*t9360;
  t9871 = t528*t6089;
  t9878 = t1096*t5735;
  t9884 = 0. + t9869 + t9871 + t9878;
  t9898 = -0.081715*t9485;
  t9899 = -0.11459*t489;
  t9913 = t720*t9908;
  t9920 = t9898 + t9899 + t9913;
  t9921 = t555*t9920;
  t9922 = 0.032875*t720;
  t9924 = t489*t9908;
  t9927 = t9922 + t9924;
  t9928 = -1.*t9927*t726;
  t9932 = 0. + t9921 + t9928;
  t9963 = t1089*t9884;
  t9964 = -1.*t1141*t9932;
  t9290 = t7880 + t8080;
  t9960 = t1089*t9864;
  t9962 = 0. + t9960;
  t9947 = t9884*t1141;
  t9952 = t1089*t9932;
  t9953 = 0. + t9947 + t9952;
  t9865 = -1.*t1141*t9864;
  t9867 = 0. + t9865;
  t9974 = 0. + t9963 + t9964;
  t9971 = t9963 + t9964;
  t9832 = t7875*t1141;
  t9838 = t1089*t8077;
  t9839 = 0. + t9832 + t9838;
  t9894 = -1.*t9884*t1141;
  t9938 = -1.*t1089*t9932;
  t9940 = t9894 + t9938;
  t10003 = t555*t9927;
  t10007 = t9920*t726;
  t10026 = 0. + t10003 + t10007;
  t9295 = t8484 + t8531;
  t9987 = t555*t9849;
  t10000 = t9840*t726;
  t10002 = 0. + t9987 + t10000;
  t10158 = t8476*t1141;
  t10172 = t1089*t8508;
  t10174 = 0. + t10158 + t10172;
  t10382 = -1.*t489*t528*t555;
  t10383 = -1.*t528*t720*t726;
  t10388 = t10382 + t10383;
  t10397 = t489*t555*t1096;
  t10398 = t720*t1096*t726;
  t10401 = t10397 + t10398;
  t10410 = -1.*t555*t7286;
  t10411 = -1.*t7612*t726;
  t10412 = t10410 + t10411;
  t10425 = -1.*t555*t8304;
  t10428 = -1.*t8356*t726;
  t10430 = t10425 + t10428;
  t10456 = t8040 + t8045;
  t10472 = t8497 + t8499;
  t9673 = -1.*t9662*t9670;
  t10633 = -1.*t555*t9590;
  t10640 = -1.*t9564*t726;
  t10649 = t10633 + t10640;
  t9701 = t781*t9670;
  t9760 = t9662*t9670;
  t10684 = t555*t720;
  t10690 = -1.*t489*t726;
  t10693 = t10684 + t10690;
  t9804 = -1.*t9670*t4681;
  t10034 = t10002*t10026;
  t10928 = -1.*t555*t9927;
  t10935 = -1.*t9920*t726;
  t10947 = t10928 + t10935;
  t10899 = t9921 + t9928;
  t10958 = t9842 + t9858;
  t10110 = -1.*t10026*t7663;
  t10268 = -1.*t10002*t10026;
  t10909 = -1.*t555*t9849;
  t10917 = -1.*t9840*t726;
  t10919 = t10909 + t10917;
  t10354 = t10026*t8434;
  t10705 = -1.*t9662*t9605;
  t10713 = -1.*t9337*t9670;
  t9676 = -1.*t1089*t9337*t9645;
  t9682 = t1141*t9337*t9681;
  t9685 = t9673 + t9676 + t9682;
  t10631 = t781*t9605;
  t10666 = t1844*t9670;
  t9702 = t9314*t9645;
  t9704 = t3757*t9681;
  t9710 = t9701 + t9702 + t9704;
  t10785 = t9662*t9605;
  t11111 = Power(t1089,2);
  t11114 = Power(t1141,2);
  t10795 = t9337*t9670;
  t9768 = t1089*t9337*t9645;
  t9769 = -1.*t1141*t9337*t9681;
  t9774 = t9760 + t9768 + t9769;
  t10835 = -1.*t9670*t4997;
  t10839 = -1.*t9605*t4681;
  t9805 = -1.*t9645*t9723;
  t9811 = -1.*t9681*t5136;
  t9818 = t9804 + t9805 + t9811;
  t10901 = t10002*t10899;
  t10970 = t10958*t10026;
  t10036 = t9962*t9953;
  t10039 = t9867*t9974;
  t10040 = t10034 + t10036 + t10039;
  t10987 = -1.*t10026*t10456;
  t10998 = -1.*t10899*t7663;
  t10114 = -1.*t9953*t9839;
  t10117 = -1.*t9974*t8120;
  t10118 = t10110 + t10114 + t10117;
  t11047 = -1.*t10002*t10899;
  t11052 = -1.*t10958*t10026;
  t10283 = -1.*t9962*t9953;
  t10288 = -1.*t9867*t9974;
  t10293 = t10268 + t10283 + t10288;
  t11062 = t10026*t10472;
  t11068 = t10899*t8434;
  t10355 = t9953*t10174;
  t10357 = t9974*t8537;
  t10358 = t10354 + t10355 + t10357;
  t11305 = 0.053565*t489;
  t11311 = -1.*t720*t9556;
  t11316 = t11305 + t11311;
  t11346 = 0.032875*t489;
  t11349 = -1.*t720*t9908;
  t11351 = t11346 + t11349;
  t11403 = t489*t555*t7249;
  t11405 = t720*t7249*t726;
  t11414 = t11403 + t11405;
  t11418 = t489*t555*t7875;
  t11420 = t720*t7875*t726;
  t11422 = t11418 + t11420;
  t11444 = -1.*t528*t555*t720;
  t11447 = t489*t528*t726;
  t11451 = t11444 + t11447;
  t11480 = t555*t720*t1096;
  t11484 = -1.*t489*t1096*t726;
  t11485 = t11480 + t11484;
  t11494 = -1.*t555*t720*t7249;
  t11497 = t489*t7249*t726;
  t11500 = t11494 + t11497;
  t11508 = -1.*t555*t720*t7875;
  t11515 = t489*t7875*t726;
  t11518 = t11508 + t11515;
  t10613 = -1.*t9337*t9605;
  t10617 = t10613 + t9673;
  t11600 = t555*t11316;
  t11601 = t9590*t726;
  t11606 = t11600 + t11601;
  t11609 = -1.*t11316*t726;
  t11619 = t9663 + t11609;
  t11652 = -1.*t489*t555;
  t11655 = -1.*t720*t726;
  t11661 = t11652 + t11655;
  t10729 = t9438*t1096;
  t10738 = t1844*t9605;
  t10743 = t10729 + t10738 + t9701;
  t10753 = t9337*t9605;
  t10756 = t10753 + t9760;
  t10811 = -1.*t528*t9438;
  t10822 = -1.*t9605*t4997;
  t10824 = t10811 + t10822 + t9804;
  t10871 = t9864*t9932;
  t10872 = 0. + t10871 + t10034;
  t11748 = -1.*t11351*t726;
  t11749 = t10003 + t11748;
  t11742 = t555*t11351;
  t11744 = t9927*t726;
  t11745 = t11742 + t11744;
  t11759 = -1.*t489*t555;
  t11762 = t11759 + t11655;
  t11013 = -1.*t9884*t7875;
  t11026 = -1.*t9932*t8077;
  t11036 = t11013 + t11026 + t10110;
  t11041 = -1.*t9864*t9932;
  t11042 = 0. + t11041 + t10268;
  t11076 = t9884*t8476;
  t11079 = t9932*t8508;
  t11085 = t11076 + t11079 + t10354;
  t11644 = -1.*t9662*t11606;
  t11667 = -1.*t11661*t9670;
  t11607 = t781*t11606;
  t11621 = t11451*t9670;
  t11699 = t9662*t11606;
  t11706 = t11661*t9670;
  t11711 = -1.*t9670*t11485;
  t11713 = -1.*t11606*t4681;
  t11746 = t10002*t11745;
  t11765 = t11762*t10026;
  t11793 = -1.*t10026*t11500;
  t11823 = -1.*t11745*t7663;
  t11849 = -1.*t10002*t11745;
  t11868 = -1.*t11762*t10026;
  t11890 = t10026*t11518;
  t11905 = t11745*t8434;
  t12241 = -0.194401*t528;
  t12244 = -1.*t528*t6089;
  t12245 = -1.*t1096*t5735;
  t12247 = t12241 + t12244 + t12245;
  t12190 = t7811 + t7847;
  t12211 = t6779 + t7242;
  t12201 = -1.*t528*t5625;
  t12202 = t1096*t5723;
  t12204 = t12201 + t12202;
  t12310 = t555*t720*t12211;
  t12311 = -1.*t489*t12211*t726;
  t12313 = t12310 + t12311;
  t12336 = t555*t720*t12204;
  t12338 = -1.*t489*t12204*t726;
  t12342 = t12336 + t12338;
  t12355 = -1.*t1089*t1096;
  t12357 = -1.*t1141*t11451;
  t12359 = t12355 + t12357;
  t8610 = t969*t4681;
  t8620 = -1.*t357*t5136;
  t8628 = t8610 + t8620;
  t12373 = t489*t555*t12211;
  t12376 = t720*t12211*t726;
  t12377 = t12373 + t12376;
  t12380 = t1089*t12190;
  t12381 = -1.*t1141*t12313;
  t12385 = t12380 + t12381;
  t12394 = t489*t555*t12204;
  t12395 = t720*t12204*t726;
  t12400 = t12394 + t12395;
  t12414 = t1089*t12211;
  t12416 = -1.*t1141*t12342;
  t12423 = t12414 + t12416;
  t12630 = 0.04*t528;
  t12632 = t12630 + t9553;
  t12634 = t555*t720*t12632;
  t12643 = -1.*t489*t12632*t726;
  t12648 = t12634 + t12643;
  t12660 = t489*t555*t12632;
  t12665 = t720*t12632*t726;
  t12666 = t12660 + t12665;
  t12758 = t555*t720*t12247;
  t12760 = -1.*t489*t12247*t726;
  t12761 = t12758 + t12760;
  t12764 = t489*t555*t12247;
  t12767 = t720*t12247*t726;
  t12768 = t12764 + t12767;
  t12795 = t9901 + t9906 + t9907;
  t12668 = -1.*t9662*t12666;
  t12697 = t781*t12666;
  t12704 = t9670*t4681;
  t12925 = t9556*t1141;
  t12926 = t1089*t12648;
  t12928 = t12925 + t12926;
  t12939 = t1089*t9556;
  t12940 = -1.*t1141*t12648;
  t12942 = t12939 + t12940;
  t12303 = t1089*t11451;
  t12304 = t8726 + t12303;
  t12718 = t9662*t12666;
  t12742 = -1.*t10388*t9670;
  t12745 = -1.*t12666*t4681;
  t12335 = t12211*t1141;
  t12344 = t1089*t12342;
  t12345 = t12335 + t12344;
  t12769 = t10002*t12768;
  t12809 = -1.*t10026*t12400;
  t12828 = -1.*t12768*t7663;
  t13039 = t12795*t1141;
  t13042 = t1089*t12761;
  t13043 = t13039 + t13042;
  t13074 = t1089*t12795;
  t13076 = -1.*t1141*t12761;
  t13082 = t13074 + t13076;
  t12309 = t12190*t1141;
  t12315 = t1089*t12313;
  t12324 = t12309 + t12315;
  t12860 = -1.*t10002*t12768;
  t12882 = t10026*t12377;
  t12892 = t12768*t8434;
  t13207 = -0.16*t5625;
  t13211 = t13207 + t5733;
  t13187 = 0.020000000000000018*t5625;
  t13193 = 0.16*t5723;
  t13199 = t13187 + t13193;
  t13170 = 0.194401*t5625;
  t13179 = t5625*t6089;
  t13200 = t5625*t13199;
  t13204 = -1.*t5735*t5723;
  t13215 = t13211*t5723;
  t13216 = t13170 + t13179 + t13200 + t13204 + t13215;
  t13219 = -1.*t5625*t13211;
  t13222 = t13199*t5723;
  t13232 = t5737 + t13219 + t5872 + t6090 + t13222;
  t12192 = -0.11459*t12190;
  t12206 = -0.081715*t12204;
  t12207 = t12192 + t12206;
  t12209 = -1.*t12207*t6389;
  t12213 = -0.032875*t12211*t8279;
  t12259 = -1.*t9849*t9927;
  t12260 = -1.*t9840*t9920;
  t12261 = 0. + t12259 + t12260;
  t12273 = t9849*t9927;
  t12274 = t9840*t9920;
  t12279 = 0. + t12273 + t12274;
  t13319 = -1.*t1096*t13211;
  t13323 = t528*t13199;
  t13330 = t13319 + t13323;
  t12264 = t12261*t12190;
  t12280 = t12279*t12211;
  t12334 = -1.*t8279*t12324;
  t12348 = -1.*t6389*t12345;
  t12378 = t357*t12377;
  t12387 = t969*t12385;
  t12389 = t12378 + t12387;
  t12393 = -1.*t8279*t12389;
  t12407 = t357*t12400;
  t12442 = t969*t12423;
  t12451 = t12407 + t12442;
  t12454 = -1.*t6389*t12451;
  t12594 = t969*t12377;
  t12606 = -1.*t357*t12385;
  t12608 = t12594 + t12606;
  t12609 = -1.*t8279*t12608;
  t12613 = t969*t12400;
  t12615 = -1.*t357*t12423;
  t12618 = t12613 + t12615;
  t12622 = -1.*t6389*t12618;
  t8637 = t969*t7663;
  t8641 = -1.*t357*t8120;
  t8649 = t969*t8434;
  t8659 = -1.*t357*t8537;
  t12757 = t12400*t10872;
  t12785 = -1.*t9884*t12211;
  t12801 = -1.*t9932*t12342;
  t13453 = t555*t720*t13330;
  t13454 = -1.*t489*t13330*t726;
  t13463 = t13453 + t13454;
  t13468 = t489*t555*t13330;
  t13471 = t720*t13330*t726;
  t13472 = t13468 + t13471;
  t12849 = t12377*t11042;
  t13481 = t528*t13211;
  t13483 = t1096*t13199;
  t13484 = t13481 + t13483;
  t12878 = t9884*t12190;
  t12880 = t9932*t12313;
  t13038 = t12345*t10040;
  t13475 = t10002*t13472;
  t13495 = -1.*t13472*t7663;
  t13088 = -1.*t9953*t12345;
  t13089 = -1.*t9974*t12423;
  t13615 = t13484*t1141;
  t13616 = t1089*t13463;
  t13625 = t13615 + t13616;
  t13636 = t1089*t13484;
  t13639 = -1.*t1141*t13463;
  t13641 = t13636 + t13639;
  t13108 = t12324*t10293;
  t13528 = -1.*t10002*t13472;
  t13542 = t13472*t8434;
  t13123 = t9953*t12324;
  t13131 = t9974*t12385;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.06108*(-1.*t357*t781 - 1.*t3757*t969) + 0.06108*(-1.*t357*t4681 - 1.*t5136*t969) - 1.*t6389*(-1.*t357*t7663 - 1.*t8120*t969) - 1.*t8279*(-1.*t357*t8434 - 1.*t8537*t969))*var2[1] - 0.5*(0.06108*t8628 - 1.*t6389*(t8637 + t8641) - 1.*t8279*(t8649 + t8659) - 0.06108*(-1.*t357*t3757 + t781*t969))*var2[2])*var2[13];
  p_output1[4]=(-0.5*(-0.06108*t3757 + 0.06108*t5136 - 1.*t6389*t9290 - 1.*t8279*t9295)*var2[0] - 0.5*(0.06108*t357*t8746 - 0.06108*t357*t8754 + t357*t6389*t9148 + t357*t8279*t9181)*var2[1] - 0.5*(-0.06108*t8746*t969 + 0.06108*t8754*t969 - 1.*t6389*t9148*t969 - 1.*t8279*t9181*t969)*var2[2] - 0.5*(0.06108*(t9314*(t1141*t9337*t9628 + t1141*t9337*t9645) + t1089*t9337*(t3757*t9628 + t3757*t9645 + t8746*t9681 + t9314*t9681) + t3757*t9685 - 1.*t1141*t9337*t9710) - 0.06108*((-1.*t1141*t9337*t9628 - 1.*t1141*t9337*t9645)*t9723 + t1089*t9337*(-1.*t5136*t9628 - 1.*t5136*t9645 - 1.*t8754*t9681 - 1.*t9681*t9723) + t5136*t9774 - 1.*t1141*t9337*t9818) - 1.*t8279*(t10040*t9290 - 1.*t10118*t1141*t9864 + t9962*(-1.*t8120*t9940 - 1.*t9290*t9953 - 1.*t9839*t9971 - 1.*t9148*t9974) + t9839*(t9867*t9940 - 1.*t1141*t9864*t9953 + t9962*t9971 - 1.*t1089*t9864*t9974)) - 1.*t6389*(t10293*t9295 - 1.*t10358*t1141*t9864 + t9962*(t8537*t9940 + t9295*t9953 + t10174*t9971 + t9181*t9974) + t10174*(-1.*t9867*t9940 + t1141*t9864*t9953 - 1.*t9962*t9971 + t1089*t9864*t9974)))*var2[3])*var2[13];
  p_output1[5]=(-0.5*(-0.06108*t10388*t1089 + 0.06108*t10401*t1089 - 1.*t10412*t1089*t6389 - 1.*t10430*t1089*t8279)*var2[0] - 0.5*(-1.*t6389*(t10412*t1141*t357 + t10456*t969) - 1.*t8279*(t10430*t1141*t357 + t10472*t969) - 0.06108*(t10388*t1141*t357 + t1844*t969) + 0.06108*(t10401*t1141*t357 + t4997*t969))*var2[1] - 0.5*(-0.06108*(t1844*t357 - 1.*t10388*t1141*t969) + 0.06108*(t357*t4997 - 1.*t10401*t1141*t969) - 1.*t6389*(t10456*t357 - 1.*t10412*t1141*t969) - 1.*t8279*(t10472*t357 - 1.*t10430*t1141*t969))*var2[2] - 0.5*(0.06108*(t1089*t9337*(t10631 + t10666 - 1.*t10649*t1141*t3757 + t10649*t1089*t9314 + t10388*t1089*t9645 - 1.*t10388*t1141*t9681) + t9314*(t10705 + t10713 - 1.*t10649*t11111*t9337 - 1.*t10649*t11114*t9337 - 1.*t10693*t1089*t9645 + t10693*t1141*t9681) + t10388*t1089*t9685 + t10693*t1089*t9710) - 0.06108*((t10785 + t10795 + t10649*t11111*t9337 + t10649*t11114*t9337 + t10693*t1089*t9645 - 1.*t10693*t1141*t9681)*t9723 + t1089*t9337*(t10835 + t10839 + t10649*t1141*t5136 - 1.*t10401*t1089*t9645 + t10401*t1141*t9681 - 1.*t10649*t1089*t9723) + t10401*t1089*t9774 + t10693*t1089*t9818) - 1.*t8279*(t10040*t10412*t1089 + t10118*t1089*t10919 + t9962*(t10987 + t10998 + t10947*t1141*t8120 - 1.*t1089*t10947*t9839 - 1.*t10412*t1089*t9953 + t10412*t1141*t9974) + t9839*(t10901 + t10970 - 1.*t10947*t1141*t9867 + t1089*t10919*t9953 + t1089*t10947*t9962 - 1.*t10919*t1141*t9974)) - 1.*t6389*(t10293*t10430*t1089 + t10358*t1089*t10919 + t9962*(t10174*t1089*t10947 + t11062 + t11068 - 1.*t10947*t1141*t8537 + t10430*t1089*t9953 - 1.*t10430*t1141*t9974) + t10174*(t11047 + t11052 + t10947*t1141*t9867 - 1.*t1089*t10919*t9953 - 1.*t1089*t10947*t9962 + t10919*t1141*t9974)))*var2[3] - 0.5*(0.06108*(t10617*t1844 + t10743*t9337 + t781*(t10705 + t10713 - 1.*t10649*t9337 - 1.*t10693*t9605) + (t10631 + t10666 + t10649*t1844 + t10388*t9605)*t9662) - 0.06108*(t10756*t4997 + t10824*t9337 + t4681*(t10785 + t10795 + t10649*t9337 + t10693*t9605) + (t10835 + t10839 - 1.*t10649*t4997 - 1.*t10401*t9605)*t9662) - 1.*t6389*(t10472*t11042 + t10958*t11085 + t10002*(t11062 + t11068 + t10947*t8508 + t10430*t9932) + t8434*(t11047 + t11052 - 1.*t10947*t9864 - 1.*t10919*t9932)) - 1.*t8279*(t10456*t10872 + t10958*t11036 + t10002*(t10987 + t10998 - 1.*t10947*t8077 - 1.*t10412*t9932) + t7663*(t10901 + t10970 + t10947*t9864 + t10919*t9932)))*var2[4])*var2[13];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=(-0.5*(0.06108*t1089*t4681 - 1.*t1089*t11414*t6389 - 0.06108*t1089*t781 - 1.*t1089*t11422*t8279)*var2[0] - 0.5*(-0.06108*(t1141*t357*t781 + t11451*t969) + 0.06108*(t1141*t357*t4681 + t11485*t969) - 1.*t6389*(t1141*t11414*t357 + t11500*t969) - 1.*t8279*(t1141*t11422*t357 + t11518*t969))*var2[1] - 0.5*(-1.*t6389*(t11500*t357 - 1.*t1141*t11414*t969) - 1.*t8279*(t11518*t357 - 1.*t1141*t11422*t969) + 0.06108*(t11485*t357 - 1.*t1141*t4681*t969) - 0.06108*(t11451*t357 - 1.*t1141*t781*t969))*var2[2] - 0.5*(0.06108*(t1089*t9337*(t11607 + t11621 - 1.*t1141*t11619*t3757 + t1089*t11619*t9314 + t1089*t781*t9645 - 1.*t1141*t781*t9681) + t9314*(t11644 + t11667 - 1.*t11111*t11619*t9337 - 1.*t11114*t11619*t9337 - 1.*t1089*t9645*t9662 + t1141*t9662*t9681) + t1089*t781*t9685 + t1089*t9662*t9710) - 0.06108*((t11699 + t11706 + t11111*t11619*t9337 + t11114*t11619*t9337 + t1089*t9645*t9662 - 1.*t1141*t9662*t9681)*t9723 + t1089*t9337*(t11711 + t11713 + t1141*t11619*t5136 - 1.*t1089*t4681*t9645 + t1141*t4681*t9681 - 1.*t1089*t11619*t9723) + t1089*t4681*t9774 + t1089*t9662*t9818) - 1.*t8279*(t10040*t1089*t11414 + t10118*t1089*t9662 + t9962*(t11793 + t11823 + t1141*t11749*t8120 - 1.*t1089*t11749*t9839 - 1.*t1089*t11414*t9953 + t1141*t11414*t9974) + t9839*(t11746 + t11765 - 1.*t1141*t11749*t9867 + t1089*t9662*t9953 + t1089*t11749*t9962 - 1.*t1141*t9662*t9974)) - 1.*t6389*(t10293*t1089*t11422 + t10358*t1089*t9662 + t9962*(t10174*t1089*t11749 + t11890 + t11905 - 1.*t1141*t11749*t8537 + t1089*t11422*t9953 - 1.*t1141*t11422*t9974) + t10174*(t11849 + t11868 + t1141*t11749*t9867 - 1.*t1089*t9662*t9953 - 1.*t1089*t11749*t9962 + t1141*t9662*t9974)))*var2[3] - 0.5*(0.06108*(t10617*t11451 + t10743*t11661 + t781*(t10705 + t11644 + t11667 - 1.*t11619*t9337) + (t10631 + t11607 + t11621 + t11619*t1844)*t9662) - 0.06108*(t10756*t11485 + t10824*t11661 + t4681*(t10785 + t11699 + t11706 + t11619*t9337) + (t10839 + t11711 + t11713 - 1.*t11619*t4997)*t9662) - 1.*t6389*(t11042*t11518 + t11085*t11762 + t10002*(t11890 + t11905 + t11749*t8508 + t11422*t9932) + t8434*(t11849 + t11868 - 1.*t11749*t9864 - 1.*t9662*t9932)) - 1.*t8279*(t10872*t11500 + t11036*t11762 + t10002*(t11793 + t11823 - 1.*t11749*t8077 - 1.*t11414*t9932) + t7663*(t11746 + t11765 + t11749*t9864 + t9662*t9932)))*var2[4] - 0.5*(-0.06108*t528*(-1.*t11316*t720 - 1.*t720*t9564) + 0.06108*t1096*(t11316*t720 + t720*t9564) - 1.*t6389*t8476*(-1.*t11351*t9849 + t720*t9920 + t489*t9927 - 1.*t9840*t9927) - 1.*t7875*t8279*(t11351*t9849 - 1.*t720*t9920 - 1.*t489*t9927 + t9840*t9927))*var2[5])*var2[13];
  p_output1[13]=(-0.5*(0.06108*t12304 + t12334 + t12348 - 0.06108*t9723)*var2[0] - 0.5*(t12609 + t12622 - 0.06108*t8628 + 0.06108*(-1.*t12359*t357 + t10388*t969))*var2[1] - 0.5*(t12393 + t12454 + 0.06108*(t10388*t357 + t12359*t969) - 0.06108*(t357*t4681 + t5136*t969))*var2[2] - 0.5*(0.06108*(t9314*(t12668 - 1.*t1089*t12928*t9337 + t1141*t12942*t9337) + t9685*t9723 + t1089*t9337*(t12697 + t12704 + t12942*t3757 + t12928*t9314 + t5136*t9681 + t9645*t9723)) - 0.06108*((t12718 + t1089*t12928*t9337 - 1.*t1141*t12942*t9337)*t9723 + t1089*t9337*(t12742 + t12745 - 1.*t12942*t5136 - 1.*t12304*t9645 - 1.*t12359*t9681 - 1.*t12928*t9723) + t12304*t9774) - 1.*t6389*(t13108 + (t12882 + t12892 + t10174*t13043 + t13123 + t13131 + t13082*t8537)*t9962 + t10174*(t12860 - 1.*t13082*t9867 - 1.*t13043*t9962)) - 1.*t8279*(t13038 + (t12809 + t12828 + t13088 + t13089 - 1.*t13082*t8120 - 1.*t13043*t9839)*t9962 + t9839*(t12769 + t13082*t9867 + t13043*t9962)))*var2[3] - 0.5*(-0.06108*(t10388*t10756 + t4681*(t12718 + t12648*t9337) + (t10729 + t12742 + t12745 - 1.*t12648*t4997 - 1.*t528*t9556 - 1.*t11451*t9605)*t9662) + 0.06108*(t10617*t4681 + t781*(t12668 - 1.*t12648*t9337) + (t12697 + t12704 + t12648*t1844 + t528*t9438 + t1096*t9556 + t4997*t9605)*t9662) - 1.*t6389*(t12849 + t10002*(t12878 + t12880 + t12882 + t12892 + t12795*t8476 + t12761*t8508) + t8434*(t12860 - 1.*t12761*t9864)) - 1.*t8279*(t12757 + t10002*(t12785 + t12801 + t12809 + t12828 - 1.*t12795*t7875 - 1.*t12761*t8077) + t7663*(t12769 + t12761*t9864)))*var2[4] - 0.5*(0.06108*t1096*(t489*t9564 - 1.*t720*t9590) + 0.06108*t528*(-1.*t489*t9564 + t720*t9590) - 1.*t6389*(t12264 + t8476*(-1.*t12247*t720*t9840 - 1.*t12247*t489*t9849)) - 1.*t8279*(t12280 + t7875*(t12247*t720*t9840 + t12247*t489*t9849)))*var2[5] - 0.5*(0.0032717502*t1096 + t12209 + t12213 - 0.0032717502*t528)*var2[12])*var2[13];
  p_output1[14]=var2[13]*(-0.5*(t12334 + t12348 - 0.241*t10174*t13232 - 0.241*t13216*t9839)*var2[0] - 0.5*(t12609 + t12622 - 0.241*t13216*(0. + t8637 + t8641) - 0.241*t13232*(0. + t8649 + t8659))*var2[1] - 0.5*(t12393 + t12454 - 0.241*t13216*(0. + t357*t7663 + t8120*t969) - 0.241*t13232*(0. + t357*t8434 + t8537*t969))*var2[2] - 0.5*(-0.241*t13232*(t10040*t9839 + t10118*t9962) - 0.241*t13216*(t10174*t10293 + t10358*t9962) - 1.*t6389*(t13108 + (t12882 + t13123 + t13131 + t13542 + t10174*t13625 + t13641*t8537)*t9962 + t10174*(t13528 - 1.*t13641*t9867 - 1.*t13625*t9962)) - 1.*t8279*(t13038 + (t12809 + t13088 + t13089 + t13495 - 1.*t13641*t8120 - 1.*t13625*t9839)*t9962 + t9839*(t13475 + t13641*t9867 + t13625*t9962)))*var2[3] - 0.5*(-0.241*t13232*(t10002*t11036 + t10872*t7663) - 0.241*t13216*(t10002*t11085 + t11042*t8434) - 1.*t6389*(t12849 + t10002*(t12878 + t12880 + t12882 + t13542 + t13484*t8476 + t13463*t8508) + t8434*(t13528 - 1.*t13463*t9864)) - 1.*t8279*(t12757 + t10002*(t12785 + t12801 + t12809 + t13495 - 1.*t13484*t7875 - 1.*t13463*t8077) + t7663*(t13475 + t13463*t9864)))*var2[4] - 0.5*(-0.241*t13232*(0. + t12279*t7875) - 0.241*t13216*(0. + t12261*t8476) - 1.*t6389*(t12264 + t8476*(-1.*t13330*t720*t9840 - 1.*t13330*t489*t9849)) - 1.*t8279*(t12280 + t7875*(t13330*t720*t9840 + t13330*t489*t9849)))*var2[5] - 0.5*(t12209 + t12213 - 0.241*t13232*(0. + 0.032875*t7875) - 0.241*t13216*(0. - 0.081715*t7249 - 0.11459*t8476))*var2[12] - 0.5*(-0.241*t13216*t6277 - 1.*t13216*t6389 - 0.241*t13232*t8269 - 1.*t13232*t8279)*var2[13] - 0.5*(0.03856*t13216 - 0.004820000000000004*t13232)*var2[14]);
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec14_plane.hh"

namespace SymFunction
{

void Ce3_vec14_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
