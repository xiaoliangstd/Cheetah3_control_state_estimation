/*
 * Automatically Generated from Mathematica.
 * Fri 21 Dec 2018 15:11:52 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t77;
  double t346;
  double t57;
  double t350;
  double t617;
  double t620;
  double t630;
  double t52;
  double t541;
  double t555;
  double t569;
  double t640;
  double t657;
  double t742;
  double t748;
  double t749;
  double t1040;
  double t1072;
  double t338;
  double t373;
  double t389;
  double t431;
  double t639;
  double t665;
  double t679;
  double t690;
  double t724;
  double t1117;
  double t1174;
  double t1245;
  double t1289;
  double t1376;
  double t1430;
  double t1481;
  double t1570;
  double t1867;
  double t1937;
  double t1676;
  double t1707;
  double t1755;
  double t2132;
  double t2180;
  double t2197;
  double t736;
  double t805;
  double t830;
  double t851;
  double t856;
  double t880;
  double t2292;
  double t2319;
  double t2394;
  double t2459;
  double t2487;
  double t2569;
  double t2615;
  double t2720;
  double t2744;
  double t3621;
  double t3650;
  double t3697;
  double t3850;
  double t3558;
  double t3902;
  double t3935;
  double t3974;
  double t4032;
  double t4066;
  double t4070;
  double t4176;
  double t4199;
  double t4225;
  double t4227;
  double t4232;
  double t3943;
  double t4205;
  double t4212;
  double t4695;
  double t4728;
  double t4731;
  double t4736;
  double t4758;
  double t4759;
  double t5101;
  double t5102;
  double t5103;
  double t5078;
  double t5124;
  double t5006;
  double t5010;
  double t5012;
  double t4680;
  double t4682;
  double t4694;
  double t4772;
  double t4981;
  double t5056;
  double t5074;
  double t5185;
  double t5192;
  double t5453;
  double t5456;
  double t5458;
  double t5460;
  double t5490;
  double t5519;
  double t5520;
  double t5521;
  double t5526;
  double t5527;
  double t5528;
  double t5613;
  double t5615;
  double t5619;
  double t5533;
  double t5534;
  double t5536;
  double t5543;
  double t5555;
  double t5558;
  double t5566;
  double t5567;
  double t5568;
  double t5570;
  double t5571;
  double t5574;
  double t5691;
  double t5692;
  double t5694;
  double t5684;
  double t5685;
  double t5687;
  double t5697;
  double t5698;
  double t5699;
  double t5718;
  double t5719;
  double t5720;
  double t5740;
  double t5741;
  double t5742;
  double t5745;
  double t5748;
  double t5751;
  double t5690;
  double t5703;
  double t5705;
  double t5758;
  double t5761;
  double t5707;
  double t5709;
  double t5855;
  double t5868;
  double t5870;
  double t5850;
  double t5851;
  double t5852;
  double t5728;
  double t5895;
  double t5897;
  double t5899;
  double t5752;
  double t5764;
  double t5928;
  double t5929;
  double t5930;
  double t5923;
  double t5924;
  double t5925;
  double t5777;
  double t5854;
  double t5871;
  double t5872;
  double t5792;
  double t5794;
  double t5940;
  double t5942;
  double t5812;
  double t5822;
  double t5874;
  double t5876;
  double t5830;
  double t5833;
  double t5670;
  double t5672;
  double t5674;
  double t4795;
  double t4879;
  double t4882;
  double t4898;
  double t4958;
  double t4967;
  double t5000;
  double t5001;
  double t5004;
  double t5005;
  double t5115;
  double t5133;
  double t5154;
  double t5167;
  double t5189;
  double t5191;
  double t5193;
  double t5195;
  double t5196;
  double t5199;
  double t5201;
  double t5629;
  double t5631;
  double t5636;
  double t1018;
  double t1290;
  double t1571;
  double t1586;
  double t1648;
  double t1666;
  double t1781;
  double t1849;
  double t2068;
  double t2080;
  double t2138;
  double t2202;
  double t2255;
  double t2793;
  double t6066;
  double t6067;
  double t6070;
  double t5331;
  double t5370;
  double t5372;
  double t5413;
  double t5414;
  double t5415;
  double t5418;
  double t5421;
  double t5422;
  double t5426;
  double t5427;
  double t5428;
  double t5430;
  double t5431;
  double t5432;
  double t5257;
  double t5259;
  double t5266;
  double t5281;
  double t5282;
  double t5316;
  double t5623;
  double t5627;
  double t5647;
  double t5675;
  double t5677;
  double t5537;
  double t5562;
  double t5563;
  double t5569;
  double t5577;
  double t5578;
  double t5706;
  double t5710;
  double t5713;
  double t5714;
  double t5738;
  double t5744;
  double t5753;
  double t5755;
  double t5757;
  double t5763;
  double t5765;
  double t5767;
  double t5768;
  double t5722;
  double t5723;
  double t5724;
  double t5729;
  double t5730;
  double t5731;
  double t5776;
  double t5779;
  double t5780;
  double t5783;
  double t5788;
  double t5789;
  double t5790;
  double t5793;
  double t5797;
  double t5798;
  double t5800;
  double t5805;
  double t5809;
  double t5810;
  double t5817;
  double t5819;
  double t5821;
  double t5824;
  double t5825;
  double t5827;
  double t5832;
  double t5836;
  double t5837;
  double t5838;
  double t5873;
  double t5879;
  double t5884;
  double t5892;
  double t5904;
  double t5908;
  double t5909;
  double t5912;
  double t5914;
  double t5915;
  double t5922;
  double t5926;
  double t5934;
  double t5935;
  double t5939;
  double t5943;
  double t5944;
  double t5947;
  double t5949;
  double t5951;
  double t5953;
  double t5954;
  double t5955;
  double t5956;
  double t5962;
  double t5964;
  double t5965;
  double t5973;
  double t5976;
  double t5977;
  double t5978;
  double t5984;
  double t5989;
  double t5990;
  double t5993;
  double t5994;
  double t5996;
  double t5997;
  double t6005;
  double t6006;
  double t6007;
  double t6010;
  double t6013;
  double t6018;
  double t6021;
  double t6027;
  double t6029;
  double t6030;
  double t6032;
  double t6195;
  double t6196;
  double t6199;
  double t5529;
  double t5532;
  double t5565;
  double t5581;
  double t5607;
  double t6110;
  double t6114;
  double t6117;
  double t6118;
  double t6122;
  double t5893;
  double t5921;
  double t5952;
  double t5988;
  double t6035;
  double t6036;
  double t6270;
  double t6271;
  double t6274;
  double t6275;
  double t6278;
  double t6281;
  double t6160;
  double t6162;
  double t6164;
  double t6165;
  double t6166;
  double t6172;
  double t6342;
  double t6344;
  double t6350;
  double t5716;
  double t5733;
  double t5771;
  double t5803;
  double t5839;
  double t5843;
  double t6251;
  double t6252;
  double t6253;
  double t6255;
  double t6257;
  double t6266;
  double t6141;
  double t6144;
  double t6145;
  double t6147;
  double t6151;
  double t6152;
  double t6417;
  double t6422;
  double t6423;
  double t6364;
  double t6366;
  double t6368;
  double t6393;
  double t6395;
  double t6396;
  double t6404;
  double t6405;
  double t6407;
  double t6412;
  double t6416;
  double t6427;
  double t6428;
  double t4217;
  double t4402;
  double t4503;
  double t4653;
  double t5226;
  double t5231;
  double t6202;
  double t6203;
  double t6205;
  double t6206;
  double t6208;
  double t6209;
  double t6071;
  double t6072;
  double t6074;
  double t6079;
  double t6080;
  double t6083;
  double t6478;
  double t6479;
  double t6480;
  double t6486;
  double t6487;
  double t6488;
  double t6491;
  double t6332;
  double t6351;
  double t6352;
  double t6354;
  double t6363;
  double t6376;
  double t6377;
  double t5254;
  double t5278;
  double t5280;
  double t5326;
  double t5436;
  double t5442;
  double t6572;
  double t6574;
  double t6579;
  double t6585;
  double t6586;
  double t6589;
  double t6229;
  double t6230;
  double t6231;
  double t6233;
  double t6234;
  double t6235;
  double t6093;
  double t6097;
  double t6098;
  double t6103;
  double t6104;
  double t6105;
  double t6496;
  double t6500;
  double t6502;
  double t6503;
  double t6504;
  double t6507;
  double t6508;
  double t6386;
  double t6389;
  double t6390;
  double t6391;
  double t6392;
  double t6399;
  double t6402;
  double t6548;
  double t6549;
  double t6550;
  double t6552;
  double t6553;
  double t6646;
  double t6647;
  double t6648;
  double t6656;
  double t6657;
  double t1617;
  double t2091;
  double t2751;
  double t2967;
  double t3079;
  double t6212;
  double t6218;
  double t6221;
  double t6224;
  double t6225;
  double t6086;
  double t6087;
  double t6088;
  double t6089;
  double t6091;
  double t6459;
  double t6461;
  double t6464;
  double t6466;
  double t6467;
  double t6307;
  double t6309;
  double t6312;
  double t6314;
  double t6319;
  double t6533;
  double t6537;
  double t6538;
  double t6688;
  double t6690;
  double t6691;
  double t6624;
  double t6625;
  double t6627;
  double t732;
  double t959;
  double t987;
  double t6182;
  double t6185;
  double t6186;
  double t6057;
  double t6058;
  double t6061;
  double t6451;
  double t6452;
  double t6455;
  double t6295;
  double t6298;
  double t6300;
  t77 = Cos(var1[8]);
  t346 = Sin(var1[7]);
  t57 = Cos(var1[7]);
  t350 = Sin(var1[8]);
  t617 = -1.*t77*t346;
  t620 = -1.*t57*t350;
  t630 = t617 + t620;
  t52 = Sin(var1[4]);
  t541 = Cos(var1[4]);
  t555 = Cos(var1[6]);
  t569 = Sin(var1[5]);
  t640 = Cos(var1[5]);
  t657 = Sin(var1[6]);
  t742 = -1.*t57*t77;
  t748 = t346*t350;
  t749 = t742 + t748;
  t1040 = -1.*t77;
  t1072 = 1. + t1040;
  t338 = t57*t77;
  t373 = -1.*t346*t350;
  t389 = t338 + t373;
  t431 = t52*t389;
  t639 = -1.*t555*t569*t630;
  t665 = t640*t657*t630;
  t679 = t639 + t665;
  t690 = t541*t679;
  t724 = t431 + t690;
  t1117 = 0.100689*t1072;
  t1174 = 0.080689*t77;
  t1245 = -0.16*t350;
  t1289 = t1117 + t1174 + t1245;
  t1376 = -0.20833*t1072;
  t1430 = -0.36833*t77;
  t1481 = 0.02*t350;
  t1570 = t1376 + t1430 + t1481;
  t1867 = -0.16*t77;
  t1937 = t1867 + t1481;
  t1676 = 0.02*t77;
  t1707 = 0.16*t350;
  t1755 = t1676 + t1707;
  t2132 = t77*t1570;
  t2180 = -0.242889*t350;
  t2197 = t1289*t350;
  t736 = t52*t630;
  t805 = -1.*t555*t569*t749;
  t830 = t640*t657*t749;
  t851 = t805 + t830;
  t856 = t541*t851;
  t880 = t736 + t856;
  t2292 = t77*t346;
  t2319 = t57*t350;
  t2394 = t2292 + t2319;
  t2459 = t52*t2394;
  t2487 = -1.*t555*t569*t389;
  t2569 = t640*t657*t389;
  t2615 = t2487 + t2569;
  t2720 = t541*t2615;
  t2744 = t2459 + t2720;
  t3621 = 0.242889*t346;
  t3650 = -1.*t346*t1289;
  t3697 = t57*t1570;
  t3850 = t3621 + t3650 + t3697;
  t3558 = 0.032875*t657;
  t3902 = t555*t3850;
  t3935 = t3558 + t3902;
  t3974 = -1.*t555;
  t4032 = 1. + t3974;
  t4066 = -0.081715*t4032;
  t4070 = -0.11459*t555;
  t4176 = t657*t3850;
  t4199 = t4066 + t4070 + t4176;
  t4225 = -1.*t657*t3935;
  t4227 = t555*t4199;
  t4232 = t4225 + t4227;
  t3943 = t657*t3935;
  t4205 = -1.*t555*t4199;
  t4212 = t3943 + t4205;
  t4695 = -1.*t57;
  t4728 = 1. + t4695;
  t4731 = 0.242889*t4728;
  t4736 = t57*t1289;
  t4758 = t346*t1570;
  t4759 = t4731 + t4736 + t4758;
  t5101 = -1.*t346*t1937;
  t5102 = t57*t1755;
  t5103 = t5101 + t5102;
  t5078 = Power(t555,2);
  t5124 = Power(t657,2);
  t5006 = t57*t1937;
  t5010 = t346*t1755;
  t5012 = t5006 + t5010;
  t4680 = t640*t555;
  t4682 = t569*t657;
  t4694 = t4680 + t4682;
  t4772 = -1.*t4759*t2394;
  t4981 = t4759*t389;
  t5056 = -1.*t5012*t2394;
  t5074 = -1.*t4759*t389;
  t5185 = t4759*t630;
  t5192 = t5012*t389;
  t5453 = Sin(var1[3]);
  t5456 = t640*t555*t630;
  t5458 = t569*t657*t630;
  t5460 = t5456 + t5458;
  t5490 = t5453*t5460;
  t5519 = Cos(var1[3]);
  t5520 = t541*t389;
  t5521 = -1.*t52*t679;
  t5526 = t5520 + t5521;
  t5527 = t5519*t5526;
  t5528 = t5490 + t5527;
  t5613 = t5519*t5460;
  t5615 = -1.*t5453*t5526;
  t5619 = t5613 + t5615;
  t5533 = t640*t555*t389;
  t5534 = t569*t657*t389;
  t5536 = t5533 + t5534;
  t5543 = t541*t2394;
  t5555 = -1.*t52*t2615;
  t5558 = t5543 + t5555;
  t5566 = t640*t555*t749;
  t5567 = t569*t657*t749;
  t5568 = t5566 + t5567;
  t5570 = t541*t630;
  t5571 = -1.*t52*t851;
  t5574 = t5570 + t5571;
  t5691 = t555*t569;
  t5692 = -1.*t640*t657;
  t5694 = t5691 + t5692;
  t5684 = -1.*t569*t3935;
  t5685 = t640*t4199;
  t5687 = t5684 + t5685;
  t5697 = t640*t3935;
  t5698 = t569*t4199;
  t5699 = t5697 + t5698;
  t5718 = -1.*t4694*t5687;
  t5719 = -1.*t5694*t5699;
  t5720 = t5718 + t5719;
  t5740 = -1.*t555*t569*t5103;
  t5741 = t640*t657*t5103;
  t5742 = t5740 + t5741;
  t5745 = t640*t555*t5103;
  t5748 = t569*t657*t5103;
  t5751 = t5745 + t5748;
  t5690 = t4694*t5687;
  t5703 = t5694*t5699;
  t5705 = t5690 + t5703;
  t5758 = t5687*t679;
  t5761 = t5699*t5460;
  t5707 = -1.*t5687*t679;
  t5709 = -1.*t5699*t5460;
  t5855 = t541*t5687;
  t5868 = t52*t4759;
  t5870 = t5855 + t5868;
  t5850 = -1.*t52*t5687;
  t5851 = t541*t4759;
  t5852 = t5850 + t5851;
  t5728 = t5699*t5536;
  t5895 = t52*t4694*t5852;
  t5897 = -1.*t541*t4694*t5870;
  t5899 = t5719 + t5895 + t5897;
  t5752 = -1.*t5694*t5751;
  t5764 = t5751*t5536;
  t5928 = t541*t5742;
  t5929 = t52*t5012;
  t5930 = t5928 + t5929;
  t5923 = -1.*t52*t5742;
  t5924 = t541*t5012;
  t5925 = t5923 + t5924;
  t5777 = t5694*t5751;
  t5854 = -1.*t52*t4694*t5852;
  t5871 = t541*t4694*t5870;
  t5872 = t5703 + t5854 + t5871;
  t5792 = -1.*t5751*t5460;
  t5794 = -1.*t5699*t5568;
  t5940 = t5870*t724;
  t5942 = t5852*t5526;
  t5812 = -1.*t5699*t5536;
  t5822 = -1.*t5751*t5536;
  t5874 = -1.*t5870*t724;
  t5876 = -1.*t5852*t5526;
  t5830 = t5751*t5460;
  t5833 = t5699*t5568;
  t5670 = t5519*t5568;
  t5672 = -1.*t5453*t5574;
  t5674 = t5670 + t5672;
  t4795 = -1.*t555*t3935*t389;
  t4879 = -1.*t657*t4199*t389;
  t4882 = t4772 + t4795 + t4879;
  t4898 = t630*t4882;
  t4958 = t555*t3935*t630;
  t4967 = t657*t4199*t630;
  t5000 = t4958 + t4967 + t4981;
  t5001 = t389*t5000;
  t5004 = -1.*t555*t3935*t630;
  t5005 = -1.*t657*t4199*t630;
  t5115 = -1.*t5078*t5103*t389;
  t5133 = -1.*t5124*t5103*t389;
  t5154 = t5004 + t5005 + t5056 + t5074 + t5115 + t5133;
  t5167 = t389*t5154;
  t5189 = t5078*t5103*t630;
  t5191 = t5124*t5103*t630;
  t5193 = t555*t3935*t749;
  t5195 = t657*t4199*t749;
  t5196 = t5185 + t5189 + t5191 + t5192 + t5193 + t5195;
  t5199 = t2394*t5196;
  t5201 = t4898 + t5001 + t5167 + t5199;
  t5629 = t5519*t5536;
  t5631 = -1.*t5453*t5558;
  t5636 = t5629 + t5631;
  t1018 = 0.242889*t77;
  t1290 = -1.*t77*t1289;
  t1571 = t1570*t350;
  t1586 = t1018 + t1290 + t1571;
  t1648 = -0.242889*t77;
  t1666 = t77*t1289;
  t1781 = t77*t1755;
  t1849 = -1.*t1570*t350;
  t2068 = t1937*t350;
  t2080 = t1648 + t1666 + t1781 + t1849 + t2068;
  t2138 = -1.*t77*t1937;
  t2202 = t1755*t350;
  t2255 = t2132 + t2138 + t2180 + t2197 + t2202;
  t2793 = t2132 + t2180 + t2197;
  t6066 = t5519*t5694;
  t6067 = t5453*t52*t4694;
  t6070 = t6066 + t6067;
  t5331 = -1.*t3850*t389;
  t5370 = t4772 + t5331;
  t5372 = -1.*t630*t5370;
  t5413 = t3850*t630;
  t5414 = t5413 + t4981;
  t5415 = -1.*t389*t5414;
  t5418 = -1.*t3850*t630;
  t5421 = -1.*t5103*t389;
  t5422 = t5418 + t5056 + t5074 + t5421;
  t5426 = -1.*t389*t5422;
  t5427 = t5103*t630;
  t5428 = t3850*t749;
  t5430 = t5185 + t5427 + t5192 + t5428;
  t5431 = -1.*t2394*t5430;
  t5432 = t5372 + t5415 + t5426 + t5431;
  t5257 = -0.11459*t389;
  t5259 = -0.081715*t749;
  t5266 = t5257 + t5259;
  t5281 = -0.081715*t630;
  t5282 = -0.11459*t2394;
  t5316 = t5281 + t5282;
  t5623 = 0.241*t2744*t5619;
  t5627 = 0.241*t880*t5619;
  t5647 = 0.241*t724*t5636;
  t5675 = 0.241*t724*t5674;
  t5677 = t5623 + t5627 + t5647 + t5675;
  t5537 = t5453*t5536;
  t5562 = t5519*t5558;
  t5563 = t5537 + t5562;
  t5569 = t5453*t5568;
  t5577 = t5519*t5574;
  t5578 = t5569 + t5577;
  t5706 = t5705*t5460;
  t5710 = t5074 + t5707 + t5709;
  t5713 = t5694*t5710;
  t5714 = t5706 + t5713;
  t5738 = t5720*t5460;
  t5744 = -1.*t4694*t5742;
  t5753 = t5744 + t5752;
  t5755 = t5753*t5536;
  t5757 = t5012*t2394;
  t5763 = t5742*t2615;
  t5765 = t5757 + t4981 + t5758 + t5761 + t5763 + t5764;
  t5767 = t5694*t5765;
  t5768 = t5738 + t5755 + t5767;
  t5722 = t5720*t5536;
  t5723 = t4759*t2394;
  t5724 = t5687*t2615;
  t5729 = t5723 + t5724 + t5728;
  t5730 = t5694*t5729;
  t5731 = t5722 + t5730;
  t5776 = t4694*t5742;
  t5779 = t5776 + t5777;
  t5780 = t5779*t5460;
  t5783 = t5705*t5568;
  t5788 = -1.*t4759*t630;
  t5789 = -1.*t5012*t389;
  t5790 = -1.*t5742*t679;
  t5793 = -1.*t5687*t851;
  t5797 = t5788 + t5789 + t5790 + t5792 + t5793 + t5794;
  t5798 = t5694*t5797;
  t5800 = t5780 + t5783 + t5798;
  t5805 = t4981 + t5758 + t5761;
  t5809 = t5460*t5805;
  t5810 = -1.*t5687*t2615;
  t5817 = t4772 + t5810 + t5812;
  t5819 = t5568*t5817;
  t5821 = -1.*t5742*t2615;
  t5824 = t5056 + t5074 + t5707 + t5709 + t5821 + t5822;
  t5825 = t5460*t5824;
  t5827 = t5742*t679;
  t5832 = t5687*t851;
  t5836 = t5185 + t5192 + t5827 + t5830 + t5832 + t5833;
  t5837 = t5536*t5836;
  t5838 = t5809 + t5819 + t5825 + t5837;
  t5873 = t5872*t724;
  t5879 = t5709 + t5874 + t5876;
  t5884 = t541*t4694*t5879;
  t5892 = t5873 + t5884;
  t5904 = t5899*t2744;
  t5908 = t5870*t2744;
  t5909 = t5852*t5558;
  t5912 = t5728 + t5908 + t5909;
  t5914 = t541*t4694*t5912;
  t5915 = t5904 + t5914;
  t5922 = t5899*t724;
  t5926 = t52*t4694*t5925;
  t5934 = -1.*t541*t4694*t5930;
  t5935 = t5752 + t5926 + t5934;
  t5939 = t5935*t2744;
  t5943 = t5930*t2744;
  t5944 = t5925*t5558;
  t5947 = t5761 + t5764 + t5940 + t5942 + t5943 + t5944;
  t5949 = t541*t4694*t5947;
  t5951 = t5922 + t5939 + t5949;
  t5953 = -1.*t52*t4694*t5925;
  t5954 = t541*t4694*t5930;
  t5955 = t5777 + t5953 + t5954;
  t5956 = t5955*t724;
  t5962 = t5872*t880;
  t5964 = -1.*t5930*t724;
  t5965 = -1.*t5925*t5526;
  t5973 = -1.*t5870*t880;
  t5976 = -1.*t5852*t5574;
  t5977 = t5792 + t5794 + t5964 + t5965 + t5973 + t5976;
  t5978 = t541*t4694*t5977;
  t5984 = t5956 + t5962 + t5978;
  t5989 = t5761 + t5940 + t5942;
  t5990 = t724*t5989;
  t5993 = -1.*t5870*t2744;
  t5994 = -1.*t5852*t5558;
  t5996 = t5812 + t5993 + t5994;
  t5997 = t880*t5996;
  t6005 = -1.*t5930*t2744;
  t6006 = -1.*t5925*t5558;
  t6007 = t5709 + t5822 + t5874 + t5876 + t6005 + t6006;
  t6010 = t724*t6007;
  t6013 = t5930*t724;
  t6018 = t5925*t5526;
  t6021 = t5870*t880;
  t6027 = t5852*t5574;
  t6029 = t5830 + t5833 + t6013 + t6018 + t6021 + t6027;
  t6030 = t2744*t6029;
  t6032 = t5990 + t5997 + t6010 + t6030;
  t6195 = t5453*t5694;
  t6196 = -1.*t5519*t52*t4694;
  t6199 = t6195 + t6196;
  t5529 = 0.241*t2744*t5528;
  t5532 = 0.241*t880*t5528;
  t5565 = 0.241*t724*t5563;
  t5581 = 0.241*t724*t5578;
  t5607 = t5529 + t5532 + t5565 + t5581;
  t6110 = 0.241*t5619*t5563;
  t6114 = 0.241*t5528*t5636;
  t6117 = 0.241*t5619*t5578;
  t6118 = 0.241*t5528*t5674;
  t6122 = t6110 + t6114 + t6117 + t6118;
  t5893 = 0.241*t724*t5892;
  t5921 = 0.241*t880*t5915;
  t5952 = 0.241*t724*t5951;
  t5988 = 0.241*t2744*t5984;
  t6035 = 0.241*t541*t4694*t6032;
  t6036 = t5893 + t5921 + t5952 + t5988 + t6035;
  t6270 = 0.241*t5528*t5892;
  t6271 = 0.241*t5578*t5915;
  t6274 = 0.241*t5528*t5951;
  t6275 = 0.241*t5563*t5984;
  t6278 = 0.241*t6199*t6032;
  t6281 = t6270 + t6271 + t6274 + t6275 + t6278;
  t6160 = 0.241*t5619*t5892;
  t6162 = 0.241*t5674*t5915;
  t6164 = 0.241*t5619*t5951;
  t6165 = 0.241*t5636*t5984;
  t6166 = 0.241*t6070*t6032;
  t6172 = t6160 + t6162 + t6164 + t6165 + t6166;
  t6342 = t2744*t5989;
  t6344 = t724*t5996;
  t6350 = t6342 + t6344;
  t5716 = 0.241*t724*t5714;
  t5733 = 0.241*t880*t5731;
  t5771 = 0.241*t724*t5768;
  t5803 = 0.241*t2744*t5800;
  t5839 = 0.241*t541*t4694*t5838;
  t5843 = t5716 + t5733 + t5771 + t5803 + t5839;
  t6251 = 0.241*t5528*t5714;
  t6252 = 0.241*t5528*t5768;
  t6253 = 0.241*t5731*t5578;
  t6255 = 0.241*t5563*t5800;
  t6257 = 0.241*t6199*t5838;
  t6266 = t6251 + t6252 + t6253 + t6255 + t6257;
  t6141 = 0.241*t5619*t5714;
  t6144 = 0.241*t5619*t5768;
  t6145 = 0.241*t5731*t5674;
  t6147 = 0.241*t5636*t5800;
  t6151 = 0.241*t6070*t5838;
  t6152 = t6141 + t6144 + t6145 + t6147 + t6151;
  t6417 = t5536*t5805;
  t6422 = t5460*t5817;
  t6423 = t6417 + t6422;
  t6364 = t389*t4882;
  t6366 = t2394*t5000;
  t6368 = t6364 + t6366;
  t6393 = -1.*t389*t5370;
  t6395 = -1.*t2394*t5414;
  t6396 = t6393 + t6395;
  t6404 = 0.241*t5800*t5892;
  t6405 = 0.241*t5838*t6350;
  t6407 = 0.241*t5768*t5915;
  t6412 = 0.241*t5731*t5951;
  t6416 = 0.241*t5714*t5984;
  t6427 = 0.241*t6423*t6032;
  t6428 = t6404 + t6405 + t6407 + t6412 + t6416 + t6427;
  t4217 = 0.241*t4212*t389*t724;
  t4402 = 0.241*t4232*t389*t724;
  t4503 = 0.241*t4232*t630*t2744;
  t4653 = 0.241*t4212*t2394*t880;
  t5226 = 0.241*t541*t4694*t5201;
  t5231 = t4217 + t4402 + t4503 + t4653 + t5226;
  t6202 = 0.241*t6199*t5201;
  t6203 = 0.241*t4212*t389*t5528;
  t6205 = 0.241*t4232*t389*t5528;
  t6206 = 0.241*t4232*t630*t5563;
  t6208 = 0.241*t4212*t2394*t5578;
  t6209 = t6202 + t6203 + t6205 + t6206 + t6208;
  t6071 = 0.241*t6070*t5201;
  t6072 = 0.241*t4212*t389*t5619;
  t6074 = 0.241*t4232*t389*t5619;
  t6079 = 0.241*t4232*t630*t5636;
  t6080 = 0.241*t4212*t2394*t5674;
  t6083 = t6071 + t6072 + t6074 + t6079 + t6080;
  t6478 = 0.241*t4232*t630*t5714;
  t6479 = 0.241*t5201*t6423;
  t6480 = 0.241*t4212*t389*t5731;
  t6486 = 0.241*t4212*t2394*t5768;
  t6487 = 0.241*t4232*t389*t5800;
  t6488 = 0.241*t6368*t5838;
  t6491 = t6478 + t6479 + t6480 + t6486 + t6487 + t6488;
  t6332 = 0.241*t4232*t630*t5892;
  t6351 = 0.241*t5201*t6350;
  t6352 = 0.241*t4212*t389*t5915;
  t6354 = 0.241*t4212*t2394*t5951;
  t6363 = 0.241*t4232*t389*t5984;
  t6376 = 0.241*t6368*t6032;
  t6377 = t6332 + t6351 + t6352 + t6354 + t6363 + t6376;
  t5254 = 0.007922875*t389*t724;
  t5278 = 0.241*t5266*t724;
  t5280 = 0.007922875*t630*t2744;
  t5326 = 0.241*t5316*t880;
  t5436 = 0.241*t541*t4694*t5432;
  t5442 = t5254 + t5278 + t5280 + t5326 + t5436;
  t6572 = 0.01584575*t4232*t630*t389;
  t6574 = 0.241*t4212*t389*t5316;
  t6579 = 0.241*t4212*t2394*t5266;
  t6585 = 0.241*t6396*t5201;
  t6586 = 0.241*t6368*t5432;
  t6589 = t6572 + t6574 + t6579 + t6585 + t6586;
  t6229 = 0.241*t6199*t5432;
  t6230 = 0.007922875*t389*t5528;
  t6231 = 0.241*t5266*t5528;
  t6233 = 0.007922875*t630*t5563;
  t6234 = 0.241*t5316*t5578;
  t6235 = t6229 + t6230 + t6231 + t6233 + t6234;
  t6093 = 0.241*t6070*t5432;
  t6097 = 0.007922875*t389*t5619;
  t6098 = 0.241*t5266*t5619;
  t6103 = 0.007922875*t630*t5636;
  t6104 = 0.241*t5316*t5674;
  t6105 = t6093 + t6097 + t6098 + t6103 + t6104;
  t6496 = 0.007922875*t630*t5714;
  t6500 = 0.241*t5432*t6423;
  t6502 = 0.241*t5266*t5731;
  t6503 = 0.241*t5316*t5768;
  t6504 = 0.007922875*t389*t5800;
  t6507 = 0.241*t6396*t5838;
  t6508 = t6496 + t6500 + t6502 + t6503 + t6504 + t6507;
  t6386 = 0.007922875*t630*t5892;
  t6389 = 0.241*t5432*t6350;
  t6390 = 0.241*t5266*t5915;
  t6391 = 0.241*t5316*t5951;
  t6392 = 0.007922875*t389*t5984;
  t6399 = 0.241*t6396*t6032;
  t6402 = t6386 + t6389 + t6390 + t6391 + t6392 + t6399;
  t6548 = 0.241*t4212*t389*t2793;
  t6549 = 0.241*t4232*t630*t1586;
  t6550 = 0.241*t4212*t2394*t2080;
  t6552 = 0.241*t4232*t389*t2255;
  t6553 = t6548 + t6549 + t6550 + t6552;
  t6646 = 0.007922875*t630*t1586;
  t6647 = 0.007922875*t389*t2255;
  t6648 = 0.241*t2080*t5316;
  t6656 = 0.241*t2793*t5266;
  t6657 = t6646 + t6647 + t6648 + t6656;
  t1617 = 0.241*t1586*t724;
  t2091 = 0.241*t2080*t724;
  t2751 = 0.241*t2255*t2744;
  t2967 = 0.241*t2793*t880;
  t3079 = t1617 + t2091 + t2751 + t2967;
  t6212 = 0.241*t1586*t5528;
  t6218 = 0.241*t2080*t5528;
  t6221 = 0.241*t2255*t5563;
  t6224 = 0.241*t2793*t5578;
  t6225 = t6212 + t6218 + t6221 + t6224;
  t6086 = 0.241*t1586*t5619;
  t6087 = 0.241*t2080*t5619;
  t6088 = 0.241*t2255*t5636;
  t6089 = 0.241*t2793*t5674;
  t6091 = t6086 + t6087 + t6088 + t6089;
  t6459 = 0.241*t2255*t5714;
  t6461 = 0.241*t2080*t5731;
  t6464 = 0.241*t2793*t5768;
  t6466 = 0.241*t1586*t5800;
  t6467 = t6459 + t6461 + t6464 + t6466;
  t6307 = 0.241*t2255*t5892;
  t6309 = 0.241*t2080*t5915;
  t6312 = 0.241*t2793*t5951;
  t6314 = 0.241*t1586*t5984;
  t6319 = t6307 + t6309 + t6312 + t6314;
  t6533 = 0.00482*t4232*t630;
  t6537 = -0.03856*t4212*t389;
  t6538 = t6533 + t6537;
  t6688 = -0.03856*t2080;
  t6690 = 0.00482*t2255;
  t6691 = t6688 + t6690;
  t6624 = 0.0001584575*t630;
  t6625 = -0.03856*t5266;
  t6627 = t6624 + t6625;
  t732 = 0.00482*t724;
  t959 = -0.03856*t880;
  t987 = t732 + t959;
  t6182 = 0.00482*t5528;
  t6185 = -0.03856*t5578;
  t6186 = t6182 + t6185;
  t6057 = 0.00482*t5619;
  t6058 = -0.03856*t5674;
  t6061 = t6057 + t6058;
  t6451 = -0.03856*t5768;
  t6452 = 0.00482*t5800;
  t6455 = t6451 + t6452;
  t6295 = -0.03856*t5951;
  t6298 = 0.00482*t5984;
  t6300 = t6295 + t6298;
  p_output1[0]=var2[8]*(-0.5*(0.482*t2744*t724 + 0.482*t724*t880)*var2[0] - 0.5*t5677*var2[1] - 0.5*t5607*var2[2] - 0.5*t6036*var2[3] - 0.5*t5843*var2[4] - 0.5*t5231*var2[5] - 0.5*t5442*var2[6] - 0.5*t3079*var2[7] - 0.5*t987*var2[8]);
  p_output1[1]=var2[8]*(-0.5*t5677*var2[0] - 0.5*(0.482*t5619*t5636 + 0.482*t5619*t5674)*var2[1] - 0.5*t6122*var2[2] - 0.5*t6172*var2[3] - 0.5*t6152*var2[4] - 0.5*t6083*var2[5] - 0.5*t6105*var2[6] - 0.5*t6091*var2[7] - 0.5*t6061*var2[8]);
  p_output1[2]=var2[8]*(-0.5*t5607*var2[0] - 0.5*t6122*var2[1] - 0.5*(0.482*t5528*t5563 + 0.482*t5528*t5578)*var2[2] - 0.5*t6281*var2[3] - 0.5*t6266*var2[4] - 0.5*t6209*var2[5] - 0.5*t6235*var2[6] - 0.5*t6225*var2[7] - 0.5*t6186*var2[8]);
  p_output1[3]=var2[8]*(-0.5*t6036*var2[0] - 0.5*t6172*var2[1] - 0.5*t6281*var2[2] - 0.5*(0.482*t5915*t5951 + 0.482*t5892*t5984 + 0.482*t6032*t6350)*var2[3] - 0.5*t6428*var2[4] - 0.5*t6377*var2[5] - 0.5*t6402*var2[6] - 0.5*t6319*var2[7] - 0.5*t6300*var2[8]);
  p_output1[4]=var2[8]*(-0.5*t5843*var2[0] - 0.5*t6152*var2[1] - 0.5*t6266*var2[2] - 0.5*t6428*var2[3] - 0.5*(0.482*t5731*t5768 + 0.482*t5714*t5800 + 0.482*t5838*t6423)*var2[4] - 0.5*t6491*var2[5] - 0.5*t6508*var2[6] - 0.5*t6467*var2[7] - 0.5*t6455*var2[8]);
  p_output1[5]=var2[8]*(-0.5*t5231*var2[0] - 0.5*t6083*var2[1] - 0.5*t6209*var2[2] - 0.5*t6377*var2[3] - 0.5*t6491*var2[4] - 0.5*(0.482*t2394*t389*Power(t4212,2) + 0.482*t389*Power(t4232,2)*t630 + 0.482*t5201*t6368)*var2[5] - 0.5*t6589*var2[6] - 0.5*t6553*var2[7] - 0.5*t6538*var2[8]);
  p_output1[6]=var2[8]*(-0.5*t5442*var2[0] - 0.5*t6105*var2[1] - 0.5*t6235*var2[2] - 0.5*t6402*var2[3] - 0.5*t6508*var2[4] - 0.5*t6589*var2[5] - 0.5*(0.482*t5266*t5316 + 0.00052092903125*t389*t630 + 0.482*t5432*t6396)*var2[6] - 0.5*t6657*var2[7] - 0.5*t6627*var2[8]);
  p_output1[7]=var2[8]*(-0.5*t3079*var2[0] - 0.5*t6091*var2[1] - 0.5*t6225*var2[2] - 0.5*t6319*var2[3] - 0.5*t6467*var2[4] - 0.5*t6553*var2[5] - 0.5*t6657*var2[6] - 0.5*(0.482*t1586*t2255 + 0.482*t2080*t2793)*var2[7] - 0.5*t6691*var2[8]);
  p_output1[8]=(-0.5*t987*var2[0] - 0.5*t6061*var2[1] - 0.5*t6186*var2[2] - 0.5*t6300*var2[3] - 0.5*t6455*var2[4] - 0.5*t6538*var2[5] - 0.5*t6627*var2[6] - 0.5*t6691*var2[7])*var2[8];
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec9_plane.hh"

namespace SymFunction
{

void Ce2_vec9_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
