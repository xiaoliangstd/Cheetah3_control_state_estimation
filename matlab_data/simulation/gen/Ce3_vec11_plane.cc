/*
 * Automatically Generated from Mathematica.
 * Fri 21 Dec 2018 15:12:04 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t801;
  double t831;
  double t856;
  double t693;
  double t896;
  double t541;
  double t1839;
  double t1728;
  double t1828;
  double t1976;
  double t4197;
  double t4634;
  double t4213;
  double t4230;
  double t5133;
  double t5156;
  double t5196;
  double t4920;
  double t4942;
  double t4994;
  double t5001;
  double t4446;
  double t4487;
  double t4642;
  double t4813;
  double t5334;
  double t5346;
  double t5373;
  double t850;
  double t1154;
  double t1494;
  double t1933;
  double t2077;
  double t2080;
  double t2094;
  double t2430;
  double t2630;
  double t3161;
  double t3166;
  double t3258;
  double t3321;
  double t3412;
  double t3415;
  double t3423;
  double t3725;
  double t3856;
  double t4845;
  double t4851;
  double t5009;
  double t5046;
  double t5262;
  double t5306;
  double t5310;
  double t5380;
  double t5383;
  double t5388;
  double t5392;
  double t5406;
  double t5425;
  double t5440;
  double t5447;
  double t5456;
  double t5458;
  double t5475;
  double t5484;
  double t5506;
  double t5513;
  double t5532;
  double t5539;
  double t5547;
  double t5553;
  double t5554;
  double t5576;
  double t5588;
  double t5597;
  double t5970;
  double t5987;
  double t5991;
  double t5996;
  double t6003;
  double t6004;
  double t6039;
  double t6064;
  double t6066;
  double t6074;
  double t6083;
  double t6085;
  double t6720;
  double t6760;
  double t6812;
  double t6590;
  double t6601;
  double t6602;
  double t6628;
  double t6658;
  double t6661;
  double t6676;
  double t6678;
  double t6710;
  double t6713;
  double t6716;
  double t6718;
  double t6719;
  double t6831;
  double t6835;
  double t6837;
  double t6838;
  double t6839;
  double t6840;
  double t6844;
  double t6845;
  double t6940;
  double t6944;
  double t6948;
  double t6711;
  double t6922;
  double t6929;
  double t7098;
  double t7099;
  double t7102;
  double t6376;
  double t6411;
  double t6468;
  double t7025;
  double t7046;
  double t7089;
  double t6967;
  double t7017;
  double t7023;
  double t7166;
  double t7190;
  double t7208;
  double t7438;
  double t7439;
  double t7440;
  double t7447;
  double t7420;
  double t7422;
  double t7428;
  double t7436;
  double t7448;
  double t7457;
  double t7458;
  double t7462;
  double t7465;
  double t7471;
  double t7476;
  double t7485;
  double t7507;
  double t7510;
  double t7511;
  double t7551;
  double t7555;
  double t7556;
  double t7411;
  double t7414;
  double t7417;
  double t7429;
  double t7486;
  double t7493;
  double t7530;
  double t7531;
  double t7541;
  double t7609;
  double t7610;
  double t7611;
  double t7675;
  double t7676;
  double t7677;
  double t7681;
  double t7682;
  double t7683;
  double t7691;
  double t7692;
  double t7698;
  double t7701;
  double t7703;
  double t7705;
  double t7096;
  double t7786;
  double t7787;
  double t7788;
  double t7134;
  double t7216;
  double t7795;
  double t7796;
  double t7797;
  double t7255;
  double t7546;
  double t7589;
  double t7871;
  double t7872;
  double t7874;
  double t7621;
  double t7641;
  double t7799;
  double t7809;
  double t7097;
  double t7103;
  double t7116;
  double t7783;
  double t7790;
  double t7149;
  double t7150;
  double t7151;
  double t7829;
  double t7960;
  double t7967;
  double t7832;
  double t7217;
  double t7224;
  double t7225;
  double t7837;
  double t7839;
  double t7262;
  double t7265;
  double t7269;
  double t7870;
  double t7877;
  double t7547;
  double t7557;
  double t7558;
  double t7889;
  double t7891;
  double t7591;
  double t7593;
  double t7594;
  double t7915;
  double t7919;
  double t7622;
  double t7626;
  double t7628;
  double t7944;
  double t7946;
  double t7650;
  double t7651;
  double t7652;
  double t8082;
  double t8083;
  double t8084;
  double t8106;
  double t8108;
  double t8145;
  double t8149;
  double t8151;
  double t8176;
  double t8180;
  double t7678;
  double t7685;
  double t7699;
  double t7706;
  double t7712;
  double t7713;
  double t7714;
  double t7715;
  double t7720;
  double t7721;
  double t7722;
  double t7723;
  double t7726;
  double t7727;
  double t7729;
  double t7730;
  double t7734;
  double t7735;
  double t7743;
  double t7745;
  double t7746;
  double t7748;
  double t7751;
  double t7752;
  double t7754;
  double t7755;
  double t7756;
  double t7757;
  double t7758;
  double t7759;
  double t7760;
  double t7761;
  double t7763;
  double t7767;
  double t7768;
  double t7771;
  double t7772;
  double t7774;
  double t7775;
  double t7776;
  double t7777;
  double t7778;
  double t7780;
  double t7781;
  double t7782;
  double t7784;
  double t8247;
  double t8248;
  double t8249;
  double t7798;
  double t8257;
  double t8259;
  double t8268;
  double t7817;
  double t7818;
  double t7819;
  double t7820;
  double t7823;
  double t7825;
  double t7826;
  double t7827;
  double t7838;
  double t7843;
  double t7844;
  double t7845;
  double t7846;
  double t7862;
  double t7866;
  double t7868;
  double t7869;
  double t7881;
  double t7883;
  double t7884;
  double t7887;
  double t8402;
  double t8403;
  double t8404;
  double t8393;
  double t8395;
  double t8396;
  double t7893;
  double t7908;
  double t7910;
  double t7912;
  double t7914;
  double t7929;
  double t7930;
  double t7932;
  double t7936;
  double t7947;
  double t8308;
  double t7969;
  double t7970;
  double t7977;
  double t8250;
  double t7982;
  double t7983;
  double t7988;
  double t8337;
  double t7995;
  double t7996;
  double t8003;
  double t8374;
  double t8004;
  double t8006;
  double t8014;
  double t8397;
  double t8027;
  double t8028;
  double t8031;
  double t8448;
  double t8032;
  double t8033;
  double t8043;
  double t8469;
  double t8049;
  double t8051;
  double t8062;
  double t8479;
  double t8063;
  double t8067;
  double t8072;
  double t8689;
  double t8691;
  double t8692;
  double t8701;
  double t8702;
  double t8713;
  double t8733;
  double t8737;
  double t8739;
  double t8747;
  double t8748;
  double t8749;
  double t5752;
  double t5761;
  double t5771;
  double t5774;
  double t5780;
  double t5793;
  double t8763;
  double t8765;
  double t8766;
  double t8774;
  double t8782;
  double t8783;
  double t8860;
  double t8864;
  double t8865;
  double t8868;
  double t8871;
  double t8875;
  double t8877;
  double t8878;
  double t8953;
  double t8954;
  double t8956;
  double t8958;
  double t8959;
  double t8972;
  double t8974;
  double t8976;
  double t8979;
  double t8980;
  double t8879;
  double t8894;
  double t8896;
  double t9086;
  double t9091;
  double t9095;
  double t9107;
  double t9108;
  double t9110;
  double t8724;
  double t8725;
  double t8915;
  double t8923;
  double t8943;
  double t8981;
  double t8987;
  double t8990;
  double t9187;
  double t9188;
  double t9189;
  double t9192;
  double t9193;
  double t9194;
  double t8730;
  double t8740;
  double t8741;
  double t9035;
  double t9055;
  double t9061;
  double t9272;
  double t9274;
  double t9263;
  double t9265;
  double t9267;
  double t8666;
  double t8668;
  double t8670;
  double t8672;
  double t8678;
  double t8679;
  double t8680;
  double t8682;
  double t9261;
  double t9262;
  double t9269;
  double t9270;
  double t9276;
  double t9278;
  double t9281;
  double t9282;
  double t9284;
  double t8687;
  double t8688;
  double t8694;
  double t8695;
  double t8698;
  double t8729;
  double t8742;
  double t8758;
  double t8759;
  double t8761;
  double t8762;
  double t8770;
  double t8808;
  double t8825;
  double t8833;
  double t8842;
  double t5807;
  double t5808;
  double t5824;
  double t8845;
  double t8849;
  double t8850;
  double t8852;
  double t8948;
  double t9372;
  double t9373;
  double t9374;
  double t8985;
  double t8986;
  double t9375;
  double t9377;
  double t9384;
  double t9392;
  double t9404;
  double t9410;
  double t9019;
  double t9042;
  double t9435;
  double t9437;
  double t9441;
  double t9056;
  double t9186;
  double t9416;
  double t9453;
  double t9207;
  double t9210;
  double t9536;
  double t9537;
  double t9541;
  double t9545;
  double t9548;
  double t9551;
  double t9225;
  double t9477;
  double t9501;
  double t9237;
  double t9241;
  t801 = Cos(var1[10]);
  t831 = Cos(var1[5]);
  t856 = Sin(var1[9]);
  t693 = Cos(var1[9]);
  t896 = Sin(var1[5]);
  t541 = Sin(var1[3]);
  t1839 = Sin(var1[10]);
  t1728 = Cos(var1[3]);
  t1828 = Cos(var1[4]);
  t1976 = Sin(var1[4]);
  t4197 = Cos(var1[11]);
  t4634 = Sin(var1[11]);
  t4213 = -1.*t4197;
  t4230 = 1. + t4213;
  t5133 = -1.*t4197*t1839;
  t5156 = -1.*t801*t4634;
  t5196 = t5133 + t5156;
  t4920 = 0.100689*t4230;
  t4942 = 0.080689*t4197;
  t4994 = -0.16*t4634;
  t5001 = t4920 + t4942 + t4994;
  t4446 = -0.20833*t4230;
  t4487 = -0.36833*t4197;
  t4642 = 0.02*t4634;
  t4813 = t4446 + t4487 + t4642;
  t5334 = t801*t4197;
  t5346 = -1.*t1839*t4634;
  t5373 = t5334 + t5346;
  t850 = t693*t801*t831;
  t1154 = -1.*t801*t856*t896;
  t1494 = t850 + t1154;
  t1933 = t1828*t1839;
  t2077 = -1.*t801*t831*t856;
  t2080 = -1.*t693*t801*t896;
  t2094 = t2077 + t2080;
  t2430 = -1.*t1976*t2094;
  t2630 = t1933 + t2430;
  t3161 = -1.*t693*t831*t1839;
  t3166 = t856*t1839*t896;
  t3258 = t3161 + t3166;
  t3321 = t801*t1828;
  t3412 = t831*t856*t1839;
  t3415 = t693*t1839*t896;
  t3423 = t3412 + t3415;
  t3725 = -1.*t1976*t3423;
  t3856 = t3321 + t3725;
  t4845 = t4197*t4813;
  t4851 = -0.242889*t4634;
  t5009 = t5001*t4634;
  t5046 = t4845 + t4851 + t5009;
  t5262 = t693*t831*t5196;
  t5306 = -1.*t856*t5196*t896;
  t5310 = t5262 + t5306;
  t5380 = t1828*t5373;
  t5383 = -1.*t831*t856*t5196;
  t5388 = -1.*t693*t5196*t896;
  t5392 = t5383 + t5388;
  t5406 = -1.*t1976*t5392;
  t5425 = t5380 + t5406;
  t5440 = 0.242889*t4197;
  t5447 = -1.*t4197*t5001;
  t5456 = t4813*t4634;
  t5458 = t5440 + t5447 + t5456;
  t5475 = t693*t831*t5373;
  t5484 = -1.*t856*t5373*t896;
  t5506 = t5475 + t5484;
  t5513 = t4197*t1839;
  t5532 = t801*t4634;
  t5539 = t5513 + t5532;
  t5547 = t1828*t5539;
  t5553 = -1.*t831*t856*t5373;
  t5554 = -1.*t693*t5373*t896;
  t5576 = t5553 + t5554;
  t5588 = -1.*t1976*t5576;
  t5597 = t5547 + t5588;
  t5970 = -1.*t1839*t1976;
  t5987 = -1.*t1828*t2094;
  t5991 = t5970 + t5987;
  t5996 = -1.*t801*t1976;
  t6003 = -1.*t1828*t3423;
  t6004 = t5996 + t6003;
  t6039 = -1.*t5373*t1976;
  t6064 = -1.*t1828*t5392;
  t6066 = t6039 + t6064;
  t6074 = -1.*t5539*t1976;
  t6083 = -1.*t1828*t5576;
  t6085 = t6074 + t6083;
  t6720 = -0.04*t801;
  t6760 = 0.04*t1839;
  t6812 = t6720 + t6760;
  t6590 = t693*t831;
  t6601 = -1.*t856*t896;
  t6602 = t6590 + t6601;
  t6628 = -1.*t801;
  t6658 = 1. + t6628;
  t6661 = 0.242889*t6658;
  t6676 = 0.202889*t801;
  t6678 = -0.04*t1839;
  t6710 = t6661 + t6676 + t6678;
  t6713 = -1.*t693;
  t6716 = 1. + t6713;
  t6718 = 0.081715*t6716;
  t6719 = 0.13757*t693;
  t6831 = -1.*t856*t6812;
  t6835 = t6718 + t6719 + t6831;
  t6837 = t831*t6835;
  t6838 = 0.055855*t856;
  t6839 = t693*t6812;
  t6840 = t6838 + t6839;
  t6844 = -1.*t6840*t896;
  t6845 = t6837 + t6844;
  t6940 = t6710*t1976;
  t6944 = t1828*t6845;
  t6948 = t6940 + t6944;
  t6711 = -1.*t6710*t1976;
  t6922 = -1.*t1828*t6845;
  t6929 = t6711 + t6922;
  t7098 = t1828*t6710;
  t7099 = -1.*t1976*t6845;
  t7102 = t7098 + t7099;
  t6376 = t1839*t1976;
  t6411 = t1828*t2094;
  t6468 = t6376 + t6411;
  t7025 = t831*t6840;
  t7046 = t6835*t896;
  t7089 = t7025 + t7046;
  t6967 = t831*t856;
  t7017 = t693*t896;
  t7023 = t6967 + t7017;
  t7166 = t801*t1976;
  t7190 = t1828*t3423;
  t7208 = t7166 + t7190;
  t7438 = 0.242889*t1839;
  t7439 = -1.*t1839*t5001;
  t7440 = t801*t4813;
  t7447 = t7438 + t7439 + t7440;
  t7420 = t801*t5001;
  t7422 = t1839*t4813;
  t7428 = t6661 + t7420 + t7422;
  t7436 = 0.11688*t693;
  t7448 = -1.*t856*t7447;
  t7457 = t6718 + t7436 + t7448;
  t7458 = t831*t7457;
  t7462 = 0.035165*t856;
  t7465 = t693*t7447;
  t7471 = t7462 + t7465;
  t7476 = -1.*t7471*t896;
  t7485 = t7458 + t7476;
  t7507 = t7428*t1976;
  t7510 = t1828*t7485;
  t7511 = t7507 + t7510;
  t7551 = t1828*t7428;
  t7555 = -1.*t1976*t7485;
  t7556 = t7551 + t7555;
  t7411 = t5373*t1976;
  t7414 = t1828*t5392;
  t7417 = t7411 + t7414;
  t7429 = -1.*t7428*t1976;
  t7486 = -1.*t1828*t7485;
  t7493 = t7429 + t7486;
  t7530 = t831*t7471;
  t7531 = t7457*t896;
  t7541 = t7530 + t7531;
  t7609 = t5539*t1976;
  t7610 = t1828*t5576;
  t7611 = t7609 + t7610;
  t7675 = -1.*t693*t801*t831;
  t7676 = t801*t856*t896;
  t7677 = t7675 + t7676;
  t7681 = t693*t831*t1839;
  t7682 = -1.*t856*t1839*t896;
  t7683 = t7681 + t7682;
  t7691 = -1.*t693*t831*t5196;
  t7692 = t856*t5196*t896;
  t7698 = t7691 + t7692;
  t7701 = -1.*t693*t831*t5373;
  t7703 = t856*t5373*t896;
  t7705 = t7701 + t7703;
  t7096 = -1.*t7023*t7089;
  t7786 = -1.*t831*t6840;
  t7787 = -1.*t6835*t896;
  t7788 = t7786 + t7787;
  t7134 = t1494*t7089;
  t7216 = t7023*t7089;
  t7795 = -1.*t831*t856;
  t7796 = -1.*t693*t896;
  t7797 = t7795 + t7796;
  t7255 = -1.*t7089*t3258;
  t7546 = t7023*t7541;
  t7589 = -1.*t7541*t5310;
  t7871 = -1.*t831*t7471;
  t7872 = -1.*t7457*t896;
  t7874 = t7871 + t7872;
  t7621 = -1.*t7023*t7541;
  t7641 = t7541*t5506;
  t7799 = -1.*t7023*t6845;
  t7809 = -1.*t6602*t7089;
  t7097 = -1.*t1828*t6602*t6948;
  t7103 = t1976*t6602*t7102;
  t7116 = t7096 + t7097 + t7103;
  t7783 = t1494*t6845;
  t7790 = t2094*t7089;
  t7149 = t6468*t6948;
  t7150 = t2630*t7102;
  t7151 = t7134 + t7149 + t7150;
  t7829 = t7023*t6845;
  t7960 = Power(t1828,2);
  t7967 = Power(t1976,2);
  t7832 = t6602*t7089;
  t7217 = t1828*t6602*t6948;
  t7224 = -1.*t1976*t6602*t7102;
  t7225 = t7216 + t7217 + t7224;
  t7837 = -1.*t7089*t3423;
  t7839 = -1.*t6845*t3258;
  t7262 = -1.*t6948*t7208;
  t7265 = -1.*t7102*t3856;
  t7269 = t7255 + t7262 + t7265;
  t7870 = t7023*t7485;
  t7877 = t6602*t7541;
  t7547 = t1828*t6602*t7511;
  t7557 = -1.*t1976*t6602*t7556;
  t7558 = t7546 + t7547 + t7557;
  t7889 = -1.*t7541*t5392;
  t7891 = -1.*t7485*t5310;
  t7591 = -1.*t7511*t7417;
  t7593 = -1.*t7556*t5425;
  t7594 = t7589 + t7591 + t7593;
  t7915 = -1.*t7023*t7485;
  t7919 = -1.*t6602*t7541;
  t7622 = -1.*t1828*t6602*t7511;
  t7626 = t1976*t6602*t7556;
  t7628 = t7621 + t7622 + t7626;
  t7944 = t7541*t5576;
  t7946 = t7485*t5506;
  t7650 = t7511*t7611;
  t7651 = t7556*t5597;
  t7652 = t7641 + t7650 + t7651;
  t8082 = -0.055855*t856;
  t8083 = -1.*t693*t6812;
  t8084 = t8082 + t8083;
  t8106 = 0.055855*t693;
  t8108 = t8106 + t6831;
  t8145 = -0.035165*t856;
  t8149 = -1.*t693*t7447;
  t8151 = t8145 + t8149;
  t8176 = 0.035165*t693;
  t8180 = t8176 + t7448;
  t7678 = -0.06108*t1828*t7677;
  t7685 = 0.06108*t1828*t7683;
  t7699 = -0.241*t1828*t5046*t7698;
  t7706 = -0.241*t1828*t5458*t7705;
  t7712 = t7678 + t7685 + t7699 + t7706;
  t7713 = -0.5*var2[0]*t7712;
  t7714 = t541*t2094;
  t7715 = -1.*t1728*t1976*t7677;
  t7720 = t7714 + t7715;
  t7721 = -0.06108*t7720;
  t7722 = t541*t3423;
  t7723 = -1.*t1728*t1976*t7683;
  t7726 = t7722 + t7723;
  t7727 = 0.06108*t7726;
  t7729 = t541*t5392;
  t7730 = -1.*t1728*t1976*t7698;
  t7734 = t7729 + t7730;
  t7735 = -0.241*t5046*t7734;
  t7743 = t541*t5576;
  t7745 = -1.*t1728*t1976*t7705;
  t7746 = t7743 + t7745;
  t7748 = -0.241*t5458*t7746;
  t7751 = t7721 + t7727 + t7735 + t7748;
  t7752 = -0.5*var2[2]*t7751;
  t7754 = t1728*t2094;
  t7755 = t541*t1976*t7677;
  t7756 = t7754 + t7755;
  t7757 = -0.06108*t7756;
  t7758 = t1728*t3423;
  t7759 = t541*t1976*t7683;
  t7760 = t7758 + t7759;
  t7761 = 0.06108*t7760;
  t7763 = t1728*t5392;
  t7767 = t541*t1976*t7698;
  t7768 = t7763 + t7767;
  t7771 = -0.241*t5046*t7768;
  t7772 = t1728*t5576;
  t7774 = t541*t1976*t7705;
  t7775 = t7772 + t7774;
  t7776 = -0.241*t5458*t7775;
  t7777 = t7757 + t7761 + t7771 + t7776;
  t7778 = -0.5*var2[1]*t7777;
  t7780 = -1.*t6602*t6845;
  t7781 = t7780 + t7096;
  t7782 = t2094*t7781;
  t7784 = t7677*t6845;
  t8247 = t831*t8108;
  t8248 = t8084*t896;
  t8249 = t8247 + t8248;
  t7798 = -1.*t7797*t6845;
  t8257 = t831*t8084;
  t8259 = -1.*t8108*t896;
  t8268 = t8257 + t8259;
  t7817 = t6710*t1839;
  t7818 = t2094*t6845;
  t7819 = t7817 + t7818 + t7134;
  t7820 = t6602*t7819;
  t7823 = t6602*t6845;
  t7825 = t7823 + t7216;
  t7826 = t3423*t7825;
  t7827 = t7797*t6845;
  t7838 = -1.*t6845*t7683;
  t7843 = -1.*t801*t6710;
  t7844 = -1.*t6845*t3423;
  t7845 = t7843 + t7844 + t7255;
  t7846 = t6602*t7845;
  t7862 = t6602*t7485;
  t7866 = t7862 + t7546;
  t7868 = t5392*t7866;
  t7869 = t7797*t7485;
  t7881 = -1.*t7428*t5373;
  t7883 = -1.*t7485*t5392;
  t7884 = t7881 + t7883 + t7589;
  t7887 = t6602*t7884;
  t8402 = t831*t8151;
  t8403 = -1.*t8180*t896;
  t8404 = t8402 + t8403;
  t8393 = t831*t8180;
  t8395 = t8151*t896;
  t8396 = t8393 + t8395;
  t7893 = -1.*t7485*t7698;
  t7908 = -1.*t6602*t7485;
  t7910 = t7908 + t7621;
  t7912 = t5576*t7910;
  t7914 = -1.*t7797*t7485;
  t7929 = t7428*t5539;
  t7930 = t7485*t5576;
  t7932 = t7929 + t7930 + t7641;
  t7936 = t6602*t7932;
  t7947 = t7485*t7705;
  t8308 = -1.*t7023*t8249;
  t7969 = -1.*t1828*t7797*t6948;
  t7970 = t1976*t7797*t7102;
  t7977 = t1828*t7677*t7116;
  t8250 = t1494*t8249;
  t7982 = t1828*t7677*t6948;
  t7983 = -1.*t1976*t7677*t7102;
  t7988 = t1828*t7797*t7151;
  t8337 = t7023*t8249;
  t7995 = t1828*t7797*t6948;
  t7996 = -1.*t1976*t7797*t7102;
  t8003 = t1828*t7683*t7225;
  t8374 = -1.*t8249*t3258;
  t8004 = -1.*t1828*t7683*t6948;
  t8006 = t1976*t7683*t7102;
  t8014 = t1828*t7797*t7269;
  t8397 = t7023*t8396;
  t8027 = t1828*t7797*t7511;
  t8028 = -1.*t1976*t7797*t7556;
  t8031 = t1828*t7698*t7558;
  t8448 = -1.*t8396*t5310;
  t8032 = -1.*t1828*t7698*t7511;
  t8033 = t1976*t7698*t7556;
  t8043 = t1828*t7797*t7594;
  t8469 = -1.*t7023*t8396;
  t8049 = -1.*t1828*t7797*t7511;
  t8051 = t1976*t7797*t7556;
  t8062 = t1828*t7705*t7628;
  t8479 = t8396*t5506;
  t8063 = t1828*t7705*t7511;
  t8067 = -1.*t1976*t7705*t7556;
  t8072 = t1828*t7797*t7652;
  t8689 = -1.*t801*t4197;
  t8691 = t1839*t4634;
  t8692 = t8689 + t8691;
  t8701 = t801*t831*t856;
  t8702 = t693*t801*t896;
  t8713 = t8701 + t8702;
  t8733 = -1.*t831*t856*t8692;
  t8737 = -1.*t693*t8692*t896;
  t8739 = t8733 + t8737;
  t8747 = -1.*t1828*t1839;
  t8748 = -1.*t1976*t8713;
  t8749 = t8747 + t8748;
  t5752 = t1728*t3258;
  t5761 = -1.*t541*t3856;
  t5771 = t5752 + t5761;
  t5774 = t1728*t5310;
  t5780 = -1.*t541*t5425;
  t5793 = t5774 + t5780;
  t8763 = t693*t831*t8692;
  t8765 = -1.*t856*t8692*t896;
  t8766 = t8763 + t8765;
  t8774 = t1828*t5196;
  t8782 = -1.*t1976*t8739;
  t8783 = t8774 + t8782;
  t8860 = 0.04*t801;
  t8864 = t8860 + t6760;
  t8865 = -1.*t831*t856*t8864;
  t8868 = -1.*t693*t8864*t896;
  t8871 = t8865 + t8868;
  t8875 = t693*t831*t8864;
  t8877 = -1.*t856*t8864*t896;
  t8878 = t8875 + t8877;
  t8953 = 0.242889*t801;
  t8954 = -1.*t801*t5001;
  t8956 = -1.*t1839*t4813;
  t8958 = t8953 + t8954 + t8956;
  t8959 = -1.*t831*t856*t8958;
  t8972 = -1.*t693*t8958*t896;
  t8974 = t8959 + t8972;
  t8976 = t693*t831*t8958;
  t8979 = -1.*t856*t8958*t896;
  t8980 = t8976 + t8979;
  t8879 = -1.*t7023*t8878;
  t8894 = t1494*t8878;
  t8896 = t7089*t3258;
  t9086 = t6812*t1976;
  t9091 = t1828*t8871;
  t9095 = t9086 + t9091;
  t9107 = t1828*t6812;
  t9108 = -1.*t1976*t8871;
  t9110 = t9107 + t9108;
  t8724 = t1828*t8713;
  t8725 = t5970 + t8724;
  t8915 = t7023*t8878;
  t8923 = -1.*t7677*t7089;
  t8943 = -1.*t8878*t3258;
  t8981 = -1.*t7023*t8980;
  t8987 = t7541*t5310;
  t8990 = t8980*t5506;
  t9187 = t7447*t1976;
  t9188 = t1828*t8974;
  t9189 = t9187 + t9188;
  t9192 = t1828*t7447;
  t9193 = -1.*t1976*t8974;
  t9194 = t9192 + t9193;
  t8730 = t5196*t1976;
  t8740 = t1828*t8739;
  t8741 = t8730 + t8740;
  t9035 = t7023*t8980;
  t9055 = -1.*t8980*t5310;
  t9061 = -1.*t7541*t8766;
  t9272 = -0.16*t4197;
  t9274 = t9272 + t4642;
  t9263 = 0.02*t4197;
  t9265 = 0.16*t4634;
  t9267 = t9263 + t9265;
  t8666 = -1.*t856*t7471;
  t8668 = -1.*t693*t7457;
  t8670 = t8666 + t8668;
  t8672 = -0.241*t8670*t5373*t5046;
  t8678 = t856*t7471;
  t8679 = t693*t7457;
  t8680 = t8678 + t8679;
  t8682 = -0.241*t8680*t5196*t5458;
  t9261 = -0.242889*t4197;
  t9262 = t4197*t5001;
  t9269 = t4197*t9267;
  t9270 = -1.*t4813*t4634;
  t9276 = t9274*t4634;
  t9278 = t9261 + t9262 + t9269 + t9270 + t9276;
  t9281 = -1.*t4197*t9274;
  t9282 = t9267*t4634;
  t9284 = t4845 + t9281 + t4851 + t5009 + t9282;
  t8687 = -0.008474765*t5196*t5458;
  t8688 = -0.11688*t5373;
  t8694 = -0.081715*t8692;
  t8695 = t8688 + t8694;
  t8698 = -0.241*t5046*t8695;
  t8729 = -0.241*t5458*t7417;
  t8742 = -0.241*t5046*t8741;
  t8758 = t541*t5310;
  t8759 = t1728*t5425;
  t8761 = t8758 + t8759;
  t8762 = -0.241*t5458*t8761;
  t8770 = t541*t8766;
  t8808 = t1728*t8783;
  t8825 = t8770 + t8808;
  t8833 = -0.241*t5046*t8825;
  t8842 = -0.241*t5458*t5793;
  t5807 = t1728*t5506;
  t5808 = -1.*t541*t5597;
  t5824 = t5807 + t5808;
  t8845 = t1728*t8766;
  t8849 = -1.*t541*t8783;
  t8850 = t8845 + t8849;
  t8852 = -0.241*t5046*t8850;
  t8948 = t5310*t7910;
  t9372 = -1.*t1839*t9274;
  t9373 = t801*t9267;
  t9374 = t9372 + t9373;
  t8985 = t7428*t5373;
  t8986 = t7485*t5392;
  t9375 = -1.*t831*t856*t9374;
  t9377 = -1.*t693*t9374*t896;
  t9384 = t9375 + t9377;
  t9392 = t693*t831*t9374;
  t9404 = -1.*t856*t9374*t896;
  t9410 = t9392 + t9404;
  t9019 = t8766*t7866;
  t9042 = -1.*t7428*t5196;
  t9435 = t801*t9274;
  t9437 = t1839*t9267;
  t9441 = t9435 + t9437;
  t9056 = -1.*t7485*t8739;
  t9186 = t7417*t7628;
  t9416 = -1.*t7023*t9410;
  t9453 = t9410*t5506;
  t9207 = t7511*t7417;
  t9210 = t7556*t5425;
  t9536 = t9441*t1976;
  t9537 = t1828*t9384;
  t9541 = t9536 + t9537;
  t9545 = t1828*t9441;
  t9548 = -1.*t1976*t9384;
  t9551 = t9545 + t9548;
  t9225 = t8741*t7558;
  t9477 = t7023*t9410;
  t9501 = -1.*t9410*t5310;
  t9237 = -1.*t7511*t8741;
  t9241 = -1.*t7556*t8783;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=(-0.5*(-0.06108*(-1.*t1728*t2630 - 1.*t1494*t541) + 0.06108*(-1.*t1728*t3856 - 1.*t3258*t541) - 0.241*t5046*(-1.*t5310*t541 - 1.*t1728*t5425) - 0.241*t5458*(-1.*t541*t5506 - 1.*t1728*t5597))*var2[1] - 0.5*(-0.06108*(t1494*t1728 - 1.*t2630*t541) + 0.06108*t5771 - 0.241*t5046*t5793 - 0.241*t5458*t5824)*var2[2])*var2[10];
  p_output1[4]=(-0.5*(-0.06108*t2630 + 0.06108*t3856 - 0.241*t5046*t5425 - 0.241*t5458*t5597)*var2[0] - 0.5*(0.06108*t541*t5991 - 0.06108*t541*t6004 + 0.241*t5046*t541*t6066 + 0.241*t541*t5458*t6085)*var2[1] - 0.5*(-0.06108*t1728*t5991 + 0.06108*t1728*t6004 - 0.241*t1728*t5046*t6066 - 0.241*t1728*t5458*t6085)*var2[2] - 0.5*(0.06108*(t6468*(t1976*t6602*t6929 + t1976*t6602*t6948) + t1828*t6602*(t2630*t6929 + t2630*t6948 + t5991*t7102 + t6468*t7102) + t2630*t7116 - 1.*t1976*t6602*t7151) - 0.06108*((-1.*t1976*t6602*t6929 - 1.*t1976*t6602*t6948)*t7208 + t1828*t6602*(-1.*t3856*t6929 - 1.*t3856*t6948 - 1.*t6004*t7102 - 1.*t7102*t7208) + t3856*t7225 - 1.*t1976*t6602*t7269) - 0.241*t5458*(t7417*(-1.*t1976*t6602*t7493 - 1.*t1976*t6602*t7511) + t1828*t6602*(-1.*t5425*t7493 - 1.*t5425*t7511 - 1.*t6066*t7556 - 1.*t7417*t7556) + t5425*t7558 - 1.*t1976*t6602*t7594) - 0.241*t5046*((t1976*t6602*t7493 + t1976*t6602*t7511)*t7611 + t1828*t6602*(t5597*t7493 + t5597*t7511 + t6085*t7556 + t7556*t7611) + t5597*t7628 - 1.*t1976*t6602*t7652))*var2[3])*var2[10];
  p_output1[5]=(t7713 + t7752 + t7778 - 0.5*(0.06108*(t6468*(t7799 + t7809 - 1.*t6602*t7788*t7960 - 1.*t6602*t7788*t7967 + t7969 + t7970) + t7977 + t1828*t6602*(t7783 - 1.*t1976*t2630*t7788 + t1828*t6468*t7788 + t7790 + t7982 + t7983) + t7988) - 0.06108*(t7208*(t7829 + t7832 + t6602*t7788*t7960 + t6602*t7788*t7967 + t7995 + t7996) + t8003 + t1828*t6602*(t1976*t3856*t7788 - 1.*t1828*t7208*t7788 + t7837 + t7839 + t8004 + t8006) + t8014) - 0.241*t5458*(t7417*(t7870 + t7877 + t6602*t7874*t7960 + t6602*t7874*t7967 + t8027 + t8028) + t8031 + t1828*t6602*(t1976*t5425*t7874 - 1.*t1828*t7417*t7874 + t7889 + t7891 + t8032 + t8033) + t8043) - 0.241*t5046*(t7611*(t7915 + t7919 - 1.*t6602*t7874*t7960 - 1.*t6602*t7874*t7967 + t8049 + t8051) + t8062 + t1828*t6602*(-1.*t1976*t5597*t7874 + t1828*t7611*t7874 + t7944 + t7946 + t8063 + t8067) + t8072))*var2[3] - 0.5*(0.06108*(t7782 + t7023*(t7783 + t7784 + t2094*t7788 + t7790) + t1494*(-1.*t6602*t7788 + t7798 + t7799 + t7809) + t7820) - 0.06108*(t7826 + t3258*(t6602*t7788 + t7827 + t7829 + t7832) + t7023*(-1.*t3423*t7788 + t7837 + t7838 + t7839) + t7846) - 0.241*t5458*(t7868 + t5310*(t7869 + t7870 + t6602*t7874 + t7877) + t7887 + t7023*(-1.*t5392*t7874 + t7889 + t7891 + t7893)) - 0.241*t5046*(t7912 + t5506*(-1.*t6602*t7874 + t7914 + t7915 + t7919) + t7936 + t7023*(t5576*t7874 + t7944 + t7946 + t7947)))*var2[4])*var2[10];
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=(t7713 + t7752 + t7778 - 0.5*(0.06108*(t7977 + t7988 + t1828*t6602*(t7790 + t7982 + t7983 + t8250 - 1.*t1976*t2630*t8268 + t1828*t6468*t8268) + t6468*(t7809 + t7969 + t7970 - 1.*t6602*t7960*t8268 - 1.*t6602*t7967*t8268 + t8308)) - 0.06108*(t8003 + t8014 + t7208*(t7832 + t7995 + t7996 + t6602*t7960*t8268 + t6602*t7967*t8268 + t8337) + t1828*t6602*(t7837 + t8004 + t8006 + t1976*t3856*t8268 - 1.*t1828*t7208*t8268 + t8374)) - 0.241*t5458*(t8031 + t8043 + t7417*(t7877 + t8027 + t8028 + t8397 + t6602*t7960*t8404 + t6602*t7967*t8404) + t1828*t6602*(t7889 + t8032 + t8033 + t1976*t5425*t8404 - 1.*t1828*t7417*t8404 + t8448)) - 0.241*t5046*(t8062 + t8072 + t7611*(t7919 + t8049 + t8051 - 1.*t6602*t7960*t8404 - 1.*t6602*t7967*t8404 + t8469) + t1828*t6602*(t7944 + t8063 + t8067 - 1.*t1976*t5597*t8404 + t1828*t7611*t8404 + t8479)))*var2[3] - 0.5*(0.06108*(t7782 + t7820 + t7023*(t7784 + t7790 + t8250 + t2094*t8268) + t1494*(t7798 + t7809 - 1.*t6602*t8268 + t8308)) - 0.06108*(t7826 + t7846 + t3258*(t7827 + t7832 + t6602*t8268 + t8337) + t7023*(t7837 + t7838 - 1.*t3423*t8268 + t8374)) - 0.241*t5458*(t7868 + t7887 + t5310*(t7869 + t7877 + t8397 + t6602*t8404) + t7023*(t7889 + t7893 - 1.*t5392*t8404 + t8448)) - 0.241*t5046*(t7912 + t7936 + t5506*(t7914 + t7919 - 1.*t6602*t8404 + t8469) + t7023*(t7944 + t7947 + t5576*t8404 + t8479)))*var2[4] - 0.5*(0.06108*t1839*(-1.*t6840*t693 - 1.*t693*t8084 + t6835*t856 - 1.*t8108*t856) - 0.06108*t801*(t6840*t693 + t693*t8084 - 1.*t6835*t856 + t8108*t856) - 0.241*t5046*t5539*(-1.*t693*t7471 - 1.*t693*t8151 + t7457*t856 - 1.*t8180*t856) - 0.241*t5373*t5458*(t693*t7471 + t693*t8151 - 1.*t7457*t856 + t8180*t856))*var2[5])*var2[10];
  p_output1[10]=(-0.5*(-0.06108*t7208 + 0.06108*t8725 + t8729 + t8742)*var2[0] - 0.5*(-0.06108*t5771 + 0.06108*(t1728*t7677 - 1.*t541*t8749) + t8842 + t8852)*var2[1] - 0.5*(-0.06108*(t1728*t3856 + t3258*t541) + 0.06108*(t541*t7677 + t1728*t8749) + t8762 + t8833)*var2[2] - 0.5*(-0.06108*(t7225*t8725 + t1828*t6602*(-1.*t6948*t8725 - 1.*t7102*t8749 + t8923 + t8943 - 1.*t7208*t9095 - 1.*t3856*t9110) + t7208*(t8915 + t1828*t6602*t9095 - 1.*t1976*t6602*t9110)) + 0.06108*(t7116*t7208 + t1828*t6602*(t3856*t7102 + t6948*t7208 + t8894 + t8896 + t6468*t9095 + t2630*t9110) + t6468*(t8879 - 1.*t1828*t6602*t9095 + t1976*t6602*t9110)) - 0.241*t5046*(t9186 + t7611*(t8981 - 1.*t1828*t6602*t9189 + t1976*t6602*t9194) + t1828*t6602*(t8987 + t8990 + t7611*t9189 + t5597*t9194 + t9207 + t9210)) - 0.241*t5458*(t7417*(t9035 + t1828*t6602*t9189 - 1.*t1976*t6602*t9194) + t9225 + t1828*t6602*(t9055 + t9061 - 1.*t7417*t9189 - 1.*t5425*t9194 + t9237 + t9241)))*var2[3] - 0.5*(0.06108*(t3258*t7781 + t1494*(-1.*t6602*t8871 + t8879) + t7023*(t1839*t6812 + t3423*t6845 + t6710*t801 + t2094*t8871 + t8894 + t8896)) - 0.06108*(t7677*t7825 + t3258*(t6602*t8871 + t8915) + t7023*(t7817 - 1.*t6812*t801 - 1.*t6845*t8713 - 1.*t3423*t8871 + t8923 + t8943)) - 0.241*t5046*(t8948 + t5506*(-1.*t6602*t8974 + t8981) + t7023*(t5539*t7447 + t5576*t8974 + t8985 + t8986 + t8987 + t8990)) - 0.241*t5458*(t9019 + t5310*(t6602*t8974 + t9035) + t7023*(-1.*t5373*t7447 - 1.*t5392*t8974 + t9042 + t9055 + t9056 + t9061)))*var2[4] - 0.5*(0.06108*t801*(-1.*t6835*t693 - 1.*t6840*t856) + 0.06108*t1839*(t6835*t693 + t6840*t856) + t8672 + t8682)*var2[5] - 0.5*(0.0034116234*t1839 - 0.0034116234*t801 + t8687 + t8698)*var2[9])*var2[10];
  p_output1[11]=var2[10]*(-0.5*(t8729 + t8742 - 0.241*t7417*t9278 - 0.241*t7611*t9284)*var2[0] - 0.5*(t8842 + t8852 - 0.241*t5793*t9278 - 0.241*t5824*t9284)*var2[1] - 0.5*(t8762 + t8833 - 0.241*t8761*t9278 - 0.241*(t541*t5506 + t1728*t5597)*t9284)*var2[2] - 0.5*(-0.241*(t7611*t7628 + t1828*t6602*t7652)*t9278 - 0.241*(t7417*t7558 + t1828*t6602*t7594)*t9284 - 0.241*t5458*(t9225 + t1828*t6602*(t9061 + t9237 + t9241 + t9501 - 1.*t7417*t9541 - 1.*t5425*t9551) + t7417*(t9477 + t1828*t6602*t9541 - 1.*t1976*t6602*t9551)) - 0.241*t5046*(t9186 + t1828*t6602*(t8987 + t9207 + t9210 + t9453 + t7611*t9541 + t5597*t9551) + t7611*(t9416 - 1.*t1828*t6602*t9541 + t1976*t6602*t9551)))*var2[3] - 0.5*(-0.241*(t5506*t7910 + t7023*t7932)*t9278 - 0.241*(t5310*t7866 + t7023*t7884)*t9284 - 0.241*t5046*(t8948 + t5506*(-1.*t6602*t9384 + t9416) + t7023*(t8985 + t8986 + t8987 + t5576*t9384 + t5539*t9441 + t9453)) - 0.241*t5458*(t9019 + t5310*(t6602*t9384 + t9477) + t7023*(t9042 + t9056 + t9061 - 1.*t5392*t9384 - 1.*t5373*t9441 + t9501)))*var2[4] - 0.5*(t8672 + t8682 - 0.241*t5539*t8670*t9278 - 0.241*t5373*t8680*t9284)*var2[5] - 0.5*(t8687 + t8698 - 0.241*(-0.081715*t5196 - 0.11688*t5539)*t9278 - 0.008474765*t5373*t9284)*var2[9] - 0.5*(-0.482*t5046*t9278 - 0.482*t5458*t9284)*var2[10] - 0.5*(0.03856*t9278 - 0.00482*t9284)*var2[11]);
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce3_vec11_plane.hh"

namespace SymFunction
{

void Ce3_vec11_plane_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
